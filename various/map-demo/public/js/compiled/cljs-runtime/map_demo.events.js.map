{"version":3,"sources":["map_demo/events.cljs"],"mappings":";AASA,yDAAA,zDAACA,8JAEA,EAAA,AAAAC,iDAAA,WAAYO,EAAEA;AAAd,AAAA,IAAAN,6BAAA;AAAA,AAAA,IAAA,AAAA,AAAAC,gDAAA,AAAA;;AAAA,IAAAC,wBACWK;AADX,AAAA,AAAAJ,iDAAA,2CAAA,8DAAA,EAAA,qEAAA,IAAA,yDAAAD,sBAAA,sDAAA,AAAA,yEAAA,qEAAA;;AAAAA;gBAAA,IAAAE,IAAAC;AAAA,AAAA,MAAAD;IAAA,WAAYE,EAAEA;AAAd,AACWC;;AAGZ,yDAAA,zDAACC,uJAEA,WAAAC,SAAkBH;AAAlB,AAAA,IAAAI,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;SAAA,AAAAE,4CAAAF,eAAA,hEAAaG;AAAb,AAAA,kDAAA,oKAAA,iEAAA,2CAAA,uDAAA,mDAAA,mDAAA,cAAA,2DAAA,OAAA,iOAAA,iEAAA,mFAAA,sHAAA,gEAAA,mFAAA,3kCACS,iDAAA,6DAAA,9GAACC,8CAAMD,0eAKiB,+BAAA,2CAAA,8DAAA,xIAACE;;AAKnC,yDAAA,zDAACjB,qKAEA,WAAKQ,EAAEA;AAAP,AACE,aAAA,NAACU;;AAGJ,6CAAA,wDAAAC,rGAAMI,kGACHR;AADH,AAAA,IAAAK,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DACOZ;IADPc,aAAA,AAAAD,4CAAAD,WAAA,IAAA;IAAAE,iBAAA,AAAAT,4BAAAS;eAAA,AAAAR,4CAAAQ,eAAA,tEACiBE;AADjB,iJAEOT,9CACA,iDAAA,6DAAA,9GAACC,9CACD,mKAAA,4DAAA,/NAACA,rDACD,0RAAA,nRAACA,8UAWO,6CAAA,WAAAmB,xDAACC;AAAD,AAAO,wBAAA,mFAAA,mDAAA,mDAAA,4FAAA,0DAAA,qDAAA,0DAAA,6DAAAD,5gBAACE;iEARR,AAACZ,4CAAI,oDAAA,WAAAC,/DAACM,1GAON,AAACP,4CAAIS;AAPA,AACE,sDAAAR,iBAAA,mFAAA,6DAAA,hNAACO;GADH,WAAAN;AAAA,AAEE,sDAAAA,iBAAA,mFAAA,gEAAA,nNAACM;GAFH,WAAAL;AAAA,AAGE,sDAAAA,iBAAA,mFAAA,gEAAA,nNAACK;qDAHH,WAAAJ;AAAA,AAIE,sDAAAA,iBAAA,mFAAA,gEAAA,nNAACI;GAJH,WAAAH;AAAA,AAKE,sDAAAA,iBAAA,mFAAA,gEAAA,nNAACG;GALH,WAAAF;AAAA,AAME,sDAAAA,iBAAA,mFAAA,gEAAA,nNAACE;SAPRT;;AAkBf,yDAAA,zDAACxB,uKAEAuB;AAGD,yDAAA,zDAACvB,mJAEA,cAAAsC,HAAKvB;AAAL,AAAA,IAAAwB,aAAAD;QAAA,AAAAjB,4CAAAkB,WAAA,IAAA,/DAAS/B;UAAT,AAAAa,4CAAAkB,WAAA,IAAA,jEAAWC;AAAX,AACE,wDAAA,jDAACxB,8CAAMD,gEAAayB;;AAGvB,yDAAA,zDAACxC,sKAEA,cAAAyC,HAAK1B;AAAL,AAAA,IAAA2B,aAAAD;QAAA,AAAApB,4CAAAqB,WAAA,IAAA,/DAASlC;gBAAT,AAAAa,4CAAAqB,WAAA,IAAA,vEAAWC;AAAX,AACE,wDAAA,jDAAC3B,8CAAMD,0EAAkB4B;;AAG5B,yDAAA,zDAAC3C,iMAEA,cAAA4C,HAAK7B;AAAL,AAAA,IAAA8B,aAAAD;QAAA,AAAAvB,4CAAAwB,WAAA,IAAA,/DAASrC;gBAAT,AAAAa,4CAAAwB,WAAA,IAAA,vEAAWF;AAAX,AACE,wDAAA,jDAAC3B,8CAAMD,kGAA+B4B","names":["re_frame.core.reg_event_db","day8.re-frame.tracing/is-trace-enabled?","+debux-dbg-opts+","day8.re-frame.debux.common.util/send-form!","result__37005__auto__","day8.re-frame.debux.common.util/send-trace!","e","e37116","_","map-demo.db/default-db","re_frame.core.reg_event_fx","p__37117","map__37118","cljs.core/--destructure-map","cljs.core.get","db","cljs.core.assoc","ajax.core/json-response-format","js/alert","p__37126","vec__37127","cljs.core.nth","map__37130","map-demo.events/fetch-jobs-success-handler","features","cljs.core.map","p1__37119#","p1__37120#","p1__37121#","p1__37122#","p1__37123#","p1__37124#","cljs.core.juxt","cljs.core.get_in","cljs.core/flatten","p1__37125#","cljs.core.mapv","cljs.core/zipmap","p__37131","vec__37132","val","p__37135","vec__37136","new-value","p__37139","vec__37140"],"sourcesContent":["(ns map-demo.events\n  (:require\n   [re-frame.core :as re-frame]\n   [map-demo.db :as db]\n   [day8.re-frame.http-fx]\n   [day8.re-frame.tracing :refer-macros [fn-traced]]\n   [ajax.core :as ajax]))\n\n\n(re-frame/reg-event-db\n ::initialize-db\n (fn-traced [_ _]\n            db/default-db))\n\n\n(re-frame/reg-event-fx\n ::fetch-jobs\n (fn [{:keys [db]} _]\n   {:db   (assoc db :loading? true)\n    :http-xhrio {:method          :get\n                 :uri             \"./jobs.json\"\n ;;              :uri             \"https://admin.lund.panorama-gis.se/api/v1/public/objects\"\n                 :timeout         8000                                          \n                 :response-format (ajax/json-response-format {:keywords? true}) \n                 :on-success      [::fetch-jobs-success]\n                 :on-failure      [::fetch-jobs-failed]}}))\n\n\n(re-frame/reg-event-db\n ::fetch-jobs-failed\n (fn [_ _]\n   (js/alert \"Ooops. Something went wrong. Might be a network issue. Try to reload the page again.\")))\n\n;; fetch data from json file, mung data to desired format\n(defn fetch-jobs-success-handler\n  [db [_ {:keys [features]}]]\n   (-> db\n       (assoc :loading? false)\n       (assoc :loaded? true)\n       (assoc :markers\n              (->>\n               features\n               (map (juxt\n                     #(get-in % [:geometry :coordinates])\n                     #(get-in % [:properties :estimated-traffic-effect])\n                     #(get-in % [:properties :comment])\n                     #(get-in % [:properties :name])\n                     #(get-in % [:properties :status])\n                     #(get-in % [:properties :type])))\n               (map flatten)\n               (mapv #(zipmap\n                       [:lng\n                        :lat\n                        :estimated-traffic-effect\n                        :comment\n                        :name\n                        :status\n                        :type] %))))))\n\n(re-frame/reg-event-db\n ::fetch-jobs-success\n fetch-jobs-success-handler\n)\n\n(re-frame/reg-event-db\n ::loading?\n (fn [db [_ val]]\n   (assoc db :loading? val)))\n\n\n(re-frame/reg-event-db\n ::ta-change-checkbox\n (fn [db [_ new-value]]\n   (assoc db :ta-is-checked new-value)))\n\n\n(re-frame/reg-event-db\n ::traffic-effects-change-checkbox\n (fn [db [_ new-value]]\n   (assoc db :traffic-effects-is-checked new-value)))\n\n"]}