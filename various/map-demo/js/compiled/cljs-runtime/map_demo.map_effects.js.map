{"version":3,"sources":["map_demo/map_effects.cljs"],"mappings":";;AAMA,AAAKA,mCAAY,6CAAA,7CAACC;AAElB;;;gCAAA,hCAAMC,wEAEHC;AAFH,AAGE,OAAA,KAAAC,qDAAA,qBAAID,rBACAE;;AAIN;;;8BAAA,9BAAMC,oEAEHC,IAAIC;AAFP,AAAA,kDAAA,UAAA,JAGSD,UAAUC;;AAEnB;;;wCAAA,gDAAAC,xFAAMI;AAAN,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;UAAA,AAAAE,4CAAAF,eAAA,jEAEWH;UAFX,AAAAK,4CAAAF,eAAA,jEAEeF;cAFf,AAAAI,4CAAAF,eAAA,rEAEmBI;SAFnB,AAAAF,4CAAAF,eAAA,hEAE2BK;AAF3B,AAGE,OAAO,AAACb,8BAASY,cACV,WAASE;AAAT,AACE,IAAMC,QAAM,AAAA,AAAID;IACVE,IAAE,KAAAD,MACC,AAAiBE,wBAAYJ,IAC7B,qBAAA,2CAAA,8CAAA,4BAAA,1IAACV,yEAAkB,AAACC,4BAAOC,IAAIC,YACdY,8BACEC;AAL5B,AAME,8DAAA,2CAAA,qDAAA,mEAAA,2DAAA,rRAACC,sBAAOtB,+HAAkBkB,6DAAWF;;;AAElD;;;2CAAA,3CAAMO,8FAEHhB,IAAIC,IAAIgB;AAFX,AAGE,IAAAC,aAAA,AAAAC,gBAC6B1B;IAD7ByB,iBAAA,AAAAd,4BAAAc;WAAA,AAAAb,4CAAAa,eAAA,lEAAOE;cAAP,AAAAf,4CAAAa,eAAA,rEACUT;IACJY,SAAO,AAAA,AAAIZ;IACXa,SAAO,KAAAD,OACG,qBAAA,2CAAA,gDAAA,WAAA,aAAA,OAAA,/IAACvB,2EACY,AAACC,4BAAOC,IAAIC,WACjBmB,aACEH;AAP1B,AASE,sHAAA,mFAAA,lMAACM,0DAAM9B,iCAAY+B,0KAAqBC,iEAAKH;;AAEjD;;;4CAAA,5CAAMI;AAAN,AAGE,IAAMC,UAAQ,AAAA,yFAAA,AAAAR,gBAAW1B;AAAzB,AACE,GAAU,AAACmC,uBAAOD;AAAlB;;AAAA,AACE,OAACE,8CACA,AAACC,4CACA,WAASC;AAAT,AAAe,mBAAA,ZAASA;GACxBJ;;;AAER;;;8BAAA,9BAAMK,oEAEHhC,IAAIC,IAAIgC;AAFX,AAGE,IAAUtB,IAAE,AAAA,iFAAA,AAAAQ,gBAAO1B;AAAnB,AACE,AAAUkB,UAAEsB;;AACZ,OAAQtB,QAAE,AAACb,qBAAQ,AAACC,4BAAOC,IAAIC","names":["map-demo.map-effects/global-gmap","cljs.core.atom","map-demo.map-effects/with-map","key","js/module$node_modules$google_maps$lib$cjs$index.Loader","cljs.core/clj->js","map-demo.map-effects/latlng","lat","lng","p__38939","map__38940","cljs.core/--destructure-map","cljs.core.get","map-demo.map-effects/create-map!","api-key","el","wrapper","gmaps","m","js/document","map-demo.config/zoom","map-demo.config/map-styles","cljs.core/reset!","map-demo.map-effects/create-marker!","name","map__38941","cljs.core/deref","gmap","Marker","marker","cljs.core.swap_BANG_","cljs.core/update-in","cljs.core/conj","map-demo.map-effects/delete-markers!","markers","cljs.core/empty?","cljs.core.doall","cljs.core.map","mrks","map-demo.map-effects/center","level"],"sourcesContent":["(ns map-demo.map-effects\n  (:require\n   [map-demo.config :as config]\n      [\"google-maps\" :as gmaps]))\n\n;; Set the global for map\n(def global-gmap (atom nil))\n\n(defn with-map\n  \"Wrap context to map object\"\n  [key]\n  (-> key\n      clj->js\n      gmaps/Loader.\n      .load))\n\n(defn latlng\n  \"Helper to format lat lng into a map\"\n  [lat lng]\n  {\"lat\" lat \"lng\" lng})\n  \n(defn create-map! \n  \"Create the stateful map object\"\n  [{:keys [lat lng api-key el]}]\n  (.then (with-map api-key)\n         (fn [^js wrapper]\n           (let [gmaps (.. wrapper -maps -Map)\n                 m (gmaps.\n                    (.getElementById js/document el)\n                    (clj->js {\"center\" (latlng lat lng)\n                              \"zoom\" config/zoom\n                              \"styles\" config/map-styles}))]\n             (reset! global-gmap {:map m :wrapper wrapper :markers []})))))\n\n(defn create-marker!\n  \"Create a marker (stateful)\"\n  [lat lng name]\n  (let [{gmap :map\n        ^js wrapper :wrapper} @global-gmap\n        Marker (.. wrapper -maps -Marker)\n        marker (Marker.\n                  (clj->js\n                   {\"position\" (latlng lat lng)\n                    \"map\" gmap\n                    \"title\" name\n                    \"icon\" \"./marker.png\"}))]\n    (swap! global-gmap update-in [:markers] conj marker)))\n\n(defn delete-markers!\n  \"Delete all markers in map object\"\n  []\n  (let [markers (:markers @global-gmap)]\n    (when-not (empty? markers)\n      (doall\n       (map\n        (fn [^js mrks] (.setMap mrks nil))\n        markers)))))  \n\n(defn center\n    \"Center map at lat lng with selected zoom level\"\n  [lat lng level]\n  (let [^js m (:map @global-gmap)]\n    (.setZoom m level) \n    (.panTo m (clj->js (latlng lat lng)))))\n\n"]}