{
"version":3,
"file":"module$node_modules$bitcoin_address_generator$node_modules$bitcoinjs_lib$src$script.js",
"lineCount":8,
"mappings":"AAAAA,cAAA,CAAA,mFAAA,CAAwG,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAoBhJC,QAASA,gBAAgB,CAACC,KAAD,CAAQ,CACxB,IAAA,eAAA,EAAA,eAAA,CAAA,KAAA,CAAA,MAAA,CAAA,KAAA,CAAA,IAPP,eAOO,CAPAC,KAAMC,CAAAA,MAAN,CAOuBF,KAPvB,CAOA,GAAuBA,KAAvB,GANOG,GAAIC,CAAAA,IAMX,EAAuBJ,KAAvB,EALKG,GAAIE,CAAAA,IAKT,EAAuBL,KAAvB,EAL0BG,GAAIG,CAAAA,KAK9B,EAAuBN,KAAvB,GAJMG,GAAII,CAAAA,UAIV,EAAP,OAAO,gBADwB,CAIjCC,QAASA,WAAW,CAACR,KAAD,CAAQ,CAC1B,MAAOC,MAAMQ,CAAAA,KAAN,CAAYT,KAAZ,CAAP,EAA6BA,KAAMU,CAAAA,KAAN,CAAYX,eAAZ,CADH,CAI5BY,QAASA,YAAY,CAACC,MAAD,CAAS,CAC5B,GAAsB,CAAtB,GAAIA,MAAOC,CAAAA,MAAX,CAAyB,MAAOV,IAAIC,CAAAA,IACpC;GAAsB,CAAtB,GAAIQ,MAAOC,CAAAA,MAAX,CAAA,CACA,GAAiB,CAAjB,EAAID,MAAA,CAAO,CAAP,CAAJ,EAAmC,EAAnC,EAAsBA,MAAA,CAAO,CAAP,CAAtB,CAAuC,MAAOE,YAAP,CAAqBF,MAAA,CAAO,CAAP,CAC5D,IAAkB,GAAlB,GAAIA,MAAA,CAAO,CAAP,CAAJ,CAAwB,MAAOT,IAAII,CAAAA,UAFnC,CAF4B,CAO9BQ,QAASA,QAAQ,CAACC,MAAD,CAAS,CAExB,GAAIC,MAAOC,CAAAA,QAAP,CAAgBF,MAAhB,CAAJ,CAA6B,MAAOA,OAEpCG,UAAA,CAAUlB,KAAMQ,CAAAA,KAAhB,CAAuBO,MAAvB,CAEA,OAAMI,WAAaJ,MAAOK,CAAAA,MAAP,CAAc,QAAS,CAACC,KAAD,CAAQC,KAAR,CAAe,CAEvD,MAAIN,OAAOC,CAAAA,QAAP,CAAgBK,KAAhB,CAAJ,CAEuB,CAArB,GAAIA,KAAMV,CAAAA,MAAV,EAAiDW,IAAAA,EAAjD,GAA0Bb,WAAA,CAAYY,KAAZ,CAA1B,CACSD,KADT,CACiB,CADjB,CAIOA,KAJP,CAIeG,QAASC,CAAAA,cAAT,CAAwBH,KAAMV,CAAAA,MAA9B,CAJf,CAIuDU,KAAMV,CAAAA,MAN/D,CAUOS,KAVP,CAUe,CAZwC,CAAtC,CAahB,CAbgB,CAAnB,CAeMV,OAASK,MAAOU,CAAAA,WAAP,CAAmBP,UAAnB,CACf,KAAIQ,OAAS,CAEbZ,OAAOa,CAAAA,OAAP,CAAe,QAAS,CAACN,KAAD,CAAQ,CAE9B,GAAIN,MAAOC,CAAAA,QAAP,CAAgBK,KAAhB,CAAJ,CAA4B,CAE1B,MAAMO;AAASnB,WAAA,CAAYY,KAAZ,CACAC,KAAAA,EAAf,GAAIM,MAAJ,EACElB,MAAOmB,CAAAA,UAAP,CAAkBD,MAAlB,CAA0BF,MAA1B,CACA,CAAAA,MAAA,EAAU,CAFZ,GAMAA,MAEA,EAFUH,QAASO,CAAAA,MAAT,CAAgBpB,MAAhB,CAAwBW,KAAMV,CAAAA,MAA9B,CAAsCe,MAAtC,CAEV,CADAL,KAAMU,CAAAA,IAAN,CAAWrB,MAAX,CAAmBgB,MAAnB,CACA,CAAAA,MAAA,EAAUL,KAAMV,CAAAA,MARhB,CAH0B,CAA5B,IAeED,OAAOmB,CAAAA,UAAP,CAAkBR,KAAlB,CAAyBK,MAAzB,CACA,CAAAA,MAAA,EAAU,CAlBkB,CAAhC,CAsBA,IAAIA,MAAJ,GAAehB,MAAOC,CAAAA,MAAtB,CAA8B,KAAUqB,MAAJ,CAAU,yBAAV,CAAN,CAC9B,MAAOtB,OA/CiB,CAkD1BuB,QAASA,UAAU,CAACvB,MAAD,CAAS,CAE1B,GAAIX,KAAMQ,CAAAA,KAAN,CAAYG,MAAZ,CAAJ,CAAyB,MAAOA,OAEhCO,UAAA,CAAUlB,KAAMgB,CAAAA,MAAhB,CAAwBL,MAAxB,CAEA,OAAMI,OAAS,EACf,KAAIoB,EAAI,CAER,KAAA,CAAOA,CAAP,CAAWxB,MAAOC,CAAAA,MAAlB,CAAA,CAA0B,CACxB,IAAMiB,OAASlB,MAAA,CAAOwB,CAAP,CAGf,IAAKN,MAAL,CAAc3B,GAAIC,CAAAA,IAAlB,EAA4B0B,MAA5B,EAAsC3B,GAAIkC,CAAAA,YAA1C,CAAyD,CACvD,IAAMC;AAAIb,QAASc,CAAAA,MAAT,CAAgB3B,MAAhB,CAAwBwB,CAAxB,CAGV,IAAU,IAAV,GAAIE,CAAJ,CAAgB,MAAO,KACvBF,EAAA,EAAKE,CAAEE,CAAAA,IAGP,IAAIJ,CAAJ,CAAQE,CAAEG,CAAAA,MAAV,CAAmB7B,MAAOC,CAAAA,MAA1B,CAAkC,MAAO,KAEnC6B,OAAAA,CAAO9B,MAAO+B,CAAAA,KAAP,CAAaP,CAAb,CAAgBA,CAAhB,CAAoBE,CAAEG,CAAAA,MAAtB,CACbL,EAAA,EAAKE,CAAEG,CAAAA,MAGDG,EAAAA,CAAKjC,WAAA,CAAY+B,MAAZ,CACAlB,KAAAA,EAAX,GAAIoB,CAAJ,CACE5B,MAAO6B,CAAAA,IAAP,CAAYD,CAAZ,CADF,CAGE5B,MAAO6B,CAAAA,IAAP,CAAYH,MAAZ,CAlBqD,CAAzD,IAuBE1B,OAAO6B,CAAAA,IAAP,CAAYf,MAAZ,CAEA,CAAAM,CAAA,EAAK,CA7BiB,CAiC1B,MAAOpB,OA1CmB,CA4F5B8B,QAASA,kBAAkB,CAACC,QAAD,CAAW,CAChBA,QAAdC,EAA0B,CAAA,GAGhC,OAAqB,EAArB,CAAOA,QAAP,EAA2C,CAA3C,CAA6BA,QAJO,CAhLtC,MAAM/B,OAASrB,OAAA,CAAQ,uCAAR,CAAuBqB,CAAAA,MAAtC,CACMgC,MAAQrD,OAAA,CAAQ,iCAAR,CADd,CAEMsD,IAAMtD,OAAA,CAAQ,uCAAR,CAFZ;AAGM6B,SAAW7B,OAAA,CAAQ,4CAAR,CAHjB,CAIMuB,UAAYvB,OAAA,CAAQ,qCAAR,CAJlB,CAKMK,MAAQL,OAAA,CAAQ,oFAAR,CALd,CAMMuD,aAAevD,OAAA,CAAQ,4FAAR,CANrB,CAQMO,IAAMP,OAAA,CAAQ,4CAAR,CARZ,CASMwD,YAAcxD,OAAA,CAAQ,qCAAR,CATpB,CAUMkB,YAAcX,GAAIkD,CAAAA,WAoLxBxD,OAAOC,CAAAA,OAAP,CAAiB,CACNiB,OADM;AAEJoB,SAFI,CAGfmB,QA9CFA,QAAiB,CAACC,GAAD,CAAM,CACrBpC,SAAA,CAAUlB,KAAMuD,CAAAA,MAAhB,CAAwBD,GAAxB,CAEA,OAAOxC,QAAA,CAAQwC,GAAIE,CAAAA,KAAJ,CAAU,GAAV,CAAeC,CAAAA,GAAf,CAAmB,QAAS,CAACC,QAAD,CAAW,CAEpD,GAAsBnC,IAAAA,EAAtB,GAAIrB,GAAA,CAAIwD,QAAJ,CAAJ,CAAiC,MAAOxD,IAAA,CAAIwD,QAAJ,CACxCxC,UAAA,CAAUlB,KAAM2D,CAAAA,GAAhB,CAAqBD,QAArB,CAGA,OAAO1C,OAAO4C,CAAAA,IAAP,CAAYF,QAAZ,CAAsB,KAAtB,CAN6C,CAAvC,CAAR,CAHc,CA2CN,CAIfG,MAjEFA,QAAe,CAAC9C,MAAD,CAAS,CAClBC,MAAOC,CAAAA,QAAP,CAAgBF,MAAhB,CAAJ,GACEA,MADF,CACWmB,SAAA,CAAUnB,MAAV,CADX,CAIA,OAAOA,OAAO0C,CAAAA,GAAP,CAAW,QAAS,CAACnC,KAAD,CAAQ,CAEjC,GAAIN,MAAOC,CAAAA,QAAP,CAAgBK,KAAhB,CAAJ,CAA4B,CAC1B,MAAMqB,GAAKjC,WAAA,CAAYY,KAAZ,CACX,IAAWC,IAAAA,EAAX,GAAIoB,EAAJ,CAAsB,MAAOrB,MAAMwC,CAAAA,QAAN,CAAe,KAAf,CAC7BxC,MAAA,CAAQqB,EAHkB,CAO5B,MAAOQ,YAAA,CAAY7B,KAAZ,CAT0B,CAA5B,CAUJyC,CAAAA,IAVI,CAUC,GAVD,CALe,CA6DP,CAKfC,QAnCFA,QAAiB,CAACjD,MAAD,CAAS,CACxBA,MAAA;AAASmB,SAAA,CAAUnB,MAAV,CACTG,UAAA,CAAUX,UAAV,CAAsBQ,MAAtB,CAEA,OAAOA,OAAO0C,CAAAA,GAAP,CAAW,QAAS,CAACd,EAAD,CAAK,CAC9B,MAAI3B,OAAOC,CAAAA,QAAP,CAAgB0B,EAAhB,CAAJ,CAAgCA,EAAhC,CACIA,EAAJ,GAAWzC,GAAIC,CAAAA,IAAf,CAA4Ba,MAAOU,CAAAA,WAAP,CAAmB,CAAnB,CAA5B,CAEOwB,YAAanB,CAAAA,MAAb,CAAoBY,EAApB,CAAyB9B,WAAzB,CAJuB,CAAzB,CAJiB,CA8BT,CAOf2B,OAAQ7C,OAAA,CAAQ,4FAAR,CAPO,CAQfsE,UAAWtE,OAAA,CAAQ,+FAAR,CARI,CAUfuE,kBA5BFA,QAA2B,CAACvD,MAAD,CAAS,CAClC,MAAOsC,IAAIkB,CAAAA,OAAJ,CAAYxD,MAAZ,CAD2B,CAkBnB,CAWfyD,2BAlBFA,QAAoC,CAACzD,MAAD,CAAS,CAE3C,MADKK,OAAOC,CAAAA,QAAP,CAAgBN,MAAhB,CACL;AAAKkC,iBAAA,CAAkBlC,MAAA,CAAOA,MAAOC,CAAAA,MAAd,CAAuB,CAAvB,CAAlB,CAAL,CAEOoC,KAAMqB,CAAAA,KAAN,CAAY1D,MAAO+B,CAAAA,KAAP,CAAa,CAAb,CAAgB,CAAC,CAAjB,CAAZ,CAFP,CAA0D,CAAA,CAFf,CAO5B,CAYHnC,UAZG,CAaIsC,iBAbJ,CA/L+H;",
"sources":["node_modules/bitcoin-address-generator/node_modules/bitcoinjs-lib/src/script.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$bitcoin_address_generator$node_modules$bitcoinjs_lib$src$script\"] = function(global,require,module,exports) {\nconst Buffer = require('safe-buffer').Buffer\nconst bip66 = require('bip66')\nconst ecc = require('tiny-secp256k1')\nconst pushdata = require('pushdata-bitcoin')\nconst typeforce = require('typeforce')\nconst types = require('./types')\nconst scriptNumber = require('./script_number')\n\nconst OPS = require('bitcoin-ops')\nconst REVERSE_OPS = require('bitcoin-ops/map')\nconst OP_INT_BASE = OPS.OP_RESERVED // OP_1 - 1\n\nfunction isOPInt (value) {\n  return types.Number(value) &&\n    ((value === OPS.OP_0) ||\n    (value >= OPS.OP_1 && value <= OPS.OP_16) ||\n    (value === OPS.OP_1NEGATE))\n}\n\nfunction isPushOnlyChunk (value) {\n  return types.Buffer(value) || isOPInt(value)\n}\n\nfunction isPushOnly (value) {\n  return types.Array(value) && value.every(isPushOnlyChunk)\n}\n\nfunction asMinimalOP (buffer) {\n  if (buffer.length === 0) return OPS.OP_0\n  if (buffer.length !== 1) return\n  if (buffer[0] >= 1 && buffer[0] <= 16) return OP_INT_BASE + buffer[0]\n  if (buffer[0] === 0x81) return OPS.OP_1NEGATE\n}\n\nfunction compile (chunks) {\n  // TODO: remove me\n  if (Buffer.isBuffer(chunks)) return chunks\n\n  typeforce(types.Array, chunks)\n\n  const bufferSize = chunks.reduce(function (accum, chunk) {\n    // data chunk\n    if (Buffer.isBuffer(chunk)) {\n      // adhere to BIP62.3, minimal push policy\n      if (chunk.length === 1 && asMinimalOP(chunk) !== undefined) {\n        return accum + 1\n      }\n\n      return accum + pushdata.encodingLength(chunk.length) + chunk.length\n    }\n\n    // opcode\n    return accum + 1\n  }, 0.0)\n\n  const buffer = Buffer.allocUnsafe(bufferSize)\n  let offset = 0\n\n  chunks.forEach(function (chunk) {\n    // data chunk\n    if (Buffer.isBuffer(chunk)) {\n      // adhere to BIP62.3, minimal push policy\n      const opcode = asMinimalOP(chunk)\n      if (opcode !== undefined) {\n        buffer.writeUInt8(opcode, offset)\n        offset += 1\n        return\n      }\n\n      offset += pushdata.encode(buffer, chunk.length, offset)\n      chunk.copy(buffer, offset)\n      offset += chunk.length\n\n    // opcode\n    } else {\n      buffer.writeUInt8(chunk, offset)\n      offset += 1\n    }\n  })\n\n  if (offset !== buffer.length) throw new Error('Could not decode chunks')\n  return buffer\n}\n\nfunction decompile (buffer) {\n  // TODO: remove me\n  if (types.Array(buffer)) return buffer\n\n  typeforce(types.Buffer, buffer)\n\n  const chunks = []\n  let i = 0\n\n  while (i < buffer.length) {\n    const opcode = buffer[i]\n\n    // data chunk\n    if ((opcode > OPS.OP_0) && (opcode <= OPS.OP_PUSHDATA4)) {\n      const d = pushdata.decode(buffer, i)\n\n      // did reading a pushDataInt fail?\n      if (d === null) return null\n      i += d.size\n\n      // attempt to read too much data?\n      if (i + d.number > buffer.length) return null\n\n      const data = buffer.slice(i, i + d.number)\n      i += d.number\n\n      // decompile minimally\n      const op = asMinimalOP(data)\n      if (op !== undefined) {\n        chunks.push(op)\n      } else {\n        chunks.push(data)\n      }\n\n    // opcode\n    } else {\n      chunks.push(opcode)\n\n      i += 1\n    }\n  }\n\n  return chunks\n}\n\nfunction toASM (chunks) {\n  if (Buffer.isBuffer(chunks)) {\n    chunks = decompile(chunks)\n  }\n\n  return chunks.map(function (chunk) {\n    // data?\n    if (Buffer.isBuffer(chunk)) {\n      const op = asMinimalOP(chunk)\n      if (op === undefined) return chunk.toString('hex')\n      chunk = op\n    }\n\n    // opcode!\n    return REVERSE_OPS[chunk]\n  }).join(' ')\n}\n\nfunction fromASM (asm) {\n  typeforce(types.String, asm)\n\n  return compile(asm.split(' ').map(function (chunkStr) {\n    // opcode?\n    if (OPS[chunkStr] !== undefined) return OPS[chunkStr]\n    typeforce(types.Hex, chunkStr)\n\n    // data!\n    return Buffer.from(chunkStr, 'hex')\n  }))\n}\n\nfunction toStack (chunks) {\n  chunks = decompile(chunks)\n  typeforce(isPushOnly, chunks)\n\n  return chunks.map(function (op) {\n    if (Buffer.isBuffer(op)) return op\n    if (op === OPS.OP_0) return Buffer.allocUnsafe(0)\n\n    return scriptNumber.encode(op - OP_INT_BASE)\n  })\n}\n\nfunction isCanonicalPubKey (buffer) {\n  return ecc.isPoint(buffer)\n}\n\nfunction isDefinedHashType (hashType) {\n  const hashTypeMod = hashType & ~0x80\n\n  // return hashTypeMod > SIGHASH_ALL && hashTypeMod < SIGHASH_SINGLE\n  return hashTypeMod > 0x00 && hashTypeMod < 0x04\n}\n\nfunction isCanonicalScriptSignature (buffer) {\n  if (!Buffer.isBuffer(buffer)) return false\n  if (!isDefinedHashType(buffer[buffer.length - 1])) return false\n\n  return bip66.check(buffer.slice(0, -1))\n}\n\nmodule.exports = {\n  compile: compile,\n  decompile: decompile,\n  fromASM: fromASM,\n  toASM: toASM,\n  toStack: toStack,\n\n  number: require('./script_number'),\n  signature: require('./script_signature'),\n\n  isCanonicalPubKey: isCanonicalPubKey,\n  isCanonicalScriptSignature: isCanonicalScriptSignature,\n  isPushOnly: isPushOnly,\n  isDefinedHashType: isDefinedHashType\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","isPushOnlyChunk","value","types","Number","OPS","OP_0","OP_1","OP_16","OP_1NEGATE","isPushOnly","Array","every","asMinimalOP","buffer","length","OP_INT_BASE","compile","chunks","Buffer","isBuffer","typeforce","bufferSize","reduce","accum","chunk","undefined","pushdata","encodingLength","allocUnsafe","offset","forEach","opcode","writeUInt8","encode","copy","Error","decompile","i","OP_PUSHDATA4","d","decode","size","number","data","slice","op","push","isDefinedHashType","hashType","hashTypeMod","bip66","ecc","scriptNumber","REVERSE_OPS","OP_RESERVED","fromASM","asm","String","split","map","chunkStr","Hex","from","toASM","toString","join","toStack","signature","isCanonicalPubKey","isPoint","isCanonicalScriptSignature","check"]
}
