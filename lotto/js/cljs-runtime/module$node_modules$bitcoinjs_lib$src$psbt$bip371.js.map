{
"version":3,
"file":"module$node_modules$bitcoinjs_lib$src$psbt$bip371.js",
"lineCount":16,
"mappings":"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",
"sources":["node_modules/bitcoinjs-lib/src/psbt/bip371.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$bitcoinjs_lib$src$psbt$bip371\"] = function(global,require,module,exports) {\nvar Buffer = require('buffer').Buffer;\n'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nexports.checkTaprootInputForSigs =\n  exports.tapTreeFromList =\n  exports.tapTreeToList =\n  exports.tweakInternalPubKey =\n  exports.checkTaprootOutputFields =\n  exports.checkTaprootInputFields =\n  exports.isTaprootOutput =\n  exports.isTaprootInput =\n  exports.serializeTaprootSignature =\n  exports.tapScriptFinalizer =\n  exports.toXOnly =\n    void 0;\nconst types_1 = require('../types');\nconst transaction_1 = require('../transaction');\nconst psbtutils_1 = require('./psbtutils');\nconst bip341_1 = require('../payments/bip341');\nconst payments_1 = require('../payments');\nconst psbtutils_2 = require('./psbtutils');\nconst toXOnly = pubKey => (pubKey.length === 32 ? pubKey : pubKey.slice(1, 33));\nexports.toXOnly = toXOnly;\n/**\n * Default tapscript finalizer. It searches for the `tapLeafHashToFinalize` if provided.\n * Otherwise it will search for the tapleaf that has at least one signature and has the shortest path.\n * @param inputIndex the position of the PSBT input.\n * @param input the PSBT input.\n * @param tapLeafHashToFinalize optional, if provided the finalizer will search for a tapleaf that has this hash\n *                              and will try to build the finalScriptWitness.\n * @returns the finalScriptWitness or throws an exception if no tapleaf found.\n */\nfunction tapScriptFinalizer(inputIndex, input, tapLeafHashToFinalize) {\n  const tapLeaf = findTapLeafToFinalize(\n    input,\n    inputIndex,\n    tapLeafHashToFinalize,\n  );\n  try {\n    const sigs = sortSignatures(input, tapLeaf);\n    const witness = sigs.concat(tapLeaf.script).concat(tapLeaf.controlBlock);\n    return {\n      finalScriptWitness: (0, psbtutils_1.witnessStackToScriptWitness)(witness),\n    };\n  } catch (err) {\n    throw new Error(`Can not finalize taproot input #${inputIndex}: ${err}`);\n  }\n}\nexports.tapScriptFinalizer = tapScriptFinalizer;\nfunction serializeTaprootSignature(sig, sighashType) {\n  const sighashTypeByte = sighashType\n    ? Buffer.from([sighashType])\n    : Buffer.from([]);\n  return Buffer.concat([sig, sighashTypeByte]);\n}\nexports.serializeTaprootSignature = serializeTaprootSignature;\nfunction isTaprootInput(input) {\n  return (\n    input &&\n    !!(\n      input.tapInternalKey ||\n      input.tapMerkleRoot ||\n      (input.tapLeafScript && input.tapLeafScript.length) ||\n      (input.tapBip32Derivation && input.tapBip32Derivation.length) ||\n      (input.witnessUtxo && (0, psbtutils_1.isP2TR)(input.witnessUtxo.script))\n    )\n  );\n}\nexports.isTaprootInput = isTaprootInput;\nfunction isTaprootOutput(output, script) {\n  return (\n    output &&\n    !!(\n      output.tapInternalKey ||\n      output.tapTree ||\n      (output.tapBip32Derivation && output.tapBip32Derivation.length) ||\n      (script && (0, psbtutils_1.isP2TR)(script))\n    )\n  );\n}\nexports.isTaprootOutput = isTaprootOutput;\nfunction checkTaprootInputFields(inputData, newInputData, action) {\n  checkMixedTaprootAndNonTaprootInputFields(inputData, newInputData, action);\n  checkIfTapLeafInTree(inputData, newInputData, action);\n}\nexports.checkTaprootInputFields = checkTaprootInputFields;\nfunction checkTaprootOutputFields(outputData, newOutputData, action) {\n  checkMixedTaprootAndNonTaprootOutputFields(outputData, newOutputData, action);\n  checkTaprootScriptPubkey(outputData, newOutputData);\n}\nexports.checkTaprootOutputFields = checkTaprootOutputFields;\nfunction checkTaprootScriptPubkey(outputData, newOutputData) {\n  if (!newOutputData.tapTree && !newOutputData.tapInternalKey) return;\n  const tapInternalKey =\n    newOutputData.tapInternalKey || outputData.tapInternalKey;\n  const tapTree = newOutputData.tapTree || outputData.tapTree;\n  if (tapInternalKey) {\n    const { script: scriptPubkey } = outputData;\n    const script = getTaprootScripPubkey(tapInternalKey, tapTree);\n    if (scriptPubkey && !scriptPubkey.equals(script))\n      throw new Error('Error adding output. Script or address missmatch.');\n  }\n}\nfunction getTaprootScripPubkey(tapInternalKey, tapTree) {\n  const scriptTree = tapTree && tapTreeFromList(tapTree.leaves);\n  const { output } = (0, payments_1.p2tr)({\n    internalPubkey: tapInternalKey,\n    scriptTree,\n  });\n  return output;\n}\nfunction tweakInternalPubKey(inputIndex, input) {\n  const tapInternalKey = input.tapInternalKey;\n  const outputKey =\n    tapInternalKey &&\n    (0, bip341_1.tweakKey)(tapInternalKey, input.tapMerkleRoot);\n  if (!outputKey)\n    throw new Error(\n      `Cannot tweak tap internal key for input #${inputIndex}. Public key: ${\n        tapInternalKey && tapInternalKey.toString('hex')\n      }`,\n    );\n  return outputKey.x;\n}\nexports.tweakInternalPubKey = tweakInternalPubKey;\n/**\n * Convert a binary tree to a BIP371 type list. Each element of the list is (according to BIP371):\n * One or more tuples representing the depth, leaf version, and script for a leaf in the Taproot tree,\n * allowing the entire tree to be reconstructed. The tuples must be in depth first search order so that\n * the tree is correctly reconstructed.\n * @param tree the binary tap tree\n * @returns a list of BIP 371 tapleaves\n */\nfunction tapTreeToList(tree) {\n  if (!(0, types_1.isTaptree)(tree))\n    throw new Error(\n      'Cannot convert taptree to tapleaf list. Expecting a tapree structure.',\n    );\n  return _tapTreeToList(tree);\n}\nexports.tapTreeToList = tapTreeToList;\n/**\n * Convert a BIP371 TapLeaf list to a TapTree (binary).\n * @param leaves a list of tapleaves where each element of the list is (according to BIP371):\n * One or more tuples representing the depth, leaf version, and script for a leaf in the Taproot tree,\n * allowing the entire tree to be reconstructed. The tuples must be in depth first search order so that\n * the tree is correctly reconstructed.\n * @returns the corresponding taptree, or throws an exception if the tree cannot be reconstructed\n */\nfunction tapTreeFromList(leaves = []) {\n  if (leaves.length === 1 && leaves[0].depth === 0)\n    return {\n      output: leaves[0].script,\n      version: leaves[0].leafVersion,\n    };\n  return instertLeavesInTree(leaves);\n}\nexports.tapTreeFromList = tapTreeFromList;\nfunction checkTaprootInputForSigs(input, action) {\n  const sigs = extractTaprootSigs(input);\n  return sigs.some(sig =>\n    (0, psbtutils_2.signatureBlocksAction)(sig, decodeSchnorrSignature, action),\n  );\n}\nexports.checkTaprootInputForSigs = checkTaprootInputForSigs;\nfunction decodeSchnorrSignature(signature) {\n  return {\n    signature: signature.slice(0, 64),\n    hashType:\n      signature.slice(64)[0] || transaction_1.Transaction.SIGHASH_DEFAULT,\n  };\n}\nfunction extractTaprootSigs(input) {\n  const sigs = [];\n  if (input.tapKeySig) sigs.push(input.tapKeySig);\n  if (input.tapScriptSig)\n    sigs.push(...input.tapScriptSig.map(s => s.signature));\n  if (!sigs.length) {\n    const finalTapKeySig = getTapKeySigFromWithness(input.finalScriptWitness);\n    if (finalTapKeySig) sigs.push(finalTapKeySig);\n  }\n  return sigs;\n}\nfunction getTapKeySigFromWithness(finalScriptWitness) {\n  if (!finalScriptWitness) return;\n  const witness = finalScriptWitness.slice(2);\n  // todo: add schnorr signature validation\n  if (witness.length === 64 || witness.length === 65) return witness;\n}\nfunction _tapTreeToList(tree, leaves = [], depth = 0) {\n  if (depth > bip341_1.MAX_TAPTREE_DEPTH)\n    throw new Error('Max taptree depth exceeded.');\n  if (!tree) return [];\n  if ((0, types_1.isTapleaf)(tree)) {\n    leaves.push({\n      depth,\n      leafVersion: tree.version || bip341_1.LEAF_VERSION_TAPSCRIPT,\n      script: tree.output,\n    });\n    return leaves;\n  }\n  if (tree[0]) _tapTreeToList(tree[0], leaves, depth + 1);\n  if (tree[1]) _tapTreeToList(tree[1], leaves, depth + 1);\n  return leaves;\n}\nfunction instertLeavesInTree(leaves) {\n  let tree;\n  for (const leaf of leaves) {\n    tree = instertLeafInTree(leaf, tree);\n    if (!tree) throw new Error(`No room left to insert tapleaf in tree`);\n  }\n  return tree;\n}\nfunction instertLeafInTree(leaf, tree, depth = 0) {\n  if (depth > bip341_1.MAX_TAPTREE_DEPTH)\n    throw new Error('Max taptree depth exceeded.');\n  if (leaf.depth === depth) {\n    if (!tree)\n      return {\n        output: leaf.script,\n        version: leaf.leafVersion,\n      };\n    return;\n  }\n  if ((0, types_1.isTapleaf)(tree)) return;\n  const leftSide = instertLeafInTree(leaf, tree && tree[0], depth + 1);\n  if (leftSide) return [leftSide, tree && tree[1]];\n  const rightSide = instertLeafInTree(leaf, tree && tree[1], depth + 1);\n  if (rightSide) return [tree && tree[0], rightSide];\n}\nfunction checkMixedTaprootAndNonTaprootInputFields(\n  inputData,\n  newInputData,\n  action,\n) {\n  const isBadTaprootUpdate =\n    isTaprootInput(inputData) && hasNonTaprootFields(newInputData);\n  const isBadNonTaprootUpdate =\n    hasNonTaprootFields(inputData) && isTaprootInput(newInputData);\n  const hasMixedFields =\n    inputData === newInputData &&\n    isTaprootInput(newInputData) &&\n    hasNonTaprootFields(newInputData); // todo: bad? use !===\n  if (isBadTaprootUpdate || isBadNonTaprootUpdate || hasMixedFields)\n    throw new Error(\n      `Invalid arguments for Psbt.${action}. ` +\n        `Cannot use both taproot and non-taproot fields.`,\n    );\n}\nfunction checkMixedTaprootAndNonTaprootOutputFields(\n  inputData,\n  newInputData,\n  action,\n) {\n  const isBadTaprootUpdate =\n    isTaprootOutput(inputData) && hasNonTaprootFields(newInputData);\n  const isBadNonTaprootUpdate =\n    hasNonTaprootFields(inputData) && isTaprootOutput(newInputData);\n  const hasMixedFields =\n    inputData === newInputData &&\n    isTaprootOutput(newInputData) &&\n    hasNonTaprootFields(newInputData);\n  if (isBadTaprootUpdate || isBadNonTaprootUpdate || hasMixedFields)\n    throw new Error(\n      `Invalid arguments for Psbt.${action}. ` +\n        `Cannot use both taproot and non-taproot fields.`,\n    );\n}\nfunction checkIfTapLeafInTree(inputData, newInputData, action) {\n  if (newInputData.tapMerkleRoot) {\n    const newLeafsInTree = (newInputData.tapLeafScript || []).every(l =>\n      isTapLeafInTree(l, newInputData.tapMerkleRoot),\n    );\n    const oldLeafsInTree = (inputData.tapLeafScript || []).every(l =>\n      isTapLeafInTree(l, newInputData.tapMerkleRoot),\n    );\n    if (!newLeafsInTree || !oldLeafsInTree)\n      throw new Error(\n        `Invalid arguments for Psbt.${action}. Tapleaf not part of taptree.`,\n      );\n  } else if (inputData.tapMerkleRoot) {\n    const newLeafsInTree = (newInputData.tapLeafScript || []).every(l =>\n      isTapLeafInTree(l, inputData.tapMerkleRoot),\n    );\n    if (!newLeafsInTree)\n      throw new Error(\n        `Invalid arguments for Psbt.${action}. Tapleaf not part of taptree.`,\n      );\n  }\n}\nfunction isTapLeafInTree(tapLeaf, merkleRoot) {\n  if (!merkleRoot) return true;\n  const leafHash = (0, bip341_1.tapleafHash)({\n    output: tapLeaf.script,\n    version: tapLeaf.leafVersion,\n  });\n  const rootHash = (0, bip341_1.rootHashFromPath)(\n    tapLeaf.controlBlock,\n    leafHash,\n  );\n  return rootHash.equals(merkleRoot);\n}\nfunction sortSignatures(input, tapLeaf) {\n  const leafHash = (0, bip341_1.tapleafHash)({\n    output: tapLeaf.script,\n    version: tapLeaf.leafVersion,\n  });\n  return (input.tapScriptSig || [])\n    .filter(tss => tss.leafHash.equals(leafHash))\n    .map(tss => addPubkeyPositionInScript(tapLeaf.script, tss))\n    .sort((t1, t2) => t2.positionInScript - t1.positionInScript)\n    .map(t => t.signature);\n}\nfunction addPubkeyPositionInScript(script, tss) {\n  return Object.assign(\n    {\n      positionInScript: (0, psbtutils_1.pubkeyPositionInScript)(\n        tss.pubkey,\n        script,\n      ),\n    },\n    tss,\n  );\n}\n/**\n * Find tapleaf by hash, or get the signed tapleaf with the shortest path.\n */\nfunction findTapLeafToFinalize(input, inputIndex, leafHashToFinalize) {\n  if (!input.tapScriptSig || !input.tapScriptSig.length)\n    throw new Error(\n      `Can not finalize taproot input #${inputIndex}. No tapleaf script signature provided.`,\n    );\n  const tapLeaf = (input.tapLeafScript || [])\n    .sort((a, b) => a.controlBlock.length - b.controlBlock.length)\n    .find(leaf =>\n      canFinalizeLeaf(leaf, input.tapScriptSig, leafHashToFinalize),\n    );\n  if (!tapLeaf)\n    throw new Error(\n      `Can not finalize taproot input #${inputIndex}. Signature for tapleaf script not found.`,\n    );\n  return tapLeaf;\n}\nfunction canFinalizeLeaf(leaf, tapScriptSig, hash) {\n  const leafHash = (0, bip341_1.tapleafHash)({\n    output: leaf.script,\n    version: leaf.leafVersion,\n  });\n  const whiteListedHash = !hash || hash.equals(leafHash);\n  return (\n    whiteListedHash &&\n    tapScriptSig.find(tss => tss.leafHash.equals(leafHash)) !== undefined\n  );\n}\nfunction hasNonTaprootFields(io) {\n  return (\n    io &&\n    !!(\n      io.redeemScript ||\n      io.witnessScript ||\n      (io.bip32Derivation && io.bip32Derivation.length)\n    )\n  );\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","isTaprootInput","input","tapInternalKey","tapMerkleRoot","tapLeafScript","length","tapBip32Derivation","witnessUtxo","psbtutils_1","isP2TR","script","isTaprootOutput","output","tapTree","tapTreeFromList","leaves","depth","version","leafVersion","tree","leaf","instertLeafInTree","Error","decodeSchnorrSignature","signature","slice","hashType","transaction_1","Transaction","SIGHASH_DEFAULT","extractTaprootSigs","sigs","tapKeySig","push","tapScriptSig","map","s","finalTapKeySig","getTapKeySigFromWithness","finalScriptWitness","witness","_tapTreeToList","bip341_1","MAX_TAPTREE_DEPTH","types_1","isTapleaf","LEAF_VERSION_TAPSCRIPT","leftSide","rightSide","checkIfTapLeafInTree","inputData","newInputData","action","newLeafsInTree","every","l","isTapLeafInTree","oldLeafsInTree","tapLeaf","merkleRoot","leafHash","tapleafHash","rootHash","rootHashFromPath","controlBlock","equals","sortSignatures","filter","tss","Object","assign","positionInScript","pubkeyPositionInScript","pubkey","sort","t1","t2","t","findTapLeafToFinalize","inputIndex","leafHashToFinalize","a","b","find","canFinalizeLeaf","hash","undefined","hasNonTaprootFields","io","redeemScript","witnessScript","bip32Derivation","Buffer","defineProperty","value","checkTaprootInputForSigs","tapTreeToList","tweakInternalPubKey","checkTaprootOutputFields","checkTaprootInputFields","serializeTaprootSignature","tapScriptFinalizer","toXOnly","payments_1","psbtutils_2","pubKey","tapLeafHashToFinalize","concat","witnessStackToScriptWitness","err","sig","sighashType","sighashTypeByte","from","isBadTaprootUpdate","isBadNonTaprootUpdate","hasMixedFields","outputData","newOutputData","scriptPubkey","scriptTree","p2tr","internalPubkey","outputKey","tweakKey","toString","x","isTaptree","some","signatureBlocksAction"]
}
