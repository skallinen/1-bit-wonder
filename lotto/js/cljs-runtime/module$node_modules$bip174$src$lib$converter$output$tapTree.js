shadow$provide.module$node_modules$bip174$src$lib$converter$output$tapTree=function(global,require,module,exports){var Buffer=require("module$node_modules$buffer$index").Buffer;"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const typeFields_1=require("module$node_modules$bip174$src$lib$typeFields"),varuint=require("module$node_modules$bip174$src$lib$converter$varint");exports.decode=function(keyVal){if(keyVal.key[0]!==typeFields_1.OutputTypes.TAP_TREE||1!==keyVal.key.length)throw Error("Decode Error: could not decode tapTree with key 0x"+
keyVal.key.toString("hex"));let _offset=0;const data=[];for(;_offset<keyVal.value.length;){const depth=keyVal.value[_offset++],leafVersion=keyVal.value[_offset++],scriptLen=varuint.decode(keyVal.value,_offset);_offset+=varuint.encodingLength(scriptLen);data.push({depth,leafVersion,script:keyVal.value.slice(_offset,_offset+scriptLen)});_offset+=scriptLen}return{leaves:data}};exports.encode=function(tree){const key=Buffer.from([typeFields_1.OutputTypes.TAP_TREE]);tree=[].concat(...tree.leaves.map(tapLeaf=>
[Buffer.of(tapLeaf.depth,tapLeaf.leafVersion),varuint.encode(tapLeaf.script.length),tapLeaf.script]));return{key,value:Buffer.concat(tree)}};exports.expected="{ leaves: [{ depth: number; leafVersion: number, script: Buffer; }] }";exports.check=function(data){return Array.isArray(data.leaves)&&data.leaves.every(tapLeaf=>0<=tapLeaf.depth&&128>=tapLeaf.depth&&(tapLeaf.leafVersion&254)===tapLeaf.leafVersion&&Buffer.isBuffer(tapLeaf.script))};exports.canAdd=function(currentData,newData){return!!currentData&&
!!newData&&void 0===currentData.tapTree}}
//# sourceMappingURL=module$node_modules$bip174$src$lib$converter$output$tapTree.js.map
