{
"version":3,
"file":"module$node_modules$bitcoinjs_lib$src$bufferutils.js",
"lineCount":8,
"mappings":"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",
"sources":["node_modules/bitcoinjs-lib/src/bufferutils.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$bitcoinjs_lib$src$bufferutils\"] = function(global,require,module,exports) {\nvar Buffer = require('buffer').Buffer;\n'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nexports.BufferReader =\n  exports.BufferWriter =\n  exports.cloneBuffer =\n  exports.reverseBuffer =\n  exports.writeUInt64LE =\n  exports.readUInt64LE =\n  exports.varuint =\n    void 0;\nconst types = require('./types');\nconst { typeforce } = types;\nconst varuint = require('varuint-bitcoin');\nexports.varuint = varuint;\n// https://github.com/feross/buffer/blob/master/index.js#L1127\nfunction verifuint(value, max) {\n  if (typeof value !== 'number')\n    throw new Error('cannot write a non-number as a number');\n  if (value < 0)\n    throw new Error('specified a negative value for writing an unsigned value');\n  if (value > max) throw new Error('RangeError: value out of range');\n  if (Math.floor(value) !== value)\n    throw new Error('value has a fractional component');\n}\nfunction readUInt64LE(buffer, offset) {\n  const a = buffer.readUInt32LE(offset);\n  let b = buffer.readUInt32LE(offset + 4);\n  b *= 0x100000000;\n  verifuint(b + a, 0x001fffffffffffff);\n  return b + a;\n}\nexports.readUInt64LE = readUInt64LE;\nfunction writeUInt64LE(buffer, value, offset) {\n  verifuint(value, 0x001fffffffffffff);\n  buffer.writeInt32LE(value & -1, offset);\n  buffer.writeUInt32LE(Math.floor(value / 0x100000000), offset + 4);\n  return offset + 8;\n}\nexports.writeUInt64LE = writeUInt64LE;\nfunction reverseBuffer(buffer) {\n  if (buffer.length < 1) return buffer;\n  let j = buffer.length - 1;\n  let tmp = 0;\n  for (let i = 0; i < buffer.length / 2; i++) {\n    tmp = buffer[i];\n    buffer[i] = buffer[j];\n    buffer[j] = tmp;\n    j--;\n  }\n  return buffer;\n}\nexports.reverseBuffer = reverseBuffer;\nfunction cloneBuffer(buffer) {\n  const clone = Buffer.allocUnsafe(buffer.length);\n  buffer.copy(clone);\n  return clone;\n}\nexports.cloneBuffer = cloneBuffer;\n/**\n * Helper class for serialization of bitcoin data types into a pre-allocated buffer.\n */\nclass BufferWriter {\n  static withCapacity(size) {\n    return new BufferWriter(Buffer.alloc(size));\n  }\n  constructor(buffer, offset = 0) {\n    this.buffer = buffer;\n    this.offset = offset;\n    typeforce(types.tuple(types.Buffer, types.UInt32), [buffer, offset]);\n  }\n  writeUInt8(i) {\n    this.offset = this.buffer.writeUInt8(i, this.offset);\n  }\n  writeInt32(i) {\n    this.offset = this.buffer.writeInt32LE(i, this.offset);\n  }\n  writeUInt32(i) {\n    this.offset = this.buffer.writeUInt32LE(i, this.offset);\n  }\n  writeUInt64(i) {\n    this.offset = writeUInt64LE(this.buffer, i, this.offset);\n  }\n  writeVarInt(i) {\n    varuint.encode(i, this.buffer, this.offset);\n    this.offset += varuint.encode.bytes;\n  }\n  writeSlice(slice) {\n    if (this.buffer.length < this.offset + slice.length) {\n      throw new Error('Cannot write slice out of bounds');\n    }\n    this.offset += slice.copy(this.buffer, this.offset);\n  }\n  writeVarSlice(slice) {\n    this.writeVarInt(slice.length);\n    this.writeSlice(slice);\n  }\n  writeVector(vector) {\n    this.writeVarInt(vector.length);\n    vector.forEach(buf => this.writeVarSlice(buf));\n  }\n  end() {\n    if (this.buffer.length === this.offset) {\n      return this.buffer;\n    }\n    throw new Error(`buffer size ${this.buffer.length}, offset ${this.offset}`);\n  }\n}\nexports.BufferWriter = BufferWriter;\n/**\n * Helper class for reading of bitcoin data types from a buffer.\n */\nclass BufferReader {\n  constructor(buffer, offset = 0) {\n    this.buffer = buffer;\n    this.offset = offset;\n    typeforce(types.tuple(types.Buffer, types.UInt32), [buffer, offset]);\n  }\n  readUInt8() {\n    const result = this.buffer.readUInt8(this.offset);\n    this.offset++;\n    return result;\n  }\n  readInt32() {\n    const result = this.buffer.readInt32LE(this.offset);\n    this.offset += 4;\n    return result;\n  }\n  readUInt32() {\n    const result = this.buffer.readUInt32LE(this.offset);\n    this.offset += 4;\n    return result;\n  }\n  readUInt64() {\n    const result = readUInt64LE(this.buffer, this.offset);\n    this.offset += 8;\n    return result;\n  }\n  readVarInt() {\n    const vi = varuint.decode(this.buffer, this.offset);\n    this.offset += varuint.decode.bytes;\n    return vi;\n  }\n  readSlice(n) {\n    if (this.buffer.length < this.offset + n) {\n      throw new Error('Cannot read slice out of bounds');\n    }\n    const result = this.buffer.slice(this.offset, this.offset + n);\n    this.offset += n;\n    return result;\n  }\n  readVarSlice() {\n    return this.readSlice(this.readVarInt());\n  }\n  readVector() {\n    const count = this.readVarInt();\n    const vector = [];\n    for (let i = 0; i < count; i++) vector.push(this.readVarSlice());\n    return vector;\n  }\n}\nexports.BufferReader = BufferReader;\n\n};"],
"names":["shadow$provide","global","require","module","exports","verifuint","value","max","Error","Math","floor","readUInt64LE","buffer","offset","a","readUInt32LE","b","writeUInt64LE","writeInt32LE","writeUInt32LE","Buffer","Object","defineProperty","BufferReader","BufferWriter","cloneBuffer","reverseBuffer","varuint","types","typeforce","length","j","tmp","i","clone","allocUnsafe","copy","withCapacity","size","alloc","constructor","tuple","UInt32","writeUInt8","writeInt32","writeUInt32","writeUInt64","writeVarInt","encode","bytes","writeSlice","slice","writeVarSlice","writeVector","vector","forEach","buf","end","readUInt8","result","readInt32","readInt32LE","readUInt32","readUInt64","readVarInt","vi","decode","readSlice","n","readVarSlice","readVector","count","push"]
}
