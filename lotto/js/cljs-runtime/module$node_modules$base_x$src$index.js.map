{
"version":3,
"file":"module$node_modules$base_x$src$index.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/base-x/src/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$base_x$src$index\"] = function(global,require,module,exports) {\n'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n\n};"],
"names":["shadow$provide","global","require","module","exports","_Buffer","Buffer","base","ALPHABET","decodeUnsafe","source","TypeError","length","alloc","psz","zeroes","LEADER","size","FACTOR","b256","Uint8Array","carry","BASE_MAP","charCodeAt","i","it3","BASE","Error","it4","vch","allocUnsafe","fill","j","x","charAt","xc","Math","log","iFACTOR","encode","Array","isArray","from","isBuffer","pbegin","pend","b58","it1","it2","str","repeat","decode","string","buffer"]
}
