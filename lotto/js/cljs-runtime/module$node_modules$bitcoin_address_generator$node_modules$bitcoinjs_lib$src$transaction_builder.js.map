{
"version":3,
"file":"module$node_modules$bitcoin_address_generator$node_modules$bitcoinjs_lib$src$transaction_builder.js",
"lineCount":34,
"mappings":"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",
"sources":["node_modules/bitcoin-address-generator/node_modules/bitcoinjs-lib/src/transaction_builder.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$bitcoin_address_generator$node_modules$bitcoinjs_lib$src$transaction_builder\"] = function(global,require,module,exports) {\nconst Buffer = require('safe-buffer').Buffer\nconst baddress = require('./address')\nconst bcrypto = require('./crypto')\nconst bscript = require('./script')\nconst networks = require('./networks')\nconst ops = require('bitcoin-ops')\nconst payments = require('./payments')\nconst typeforce = require('typeforce')\nconst types = require('./types')\nconst classify = require('./classify')\nconst SCRIPT_TYPES = classify.types\n\nconst ECPair = require('./ecpair')\nconst Transaction = require('./transaction')\n\nfunction expandInput (scriptSig, witnessStack, type, scriptPubKey) {\n  if (scriptSig.length === 0 && witnessStack.length === 0) return {}\n  if (!type) {\n    let ssType = classify.input(scriptSig, true)\n    let wsType = classify.witness(witnessStack, true)\n    if (ssType === SCRIPT_TYPES.NONSTANDARD) ssType = undefined\n    if (wsType === SCRIPT_TYPES.NONSTANDARD) wsType = undefined\n    type = ssType || wsType\n  }\n\n  switch (type) {\n    case SCRIPT_TYPES.P2WPKH: {\n      const { output, pubkey, signature } = payments.p2wpkh({ witness: witnessStack })\n\n      return {\n        prevOutScript: output,\n        prevOutType: SCRIPT_TYPES.P2WPKH,\n        pubkeys: [pubkey],\n        signatures: [signature]\n      }\n    }\n\n    case SCRIPT_TYPES.P2PKH: {\n      const { output, pubkey, signature } = payments.p2pkh({ input: scriptSig })\n\n      return {\n        prevOutScript: output,\n        prevOutType: SCRIPT_TYPES.P2PKH,\n        pubkeys: [pubkey],\n        signatures: [signature]\n      }\n    }\n\n    case SCRIPT_TYPES.P2PK: {\n      const { signature } = payments.p2pk({ input: scriptSig })\n\n      return {\n        prevOutType: SCRIPT_TYPES.P2PK,\n        pubkeys: [undefined],\n        signatures: [signature]\n      }\n    }\n\n    case SCRIPT_TYPES.P2MS: {\n      const { m, pubkeys, signatures } = payments.p2ms({\n        input: scriptSig,\n        output: scriptPubKey\n      }, { allowIncomplete: true })\n\n      return {\n        prevOutType: SCRIPT_TYPES.P2MS,\n        pubkeys: pubkeys,\n        signatures: signatures,\n        maxSignatures: m\n      }\n    }\n  }\n\n  if (type === SCRIPT_TYPES.P2SH) {\n    const { output, redeem } = payments.p2sh({\n      input: scriptSig,\n      witness: witnessStack\n    })\n\n    const outputType = classify.output(redeem.output)\n    const expanded = expandInput(redeem.input, redeem.witness, outputType, redeem.output)\n    if (!expanded.prevOutType) return {}\n\n    return {\n      prevOutScript: output,\n      prevOutType: SCRIPT_TYPES.P2SH,\n      redeemScript: redeem.output,\n      redeemScriptType: expanded.prevOutType,\n      witnessScript: expanded.witnessScript,\n      witnessScriptType: expanded.witnessScriptType,\n\n      pubkeys: expanded.pubkeys,\n      signatures: expanded.signatures\n    }\n  }\n\n  if (type === SCRIPT_TYPES.P2WSH) {\n    const { output, redeem } = payments.p2wsh({\n      input: scriptSig,\n      witness: witnessStack\n    })\n    const outputType = classify.output(redeem.output)\n    let expanded\n    if (outputType === SCRIPT_TYPES.P2WPKH) {\n      expanded = expandInput(redeem.input, redeem.witness, outputType)\n    } else {\n      expanded = expandInput(bscript.compile(redeem.witness), [], outputType, redeem.output)\n    }\n    if (!expanded.prevOutType) return {}\n\n    return {\n      prevOutScript: output,\n      prevOutType: SCRIPT_TYPES.P2WSH,\n      witnessScript: redeem.output,\n      witnessScriptType: expanded.prevOutType,\n\n      pubkeys: expanded.pubkeys,\n      signatures: expanded.signatures\n    }\n  }\n\n  return {\n    prevOutType: SCRIPT_TYPES.NONSTANDARD,\n    prevOutScript: scriptSig\n  }\n}\n\n// could be done in expandInput, but requires the original Transaction for hashForSignature\nfunction fixMultisigOrder (input, transaction, vin) {\n  if (input.redeemScriptType !== SCRIPT_TYPES.P2MS || !input.redeemScript) return\n  if (input.pubkeys.length === input.signatures.length) return\n\n  const unmatched = input.signatures.concat()\n\n  input.signatures = input.pubkeys.map(function (pubKey) {\n    const keyPair = ECPair.fromPublicKey(pubKey)\n    let match\n\n    // check for a signature\n    unmatched.some(function (signature, i) {\n      // skip if undefined || OP_0\n      if (!signature) return false\n\n      // TODO: avoid O(n) hashForSignature\n      const parsed = bscript.signature.decode(signature)\n      const hash = transaction.hashForSignature(vin, input.redeemScript, parsed.hashType)\n\n      // skip if signature does not match pubKey\n      if (!keyPair.verify(hash, parsed.signature)) return false\n\n      // remove matched signature from unmatched\n      unmatched[i] = undefined\n      match = signature\n\n      return true\n    })\n\n    return match\n  })\n}\n\nfunction expandOutput (script, ourPubKey) {\n  typeforce(types.Buffer, script)\n  const type = classify.output(script)\n\n  switch (type) {\n    case SCRIPT_TYPES.P2PKH: {\n      if (!ourPubKey) return { type }\n\n      // does our hash160(pubKey) match the output scripts?\n      const pkh1 = payments.p2pkh({ output: script }).hash\n      const pkh2 = bcrypto.hash160(ourPubKey)\n      if (!pkh1.equals(pkh2)) return { type }\n\n      return {\n        type,\n        pubkeys: [ourPubKey],\n        signatures: [undefined]\n      }\n    }\n\n    case SCRIPT_TYPES.P2WPKH: {\n      if (!ourPubKey) return { type }\n\n      // does our hash160(pubKey) match the output scripts?\n      const wpkh1 = payments.p2wpkh({ output: script }).hash\n      const wpkh2 = bcrypto.hash160(ourPubKey)\n      if (!wpkh1.equals(wpkh2)) return { type }\n\n      return {\n        type,\n        pubkeys: [ourPubKey],\n        signatures: [undefined]\n      }\n    }\n\n    case SCRIPT_TYPES.P2PK: {\n      const p2pk = payments.p2pk({ output: script })\n      return {\n        type,\n        pubkeys: [p2pk.pubkey],\n        signatures: [undefined]\n      }\n    }\n\n    case SCRIPT_TYPES.P2MS: {\n      const p2ms = payments.p2ms({ output: script })\n      return {\n        type,\n        pubkeys: p2ms.pubkeys,\n        signatures: p2ms.pubkeys.map(() => undefined),\n        maxSignatures: p2ms.m\n      }\n    }\n  }\n\n  return { type }\n}\n\nfunction prepareInput (input, ourPubKey, redeemScript, witnessScript) {\n  if (redeemScript && witnessScript) {\n    const p2wsh = payments.p2wsh({ redeem: { output: witnessScript } })\n    const p2wshAlt = payments.p2wsh({ output: redeemScript })\n    const p2sh = payments.p2sh({ redeem: { output: redeemScript } })\n    const p2shAlt = payments.p2sh({ redeem: p2wsh })\n\n    // enforces P2SH(P2WSH(...))\n    if (!p2wsh.hash.equals(p2wshAlt.hash)) throw new Error('Witness script inconsistent with prevOutScript')\n    if (!p2sh.hash.equals(p2shAlt.hash)) throw new Error('Redeem script inconsistent with prevOutScript')\n\n    const expanded = expandOutput(p2wsh.redeem.output, ourPubKey)\n    if (!expanded.pubkeys) throw new Error(expanded.type + ' not supported as witnessScript (' + bscript.toASM(witnessScript) + ')')\n    if (input.signatures && input.signatures.some(x => x)) {\n      expanded.signatures = input.signatures\n    }\n\n    let signScript = witnessScript\n    if (expanded.type === SCRIPT_TYPES.P2WPKH) throw new Error('P2SH(P2WSH(P2WPKH)) is a consensus failure')\n\n    return {\n      redeemScript,\n      redeemScriptType: SCRIPT_TYPES.P2WSH,\n\n      witnessScript,\n      witnessScriptType: expanded.type,\n\n      prevOutType: SCRIPT_TYPES.P2SH,\n      prevOutScript: p2sh.output,\n\n      hasWitness: true,\n      signScript,\n      signType: expanded.type,\n\n      pubkeys: expanded.pubkeys,\n      signatures: expanded.signatures,\n      maxSignatures: expanded.maxSignatures\n    }\n  }\n\n  if (redeemScript) {\n    const p2sh = payments.p2sh({ redeem: { output: redeemScript } })\n\n    if (input.prevOutScript) {\n      let p2shAlt\n      try {\n        p2shAlt = payments.p2sh({ output: input.prevOutScript })\n      } catch (e) { throw new Error('PrevOutScript must be P2SH') }\n      if (!p2sh.hash.equals(p2shAlt.hash)) throw new Error('Redeem script inconsistent with prevOutScript')\n    }\n\n    const expanded = expandOutput(p2sh.redeem.output, ourPubKey)\n    if (!expanded.pubkeys) throw new Error(expanded.type + ' not supported as redeemScript (' + bscript.toASM(redeemScript) + ')')\n    if (input.signatures && input.signatures.some(x => x)) {\n      expanded.signatures = input.signatures\n    }\n\n    let signScript = redeemScript\n    if (expanded.type === SCRIPT_TYPES.P2WPKH) {\n      signScript = payments.p2pkh({ pubkey: expanded.pubkeys[0] }).output\n    }\n\n    return {\n      redeemScript,\n      redeemScriptType: expanded.type,\n\n      prevOutType: SCRIPT_TYPES.P2SH,\n      prevOutScript: p2sh.output,\n\n      hasWitness: expanded.type === SCRIPT_TYPES.P2WPKH,\n      signScript,\n      signType: expanded.type,\n\n      pubkeys: expanded.pubkeys,\n      signatures: expanded.signatures,\n      maxSignatures: expanded.maxSignatures\n    }\n  }\n\n  if (witnessScript) {\n    const p2wsh = payments.p2wsh({ redeem: { output: witnessScript } })\n\n    if (input.prevOutScript) {\n      const p2wshAlt = payments.p2wsh({ output: input.prevOutScript })\n      if (!p2wsh.hash.equals(p2wshAlt.hash)) throw new Error('Witness script inconsistent with prevOutScript')\n    }\n\n    const expanded = expandOutput(p2wsh.redeem.output, ourPubKey)\n    if (!expanded.pubkeys) throw new Error(expanded.type + ' not supported as witnessScript (' + bscript.toASM(witnessScript) + ')')\n    if (input.signatures && input.signatures.some(x => x)) {\n      expanded.signatures = input.signatures\n    }\n\n    let signScript = witnessScript\n    if (expanded.type === SCRIPT_TYPES.P2WPKH) throw new Error('P2WSH(P2WPKH) is a consensus failure')\n\n    return {\n      witnessScript,\n      witnessScriptType: expanded.type,\n\n      prevOutType: SCRIPT_TYPES.P2WSH,\n      prevOutScript: p2wsh.output,\n\n      hasWitness: true,\n      signScript,\n      signType: expanded.type,\n\n      pubkeys: expanded.pubkeys,\n      signatures: expanded.signatures,\n      maxSignatures: expanded.maxSignatures\n    }\n  }\n\n  if (input.prevOutType && input.prevOutScript) {\n    // embedded scripts are not possible without extra information\n    if (input.prevOutType === SCRIPT_TYPES.P2SH) throw new Error('PrevOutScript is ' + input.prevOutType + ', requires redeemScript')\n    if (input.prevOutType === SCRIPT_TYPES.P2WSH) throw new Error('PrevOutScript is ' + input.prevOutType + ', requires witnessScript')\n    if (!input.prevOutScript) throw new Error('PrevOutScript is missing')\n\n    const expanded = expandOutput(input.prevOutScript, ourPubKey)\n    if (!expanded.pubkeys) throw new Error(expanded.type + ' not supported (' + bscript.toASM(input.prevOutScript) + ')')\n    if (input.signatures && input.signatures.some(x => x)) {\n      expanded.signatures = input.signatures\n    }\n\n    let signScript = input.prevOutScript\n    if (expanded.type === SCRIPT_TYPES.P2WPKH) {\n      signScript = payments.p2pkh({ pubkey: expanded.pubkeys[0] }).output\n    }\n\n    return {\n      prevOutType: expanded.type,\n      prevOutScript: input.prevOutScript,\n\n      hasWitness: expanded.type === SCRIPT_TYPES.P2WPKH,\n      signScript,\n      signType: expanded.type,\n\n      pubkeys: expanded.pubkeys,\n      signatures: expanded.signatures,\n      maxSignatures: expanded.maxSignatures\n    }\n  }\n\n  const prevOutScript = payments.p2pkh({ pubkey: ourPubKey }).output\n  return {\n    prevOutType: SCRIPT_TYPES.P2PKH,\n    prevOutScript: prevOutScript,\n\n    hasWitness: false,\n    signScript: prevOutScript,\n    signType: SCRIPT_TYPES.P2PKH,\n\n    pubkeys: [ourPubKey],\n    signatures: [undefined]\n  }\n}\n\nfunction build (type, input, allowIncomplete) {\n  const pubkeys = input.pubkeys || []\n  let signatures = input.signatures || []\n\n  switch (type) {\n    case SCRIPT_TYPES.P2PKH: {\n      if (pubkeys.length === 0) break\n      if (signatures.length === 0) break\n\n      return payments.p2pkh({ pubkey: pubkeys[0], signature: signatures[0] })\n    }\n    case SCRIPT_TYPES.P2WPKH: {\n      if (pubkeys.length === 0) break\n      if (signatures.length === 0) break\n\n      return payments.p2wpkh({ pubkey: pubkeys[0], signature: signatures[0] })\n    }\n    case SCRIPT_TYPES.P2PK: {\n      if (pubkeys.length === 0) break\n      if (signatures.length === 0) break\n\n      return payments.p2pk({ signature: signatures[0] })\n    }\n    case SCRIPT_TYPES.P2MS: {\n      const m = input.maxSignatures\n      if (allowIncomplete) {\n        signatures = signatures.map(x => x || ops.OP_0)\n      } else {\n        signatures = signatures.filter(x => x)\n      }\n\n      // if the transaction is not not complete (complete), or if signatures.length === m, validate\n      // otherwise, the number of OP_0's may be >= m, so don't validate (boo)\n      const validate = !allowIncomplete || (m === signatures.length)\n      return payments.p2ms({ m, pubkeys, signatures }, { allowIncomplete, validate })\n    }\n    case SCRIPT_TYPES.P2SH: {\n      const redeem = build(input.redeemScriptType, input, allowIncomplete)\n      if (!redeem) return\n\n      return payments.p2sh({\n        redeem: {\n          output: redeem.output || input.redeemScript,\n          input: redeem.input,\n          witness: redeem.witness\n        }\n      })\n    }\n    case SCRIPT_TYPES.P2WSH: {\n      const redeem = build(input.witnessScriptType, input, allowIncomplete)\n      if (!redeem) return\n\n      return payments.p2wsh({\n        redeem: {\n          output: input.witnessScript,\n          input: redeem.input,\n          witness: redeem.witness\n        }\n      })\n    }\n  }\n}\n\nfunction TransactionBuilder (network, maximumFeeRate) {\n  this.__prevTxSet = {}\n  this.network = network || networks.bitcoin\n\n  // WARNING: This is __NOT__ to be relied on, its just another potential safety mechanism (safety in-depth)\n  this.maximumFeeRate = maximumFeeRate || 2500\n\n  this.__inputs = []\n  this.__tx = new Transaction()\n  this.__tx.version = 2\n}\n\nTransactionBuilder.prototype.setLockTime = function (locktime) {\n  typeforce(types.UInt32, locktime)\n\n  // if any signatures exist, throw\n  if (this.__inputs.some(function (input) {\n    if (!input.signatures) return false\n\n    return input.signatures.some(function (s) { return s })\n  })) {\n    throw new Error('No, this would invalidate signatures')\n  }\n\n  this.__tx.locktime = locktime\n}\n\nTransactionBuilder.prototype.setVersion = function (version) {\n  typeforce(types.UInt32, version)\n\n  // XXX: this might eventually become more complex depending on what the versions represent\n  this.__tx.version = version\n}\n\nTransactionBuilder.fromTransaction = function (transaction, network) {\n  const txb = new TransactionBuilder(network)\n\n  // Copy transaction fields\n  txb.setVersion(transaction.version)\n  txb.setLockTime(transaction.locktime)\n\n  // Copy outputs (done first to avoid signature invalidation)\n  transaction.outs.forEach(function (txOut) {\n    txb.addOutput(txOut.script, txOut.value)\n  })\n\n  // Copy inputs\n  transaction.ins.forEach(function (txIn) {\n    txb.__addInputUnsafe(txIn.hash, txIn.index, {\n      sequence: txIn.sequence,\n      script: txIn.script,\n      witness: txIn.witness\n    })\n  })\n\n  // fix some things not possible through the public API\n  txb.__inputs.forEach(function (input, i) {\n    fixMultisigOrder(input, transaction, i)\n  })\n\n  return txb\n}\n\nTransactionBuilder.prototype.addInput = function (txHash, vout, sequence, prevOutScript) {\n  if (!this.__canModifyInputs()) {\n    throw new Error('No, this would invalidate signatures')\n  }\n\n  let value\n\n  // is it a hex string?\n  if (typeof txHash === 'string') {\n    // transaction hashs's are displayed in reverse order, un-reverse it\n    txHash = Buffer.from(txHash, 'hex').reverse()\n\n  // is it a Transaction object?\n  } else if (txHash instanceof Transaction) {\n    const txOut = txHash.outs[vout]\n    prevOutScript = txOut.script\n    value = txOut.value\n\n    txHash = txHash.getHash()\n  }\n\n  return this.__addInputUnsafe(txHash, vout, {\n    sequence: sequence,\n    prevOutScript: prevOutScript,\n    value: value\n  })\n}\n\nTransactionBuilder.prototype.__addInputUnsafe = function (txHash, vout, options) {\n  if (Transaction.isCoinbaseHash(txHash)) {\n    throw new Error('coinbase inputs not supported')\n  }\n\n  const prevTxOut = txHash.toString('hex') + ':' + vout\n  if (this.__prevTxSet[prevTxOut] !== undefined) throw new Error('Duplicate TxOut: ' + prevTxOut)\n\n  let input = {}\n\n  // derive what we can from the scriptSig\n  if (options.script !== undefined) {\n    input = expandInput(options.script, options.witness || [])\n  }\n\n  // if an input value was given, retain it\n  if (options.value !== undefined) {\n    input.value = options.value\n  }\n\n  // derive what we can from the previous transactions output script\n  if (!input.prevOutScript && options.prevOutScript) {\n    let prevOutType\n\n    if (!input.pubkeys && !input.signatures) {\n      const expanded = expandOutput(options.prevOutScript)\n      if (expanded.pubkeys) {\n        input.pubkeys = expanded.pubkeys\n        input.signatures = expanded.signatures\n      }\n\n      prevOutType = expanded.type\n    }\n\n    input.prevOutScript = options.prevOutScript\n    input.prevOutType = prevOutType || classify.output(options.prevOutScript)\n  }\n\n  const vin = this.__tx.addInput(txHash, vout, options.sequence, options.scriptSig)\n  this.__inputs[vin] = input\n  this.__prevTxSet[prevTxOut] = true\n  return vin\n}\n\nTransactionBuilder.prototype.addOutput = function (scriptPubKey, value) {\n  if (!this.__canModifyOutputs()) {\n    throw new Error('No, this would invalidate signatures')\n  }\n\n  // Attempt to get a script if it's a base58 or bech32 address string\n  if (typeof scriptPubKey === 'string') {\n    scriptPubKey = baddress.toOutputScript(scriptPubKey, this.network)\n  }\n\n  return this.__tx.addOutput(scriptPubKey, value)\n}\n\nTransactionBuilder.prototype.build = function () {\n  return this.__build(false)\n}\nTransactionBuilder.prototype.buildIncomplete = function () {\n  return this.__build(true)\n}\n\nTransactionBuilder.prototype.__build = function (allowIncomplete) {\n  if (!allowIncomplete) {\n    if (!this.__tx.ins.length) throw new Error('Transaction has no inputs')\n    if (!this.__tx.outs.length) throw new Error('Transaction has no outputs')\n  }\n\n  const tx = this.__tx.clone()\n\n  // create script signatures from inputs\n  this.__inputs.forEach(function (input, i) {\n    if (!input.prevOutType && !allowIncomplete) throw new Error('Transaction is not complete')\n\n    const result = build(input.prevOutType, input, allowIncomplete)\n    if (!result) {\n      if (!allowIncomplete && input.prevOutType === SCRIPT_TYPES.NONSTANDARD) throw new Error('Unknown input type')\n      if (!allowIncomplete) throw new Error('Not enough information')\n      return\n    }\n\n    tx.setInputScript(i, result.input)\n    tx.setWitness(i, result.witness)\n  })\n\n  if (!allowIncomplete) {\n    // do not rely on this, its merely a last resort\n    if (this.__overMaximumFees(tx.virtualSize())) {\n      throw new Error('Transaction has absurd fees')\n    }\n  }\n\n  return tx\n}\n\nfunction canSign (input) {\n  return input.signScript !== undefined &&\n    input.signType !== undefined &&\n    input.pubkeys !== undefined &&\n    input.signatures !== undefined &&\n    input.signatures.length === input.pubkeys.length &&\n    input.pubkeys.length > 0 &&\n    (\n      input.hasWitness === false ||\n      input.value !== undefined\n    )\n}\n\nTransactionBuilder.prototype.sign = function (vin, keyPair, redeemScript, hashType, witnessValue, witnessScript) {\n  // TODO: remove keyPair.network matching in 4.0.0\n  if (keyPair.network && keyPair.network !== this.network) throw new TypeError('Inconsistent network')\n  if (!this.__inputs[vin]) throw new Error('No input at index: ' + vin)\n\n  hashType = hashType || Transaction.SIGHASH_ALL\n  if (this.__needsOutputs(hashType)) throw new Error('Transaction needs outputs')\n\n  const input = this.__inputs[vin]\n\n  // if redeemScript was previously provided, enforce consistency\n  if (input.redeemScript !== undefined &&\n      redeemScript &&\n      !input.redeemScript.equals(redeemScript)) {\n    throw new Error('Inconsistent redeemScript')\n  }\n\n  const ourPubKey = keyPair.publicKey || keyPair.getPublicKey()\n  if (!canSign(input)) {\n    if (witnessValue !== undefined) {\n      if (input.value !== undefined && input.value !== witnessValue) throw new Error('Input didn\\'t match witnessValue')\n      typeforce(types.Satoshi, witnessValue)\n      input.value = witnessValue\n    }\n\n    if (!canSign(input)) {\n      const prepared = prepareInput(input, ourPubKey, redeemScript, witnessScript)\n\n      // updates inline\n      Object.assign(input, prepared)\n    }\n\n    if (!canSign(input)) throw Error(input.prevOutType + ' not supported')\n  }\n\n  // ready to sign\n  let signatureHash\n  if (input.hasWitness) {\n    signatureHash = this.__tx.hashForWitnessV0(vin, input.signScript, input.value, hashType)\n  } else {\n    signatureHash = this.__tx.hashForSignature(vin, input.signScript, hashType)\n  }\n\n  // enforce in order signing of public keys\n  const signed = input.pubkeys.some(function (pubKey, i) {\n    if (!ourPubKey.equals(pubKey)) return false\n    if (input.signatures[i]) throw new Error('Signature already exists')\n\n    // TODO: add tests\n    if (ourPubKey.length !== 33 && input.hasWitness) {\n      throw new Error('BIP143 rejects uncompressed public keys in P2WPKH or P2WSH')\n    }\n\n    const signature = keyPair.sign(signatureHash)\n    input.signatures[i] = bscript.signature.encode(signature, hashType)\n    return true\n  })\n\n  if (!signed) throw new Error('Key pair cannot sign for this input')\n}\n\nfunction signatureHashType (buffer) {\n  return buffer.readUInt8(buffer.length - 1)\n}\n\nTransactionBuilder.prototype.__canModifyInputs = function () {\n  return this.__inputs.every(function (input) {\n    if (!input.signatures) return true\n\n    return input.signatures.every(function (signature) {\n      if (!signature) return true\n      const hashType = signatureHashType(signature)\n\n      // if SIGHASH_ANYONECANPAY is set, signatures would not\n      // be invalidated by more inputs\n      return hashType & Transaction.SIGHASH_ANYONECANPAY\n    })\n  })\n}\n\nTransactionBuilder.prototype.__needsOutputs = function (signingHashType) {\n  if (signingHashType === Transaction.SIGHASH_ALL) {\n    return this.__tx.outs.length === 0\n  }\n\n  // if inputs are being signed with SIGHASH_NONE, we don't strictly need outputs\n  // .build() will fail, but .buildIncomplete() is OK\n  return (this.__tx.outs.length === 0) && this.__inputs.some((input) => {\n    if (!input.signatures) return false\n\n    return input.signatures.some((signature) => {\n      if (!signature) return false // no signature, no issue\n      const hashType = signatureHashType(signature)\n      if (hashType & Transaction.SIGHASH_NONE) return false // SIGHASH_NONE doesn't care about outputs\n      return true // SIGHASH_* does care\n    })\n  })\n}\n\nTransactionBuilder.prototype.__canModifyOutputs = function () {\n  const nInputs = this.__tx.ins.length\n  const nOutputs = this.__tx.outs.length\n\n  return this.__inputs.every(function (input) {\n    if (input.signatures === undefined) return true\n\n    return input.signatures.every(function (signature) {\n      if (!signature) return true\n      const hashType = signatureHashType(signature)\n\n      const hashTypeMod = hashType & 0x1f\n      if (hashTypeMod === Transaction.SIGHASH_NONE) return true\n      if (hashTypeMod === Transaction.SIGHASH_SINGLE) {\n        // if SIGHASH_SINGLE is set, and nInputs > nOutputs\n        // some signatures would be invalidated by the addition\n        // of more outputs\n        return nInputs <= nOutputs\n      }\n    })\n  })\n}\n\nTransactionBuilder.prototype.__overMaximumFees = function (bytes) {\n  // not all inputs will have .value defined\n  const incoming = this.__inputs.reduce(function (a, x) { return a + (x.value >>> 0) }, 0)\n\n  // but all outputs do, and if we have any input value\n  // we can immediately determine if the outputs are too small\n  const outgoing = this.__tx.outs.reduce(function (a, x) { return a + x.value }, 0)\n  const fee = incoming - outgoing\n  const feeRate = fee / bytes\n\n  return feeRate > this.maximumFeeRate\n}\n\nmodule.exports = TransactionBuilder\n\n};"],
"names":["shadow$provide","global","require","module","exports","expandInput","scriptSig","witnessStack","type","scriptPubKey","length","ssType","classify","input","wsType","witness","SCRIPT_TYPES","NONSTANDARD","undefined","P2WPKH","output","pubkey","signature","payments","p2wpkh","prevOutScript","prevOutType","pubkeys","signatures","P2PKH","p2pkh","P2PK","p2pk","P2MS","m","p2ms","allowIncomplete","maxSignatures","P2SH","redeem","p2sh","outputType","expanded","redeemScript","redeemScriptType","witnessScript","witnessScriptType","P2WSH","p2wsh","bscript","compile","fixMultisigOrder","transaction","vin","unmatched","concat","map","pubKey","keyPair","ECPair","fromPublicKey","match","some","i","parsed","decode","hash","hashForSignature","hashType","verify","expandOutput","script","ourPubKey","typeforce","types","Buffer","pkh1","pkh2","bcrypto","hash160","equals","wpkh1","wpkh2","prepareInput","p2wshAlt","p2shAlt","Error","toASM","x","hasWitness","signScript","signType","e","build","ops","OP_0","filter","validate","TransactionBuilder","network","maximumFeeRate","__prevTxSet","networks","bitcoin","__inputs","__tx","Transaction","version","canSign","value","baddress","prototype","setLockTime","TransactionBuilder.prototype.setLockTime","locktime","UInt32","s","setVersion","TransactionBuilder.prototype.setVersion","fromTransaction","TransactionBuilder.fromTransaction","txb","outs","forEach","txOut","addOutput","ins","txIn","__addInputUnsafe","index","sequence","addInput","TransactionBuilder.prototype.addInput","txHash","vout","__canModifyInputs","from","reverse","getHash","TransactionBuilder.prototype.__addInputUnsafe","options","isCoinbaseHash","prevTxOut","toString","TransactionBuilder.prototype.addOutput","__canModifyOutputs","toOutputScript","TransactionBuilder.prototype.build","__build","buildIncomplete","TransactionBuilder.prototype.buildIncomplete","TransactionBuilder.prototype.__build","tx","clone","result","setInputScript","setWitness","__overMaximumFees","virtualSize","sign","TransactionBuilder.prototype.sign","witnessValue","TypeError","SIGHASH_ALL","__needsOutputs","publicKey","getPublicKey","Satoshi","prepared","Object","assign","signatureHash","hashForWitnessV0","signed","encode","TransactionBuilder.prototype.__canModifyInputs","every","readUInt8","SIGHASH_ANYONECANPAY","TransactionBuilder.prototype.__needsOutputs","signingHashType","SIGHASH_NONE","TransactionBuilder.prototype.__canModifyOutputs","nInputs","nOutputs","hashTypeMod","SIGHASH_SINGLE","TransactionBuilder.prototype.__overMaximumFees","bytes","incoming","reduce","a","outgoing"]
}
