{
"version":3,
"file":"module$node_modules$bitcoin_address_generator$node_modules$bitcoinjs_lib$src$address.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/bitcoin-address-generator/node_modules/bitcoinjs-lib/src/address.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$bitcoin_address_generator$node_modules$bitcoinjs_lib$src$address\"] = function(global,require,module,exports) {\nconst Buffer = require('safe-buffer').Buffer\nconst bech32 = require('bech32')\nconst bs58check = require('bs58check')\nconst bscript = require('./script')\nconst networks = require('./networks')\nconst typeforce = require('typeforce')\nconst types = require('./types')\nconst payments = require('./payments')\n\nfunction fromBase58Check (address) {\n  const payload = bs58check.decode(address)\n\n  // TODO: 4.0.0, move to \"toOutputScript\"\n  if (payload.length < 21) throw new TypeError(address + ' is too short')\n  if (payload.length > 21) throw new TypeError(address + ' is too long')\n\n  const version = payload.readUInt8(0)\n  const hash = payload.slice(1)\n\n  return { version: version, hash: hash }\n}\n\nfunction fromBech32 (address) {\n  const result = bech32.decode(address)\n  const data = bech32.fromWords(result.words.slice(1))\n\n  return {\n    version: result.words[0],\n    prefix: result.prefix,\n    data: Buffer.from(data)\n  }\n}\n\nfunction toBase58Check (hash, version) {\n  typeforce(types.tuple(types.Hash160bit, types.UInt8), arguments)\n\n  const payload = Buffer.allocUnsafe(21)\n  payload.writeUInt8(version, 0)\n  hash.copy(payload, 1)\n\n  return bs58check.encode(payload)\n}\n\nfunction toBech32 (data, version, prefix) {\n  const words = bech32.toWords(data)\n  words.unshift(version)\n\n  return bech32.encode(prefix, words)\n}\n\nfunction fromOutputScript (output, network) {\n  network = network || networks.bitcoin\n\n  try { return payments.p2pkh({ output, network }).address } catch (e) {}\n  try { return payments.p2sh({ output, network }).address } catch (e) {}\n  try { return payments.p2wpkh({ output, network }).address } catch (e) {}\n  try { return payments.p2wsh({ output, network }).address } catch (e) {}\n\n  throw new Error(bscript.toASM(output) + ' has no matching Address')\n}\n\nfunction toOutputScript (address, network) {\n  network = network || networks.bitcoin\n\n  let decode\n  try {\n    decode = fromBase58Check(address)\n  } catch (e) {}\n\n  if (decode) {\n    if (decode.version === network.pubKeyHash) return payments.p2pkh({ hash: decode.hash }).output\n    if (decode.version === network.scriptHash) return payments.p2sh({ hash: decode.hash }).output\n  } else {\n    try {\n      decode = fromBech32(address)\n    } catch (e) {}\n\n    if (decode) {\n      if (decode.prefix !== network.bech32) throw new Error(address + ' has an invalid prefix')\n      if (decode.version === 0) {\n        if (decode.data.length === 20) return payments.p2wpkh({ hash: decode.data }).output\n        if (decode.data.length === 32) return payments.p2wsh({ hash: decode.data }).output\n      }\n    }\n  }\n\n  throw new Error(address + ' has no matching Script')\n}\n\nmodule.exports = {\n  fromBase58Check: fromBase58Check,\n  fromBech32: fromBech32,\n  fromOutputScript: fromOutputScript,\n  toBase58Check: toBase58Check,\n  toBech32: toBech32,\n  toOutputScript: toOutputScript\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","fromBase58Check","address","payload","bs58check","decode","length","TypeError","version","readUInt8","hash","slice","fromBech32","result","bech32","data","fromWords","words","prefix","Buffer","from","bscript","networks","typeforce","types","payments","fromOutputScript","output","network","bitcoin","p2pkh","e","p2sh","p2wpkh","p2wsh","Error","toASM","toBase58Check","tuple","Hash160bit","UInt8","arguments","allocUnsafe","writeUInt8","copy","encode","toBech32","toWords","unshift","toOutputScript","pubKeyHash","scriptHash"]
}
