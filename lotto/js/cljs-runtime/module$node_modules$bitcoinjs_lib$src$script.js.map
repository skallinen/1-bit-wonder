{
"version":3,
"file":"module$node_modules$bitcoinjs_lib$src$script.js",
"lineCount":8,
"mappings":"AAAAA,cAAA,CAAA,4CAAA,CAAiE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAuCzGC,QAASA,gBAAe,CAACC,KAAD,CAAQ,CACvB,IAAA,eAAA,EAAA,eAAA,CAAA,KAAA,CAAA,MAAA,CAAA,KAAA,CAAA,IARP,eAQO,CAPLC,KAAMC,CAAAA,MAAN,CAO4BF,KAP5B,CAOK,GAAuBA,KAAvB,GANMG,KAAMC,CAAAA,GAAIC,CAAAA,IAMhB,EAAuBL,KAAvB,EALOG,KAAMC,CAAAA,GAAIE,CAAAA,IAKjB,EAAuBN,KAAvB,EALkCG,KAAMC,CAAAA,GAAIG,CAAAA,KAK5C,EAAuBP,KAAvB,GAJOG,KAAMC,CAAAA,GAAII,CAAAA,UAIjB,EAAP,OAAO,gBADuB,CAGhCC,QAASA,WAAU,CAACT,KAAD,CAAQ,CACzB,MAAOC,MAAMS,CAAAA,KAAN,CAAYV,KAAZ,CAAP,EAA6BA,KAAMW,CAAAA,KAAN,CAAYZ,eAAZ,CADJ,CAI3Ba,QAASA,YAAW,CAACC,MAAD,CAAS,CAC3B,GAAsB,CAAtB,GAAIA,MAAOC,CAAAA,MAAX,CAAyB,MAAOX,MAAMC,CAAAA,GAAIC,CAAAA,IAC1C;GAAsB,CAAtB,GAAIQ,MAAOC,CAAAA,MAAX,CAAA,CACA,GAAiB,CAAjB,EAAID,MAAA,CAAO,CAAP,CAAJ,EAAmC,EAAnC,EAAsBA,MAAA,CAAO,CAAP,CAAtB,CAAuC,MAAOE,YAAP,CAAqBF,MAAA,CAAO,CAAP,CAC5D,IAAkB,GAAlB,GAAIA,MAAA,CAAO,CAAP,CAAJ,CAAwB,MAAOV,MAAMC,CAAAA,GAAII,CAAAA,UAFzC,CAF2B,CAe7BQ,QAASA,QAAO,CAACC,MAAD,CAAS,CAEvB,GAVOC,MAAOC,CAAAA,QAAP,CAUYF,MAVZ,CAUP,CAA4B,MAAOA,OACnCG,UAAA,CAAUnB,KAAMS,CAAAA,KAAhB,CAAuBO,MAAvB,CACA,OAAMI,WAAaJ,MAAOK,CAAAA,MAAP,CAAc,CAACC,KAAD,CAAQC,KAAR,CAAA,EAN1BN,MAAOC,CAAAA,QAAP,CAQmBK,KARnB,CAQL,CAEuB,CAArB,GAAIA,KAAMV,CAAAA,MAAV,EAAiDW,IAAAA,EAAjD,GAA0Bb,WAAA,CAAYY,KAAZ,CAA1B,CACSD,KADT,CACiB,CADjB,CAGOA,KAHP,CAGeG,QAASC,CAAAA,cAAT,CAAwBH,KAAMV,CAAAA,MAA9B,CAHf,CAGuDU,KAAMV,CAAAA,MAL/D,CAQOS,KARP,CAQe,CAVE,CAWhB,CAXgB,CAAnB,CAYMV,OAASK,MAAOU,CAAAA,WAAP,CAAmBP,UAAnB,CACf,KAAIQ,OAAS,CACbZ,OAAOa,CAAAA,OAAP,CAAeN,KAAA,EAAS,CAEtB,GAtBKN,MAAOC,CAAAA,QAAP,CAsBmBK,KAtBnB,CAsBL,CAAgC,CAE9B,MAAMO;AAASnB,WAAA,CAAYY,KAAZ,CACAC,KAAAA,EAAf,GAAIM,MAAJ,EACElB,MAAOmB,CAAAA,UAAP,CAAkBD,MAAlB,CAA0BF,MAA1B,CACA,CAAAA,MAAA,EAAU,CAFZ,GAKAA,MAEA,EAFUH,QAASO,CAAAA,MAAT,CAAgBpB,MAAhB,CAAwBW,KAAMV,CAAAA,MAA9B,CAAsCe,MAAtC,CAEV,CADAL,KAAMU,CAAAA,IAAN,CAAWrB,MAAX,CAAmBgB,MAAnB,CACA,CAAAA,MAAA,EAAUL,KAAMV,CAAAA,MAPhB,CAH8B,CAAhC,IAaED,OAAOmB,CAAAA,UAAP,CAAkBR,KAAlB,CAAyBK,MAAzB,CACA,CAAAA,MAAA,EAAU,CAhBU,CAAxB,CAmBA,IAAIA,MAAJ,GAAehB,MAAOC,CAAAA,MAAtB,CAA8B,KAAUqB,MAAJ,CAAU,yBAAV,CAAN,CAC9B,MAAOtB,OAtCgB,CAyCzBuB,QAASA,UAAS,CAACvB,MAAD,CAAS,CAEzB,GAhDOZ,KAAMS,CAAAA,KAAN,CAgDWG,MAhDX,CAgDP,CAA2B,MAAOA,OAClCO,UAAA,CAAUnB,KAAMiB,CAAAA,MAAhB,CAAwBL,MAAxB,CACA,OAAMI,OAAS,EACf,KAAIoB,EAAI,CACR,KAAA,CAAOA,CAAP,CAAWxB,MAAOC,CAAAA,MAAlB,CAAA,CAA0B,CACxB,IAAMiB,OAASlB,MAAA,CAAOwB,CAAP,CAEf,IAAIN,MAAJ,CAAa5B,KAAMC,CAAAA,GAAIC,CAAAA,IAAvB,EAA+B0B,MAA/B;AAAyC5B,KAAMC,CAAAA,GAAIkC,CAAAA,YAAnD,CAAiE,CAC/D,IAAMC,EAAIb,QAASc,CAAAA,MAAT,CAAgB3B,MAAhB,CAAwBwB,CAAxB,CAEV,IAAU,IAAV,GAAIE,CAAJ,CAAgB,MAAO,KACvBF,EAAA,EAAKE,CAAEE,CAAAA,IAEP,IAAIJ,CAAJ,CAAQE,CAAEG,CAAAA,MAAV,CAAmB7B,MAAOC,CAAAA,MAA1B,CAAkC,MAAO,KACnC6B,OAAAA,CAAO9B,MAAO+B,CAAAA,KAAP,CAAaP,CAAb,CAAgBA,CAAhB,CAAoBE,CAAEG,CAAAA,MAAtB,CACbL,EAAA,EAAKE,CAAEG,CAAAA,MAEDG,EAAAA,CAAKjC,WAAA,CAAY+B,MAAZ,CACAlB,KAAAA,EAAX,GAAIoB,CAAJ,CACE5B,MAAO6B,CAAAA,IAAP,CAAYD,CAAZ,CADF,CAGE5B,MAAO6B,CAAAA,IAAP,CAAYH,MAAZ,CAd6D,CAAjE,IAkBE1B,OAAO6B,CAAAA,IAAP,CAAYf,MAAZ,CACA,CAAAM,CAAA,EAAK,CAtBiB,CAyB1B,MAAOpB,OA/BkB,CA+E3B8B,QAASA,kBAAiB,CAACC,QAAD,CAAW,CACfA,QAAdC,EAA0B,CAAA,GAEhC,OAAqB,EAArB,CAAOA,QAAP,EAA2C,CAA3C,CAA6BA,QAHM,CApLrC,IAAI/B,OAAStB,OAAA,CAAQ,kCAAR,CAAkBsB,CAAAA,MAC/B,aACAgC,OAAOC,CAAAA,cAAP,CAAsBrD,OAAtB,CAA+B,YAA/B,CAA6C,CAAEE,MAAO,CAAA,CAAT,CAA7C,CACAF,QAAQsD,CAAAA,SAAR;AACEtD,OAAQ4C,CAAAA,MADV,CAEE5C,OAAQuD,CAAAA,0BAFV,CAGEvD,OAAQiD,CAAAA,iBAHV,CAIEjD,OAAQwD,CAAAA,iBAJV,CAKExD,OAAQyD,CAAAA,OALV,CAMEzD,OAAQ0D,CAAAA,OANV,CAOE1D,OAAQ2D,CAAAA,KAPV,CAQE3D,OAAQsC,CAAAA,SARV,CASEtC,OAAQkB,CAAAA,OATV,CAUElB,OAAQW,CAAAA,UAVV,CAWEX,OAAQM,CAAAA,GAXV,CAYI,IAAK,EACT,OAAMsD,MAAQ9D,OAAA,CAAQ,6CAAR,CAAd,CACMO,MAAQP,OAAA,CAAQ,2CAAR,CACdsD,OAAOC,CAAAA,cAAP,CAAsBrD,OAAtB,CAA+B,KAA/B,CAAsC,CACpC6D,WAAY,CAAA,CADwB,CAEpCC,IAAKA,QAAS,EAAG,CACf,MAAOzD,MAAMC,CAAAA,GADE,CAFmB,CAAtC,CAMA,OAAMsB,SAAW9B,OAAA,CAAQ,iDAAR,CAAjB;AACMiE,aAAejE,OAAA,CAAQ,qDAAR,CACfkE,OAAAA,CAAkBlE,OAAA,CAAQ,wDAAR,CACxB,OAAMK,MAAQL,OAAA,CAAQ,6CAAR,CAAd,CACM,CAAEwB,SAAF,CAAA,CAAgBnB,KADtB,CAEMc,YAAcZ,KAAMC,CAAAA,GAAI2D,CAAAA,WAe9BjE,QAAQW,CAAAA,UAAR,CAAqBA,UAwDrBX,QAAQkB,CAAAA,OAAR,CAAkBA,OAkClBlB,QAAQsC,CAAAA,SAAR,CAAoBA,SAkBpBtC,QAAQ2D,CAAAA,KAAR,CAjBAA,QAAc,CAACxC,MAAD,CAAS,CAnFdC,MAAOC,CAAAA,QAAP,CAoFYF,MApFZ,CAoFP,GACEA,MADF,CACWmB,SAAA,CAAUnB,MAAV,CADX,CAGA,OAAOA,OACJ+C,CAAAA,GADI,CACAxC,KAAA,EAAS,CAEZ,GApFGN,MAAOC,CAAAA,QAAP,CAoFqBK,KApFrB,CAoFH,CAAgC,CAC9B,MAAMqB,GAAKjC,WAAA,CAAYY,KAAZ,CACX;GAAWC,IAAAA,EAAX,GAAIoB,EAAJ,CAAsB,MAAOrB,MAAMyC,CAAAA,QAAN,CAAe,KAAf,CAC7BzC,MAAA,CAAQqB,EAHsB,CAMhC,MAAO1C,MAAM+D,CAAAA,WAAN,CAAkB1C,KAAlB,CARK,CADT,CAWJ2C,CAAAA,IAXI,CAWC,GAXD,CAJc,CA8BvBrE,QAAQ0D,CAAAA,OAAR,CAZAA,QAAgB,CAACY,GAAD,CAAM,CACpBhD,SAAA,CAAUnB,KAAMoE,CAAAA,MAAhB,CAAwBD,GAAxB,CACA,OAAOpD,QAAA,CACLoD,GAAIE,CAAAA,KAAJ,CAAU,GAAV,CAAeN,CAAAA,GAAf,CAAmBO,QAAA,EAAY,CAE7B,GAA4B9C,IAAAA,EAA5B,GAAItB,KAAMC,CAAAA,GAAN,CAAUmE,QAAV,CAAJ,CAAuC,MAAOpE,MAAMC,CAAAA,GAAN,CAAUmE,QAAV,CAC9CnD,UAAA,CAAUnB,KAAMuE,CAAAA,GAAhB,CAAqBD,QAArB,CAEA,OAAOrD,OAAOuD,CAAAA,IAAP,CAAYF,QAAZ,CAAsB,KAAtB,CALsB,CAA/B,CADK,CAFa,CAsBtBzE,QAAQyD,CAAAA,OAAR,CATAA,QAAgB,CAACtC,MAAD,CAAS,CACvBA,MAAA,CAASmB,SAAA,CAAUnB,MAAV,CACTG,UAAA,CAAUX,UAAV,CAAsBQ,MAAtB,CACA,OAAOA,OAAO+C,CAAAA,GAAP,CAAWnB,EAAA,EA/GX3B,MAAOC,CAAAA,QAAP,CAgHmB0B,EAhHnB,CAgHL,CAAoCA,EAApC,CACIA,EAAJ,GAAW1C,KAAMC,CAAAA,GAAIC,CAAAA,IAArB,CAAkCa,MAAOU,CAAAA,WAAP,CAAmB,CAAnB,CAAlC;AACOiC,YAAa5B,CAAAA,MAAb,CAAoBY,EAApB,CAAyB9B,WAAzB,CAHF,CAHgB,CAazBjB,QAAQwD,CAAAA,iBAAR,CAHAA,QAA0B,CAACzC,MAAD,CAAS,CACjC,MAAOZ,MAAMyE,CAAAA,OAAN,CAAc7D,MAAd,CAD0B,CASnCf,QAAQiD,CAAAA,iBAAR,CAA4BA,iBAM5BjD,QAAQuD,CAAAA,0BAAR,CALAA,QAAmC,CAACxC,MAAD,CAAS,CAE1C,MADKK,OAAOC,CAAAA,QAAP,CAAgBN,MAAhB,CACL,EAAKkC,iBAAA,CAAkBlC,MAAA,CAAOA,MAAOC,CAAAA,MAAd,CAAuB,CAAvB,CAAlB,CAAL,CACO4C,KAAMiB,CAAAA,KAAN,CAAY9D,MAAO+B,CAAAA,KAAP,CAAa,CAAb,CAAgB,CAAC,CAAjB,CAAZ,CADP,CAA0D,CAAA,CAFhB,CAM5C9C,QAAQ4C,CAAAA,MAAR,CAAiBmB,YACjB/D,QAAQsD,CAAAA,SAAR,CAAoBU,MAlMqF;",
"sources":["node_modules/bitcoinjs-lib/src/script.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$bitcoinjs_lib$src$script\"] = function(global,require,module,exports) {\nvar Buffer = require('buffer').Buffer;\n'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nexports.signature =\n  exports.number =\n  exports.isCanonicalScriptSignature =\n  exports.isDefinedHashType =\n  exports.isCanonicalPubKey =\n  exports.toStack =\n  exports.fromASM =\n  exports.toASM =\n  exports.decompile =\n  exports.compile =\n  exports.isPushOnly =\n  exports.OPS =\n    void 0;\nconst bip66 = require('./bip66');\nconst ops_1 = require('./ops');\nObject.defineProperty(exports, 'OPS', {\n  enumerable: true,\n  get: function () {\n    return ops_1.OPS;\n  },\n});\nconst pushdata = require('./push_data');\nconst scriptNumber = require('./script_number');\nconst scriptSignature = require('./script_signature');\nconst types = require('./types');\nconst { typeforce } = types;\nconst OP_INT_BASE = ops_1.OPS.OP_RESERVED; // OP_1 - 1\nfunction isOPInt(value) {\n  return (\n    types.Number(value) &&\n    (value === ops_1.OPS.OP_0 ||\n      (value >= ops_1.OPS.OP_1 && value <= ops_1.OPS.OP_16) ||\n      value === ops_1.OPS.OP_1NEGATE)\n  );\n}\nfunction isPushOnlyChunk(value) {\n  return types.Buffer(value) || isOPInt(value);\n}\nfunction isPushOnly(value) {\n  return types.Array(value) && value.every(isPushOnlyChunk);\n}\nexports.isPushOnly = isPushOnly;\nfunction asMinimalOP(buffer) {\n  if (buffer.length === 0) return ops_1.OPS.OP_0;\n  if (buffer.length !== 1) return;\n  if (buffer[0] >= 1 && buffer[0] <= 16) return OP_INT_BASE + buffer[0];\n  if (buffer[0] === 0x81) return ops_1.OPS.OP_1NEGATE;\n}\nfunction chunksIsBuffer(buf) {\n  return Buffer.isBuffer(buf);\n}\nfunction chunksIsArray(buf) {\n  return types.Array(buf);\n}\nfunction singleChunkIsBuffer(buf) {\n  return Buffer.isBuffer(buf);\n}\nfunction compile(chunks) {\n  // TODO: remove me\n  if (chunksIsBuffer(chunks)) return chunks;\n  typeforce(types.Array, chunks);\n  const bufferSize = chunks.reduce((accum, chunk) => {\n    // data chunk\n    if (singleChunkIsBuffer(chunk)) {\n      // adhere to BIP62.3, minimal push policy\n      if (chunk.length === 1 && asMinimalOP(chunk) !== undefined) {\n        return accum + 1;\n      }\n      return accum + pushdata.encodingLength(chunk.length) + chunk.length;\n    }\n    // opcode\n    return accum + 1;\n  }, 0.0);\n  const buffer = Buffer.allocUnsafe(bufferSize);\n  let offset = 0;\n  chunks.forEach(chunk => {\n    // data chunk\n    if (singleChunkIsBuffer(chunk)) {\n      // adhere to BIP62.3, minimal push policy\n      const opcode = asMinimalOP(chunk);\n      if (opcode !== undefined) {\n        buffer.writeUInt8(opcode, offset);\n        offset += 1;\n        return;\n      }\n      offset += pushdata.encode(buffer, chunk.length, offset);\n      chunk.copy(buffer, offset);\n      offset += chunk.length;\n      // opcode\n    } else {\n      buffer.writeUInt8(chunk, offset);\n      offset += 1;\n    }\n  });\n  if (offset !== buffer.length) throw new Error('Could not decode chunks');\n  return buffer;\n}\nexports.compile = compile;\nfunction decompile(buffer) {\n  // TODO: remove me\n  if (chunksIsArray(buffer)) return buffer;\n  typeforce(types.Buffer, buffer);\n  const chunks = [];\n  let i = 0;\n  while (i < buffer.length) {\n    const opcode = buffer[i];\n    // data chunk\n    if (opcode > ops_1.OPS.OP_0 && opcode <= ops_1.OPS.OP_PUSHDATA4) {\n      const d = pushdata.decode(buffer, i);\n      // did reading a pushDataInt fail?\n      if (d === null) return null;\n      i += d.size;\n      // attempt to read too much data?\n      if (i + d.number > buffer.length) return null;\n      const data = buffer.slice(i, i + d.number);\n      i += d.number;\n      // decompile minimally\n      const op = asMinimalOP(data);\n      if (op !== undefined) {\n        chunks.push(op);\n      } else {\n        chunks.push(data);\n      }\n      // opcode\n    } else {\n      chunks.push(opcode);\n      i += 1;\n    }\n  }\n  return chunks;\n}\nexports.decompile = decompile;\nfunction toASM(chunks) {\n  if (chunksIsBuffer(chunks)) {\n    chunks = decompile(chunks);\n  }\n  return chunks\n    .map(chunk => {\n      // data?\n      if (singleChunkIsBuffer(chunk)) {\n        const op = asMinimalOP(chunk);\n        if (op === undefined) return chunk.toString('hex');\n        chunk = op;\n      }\n      // opcode!\n      return ops_1.REVERSE_OPS[chunk];\n    })\n    .join(' ');\n}\nexports.toASM = toASM;\nfunction fromASM(asm) {\n  typeforce(types.String, asm);\n  return compile(\n    asm.split(' ').map(chunkStr => {\n      // opcode?\n      if (ops_1.OPS[chunkStr] !== undefined) return ops_1.OPS[chunkStr];\n      typeforce(types.Hex, chunkStr);\n      // data!\n      return Buffer.from(chunkStr, 'hex');\n    }),\n  );\n}\nexports.fromASM = fromASM;\nfunction toStack(chunks) {\n  chunks = decompile(chunks);\n  typeforce(isPushOnly, chunks);\n  return chunks.map(op => {\n    if (singleChunkIsBuffer(op)) return op;\n    if (op === ops_1.OPS.OP_0) return Buffer.allocUnsafe(0);\n    return scriptNumber.encode(op - OP_INT_BASE);\n  });\n}\nexports.toStack = toStack;\nfunction isCanonicalPubKey(buffer) {\n  return types.isPoint(buffer);\n}\nexports.isCanonicalPubKey = isCanonicalPubKey;\nfunction isDefinedHashType(hashType) {\n  const hashTypeMod = hashType & ~0x80;\n  // return hashTypeMod > SIGHASH_ALL && hashTypeMod < SIGHASH_SINGLE\n  return hashTypeMod > 0x00 && hashTypeMod < 0x04;\n}\nexports.isDefinedHashType = isDefinedHashType;\nfunction isCanonicalScriptSignature(buffer) {\n  if (!Buffer.isBuffer(buffer)) return false;\n  if (!isDefinedHashType(buffer[buffer.length - 1])) return false;\n  return bip66.check(buffer.slice(0, -1));\n}\nexports.isCanonicalScriptSignature = isCanonicalScriptSignature;\nexports.number = scriptNumber;\nexports.signature = scriptSignature;\n\n};"],
"names":["shadow$provide","global","require","module","exports","isPushOnlyChunk","value","types","Number","ops_1","OPS","OP_0","OP_1","OP_16","OP_1NEGATE","isPushOnly","Array","every","asMinimalOP","buffer","length","OP_INT_BASE","compile","chunks","Buffer","isBuffer","typeforce","bufferSize","reduce","accum","chunk","undefined","pushdata","encodingLength","allocUnsafe","offset","forEach","opcode","writeUInt8","encode","copy","Error","decompile","i","OP_PUSHDATA4","d","decode","size","number","data","slice","op","push","isDefinedHashType","hashType","hashTypeMod","Object","defineProperty","signature","isCanonicalScriptSignature","isCanonicalPubKey","toStack","fromASM","toASM","bip66","enumerable","get","scriptNumber","scriptSignature","OP_RESERVED","map","toString","REVERSE_OPS","join","asm","String","split","chunkStr","Hex","from","isPoint","check"]
}
