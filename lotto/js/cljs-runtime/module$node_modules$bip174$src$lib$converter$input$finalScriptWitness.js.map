{
"version":3,
"file":"module$node_modules$bip174$src$lib$converter$input$finalScriptWitness.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,qEAAA,CAA0F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAClI,IAAIC,OAASH,OAAA,CAAQ,kCAAR,CAAkBG,CAAAA,MAC/B,aACAC,OAAOC,CAAAA,cAAP,CAAsBH,OAAtB,CAA+B,YAA/B,CAA6C,CAAEI,MAAO,CAAA,CAAT,CAA7C,CACA,OAAMC,aAAeP,OAAA,CAAQ,+CAAR,CAUrBE,QAAQM,CAAAA,MAAR,CATAA,QAAe,CAACC,MAAD,CAAS,CACtB,GAAIA,MAAOC,CAAAA,GAAP,CAAW,CAAX,CAAJ,GAAsBH,YAAaI,CAAAA,UAAWC,CAAAA,mBAA9C,CACE,KAAUC,MAAJ,CACJ,+DADI;AAEFJ,MAAOC,CAAAA,GAAII,CAAAA,QAAX,CAAoB,KAApB,CAFE,CAAN,CAKF,MAAOL,OAAOH,CAAAA,KAPQ,CAiBxBJ,QAAQa,CAAAA,MAAR,CAPAA,QAAe,CAACC,IAAD,CAAO,CAEpB,MAAO,CACLN,IAFUP,MAAOc,CAAAA,IAAPP,CAAY,CAACH,YAAaI,CAAAA,UAAWC,CAAAA,mBAAzB,CAAZF,CACL,CAELJ,MAAOU,IAFF,CAFa,CAQtBd,QAAQgB,CAAAA,QAAR,CAAmB,QAInBhB,QAAQiB,CAAAA,KAAR,CAHAA,QAAc,CAACH,IAAD,CAAO,CACnB,MAAOb,OAAOiB,CAAAA,QAAP,CAAgBJ,IAAhB,CADY,CASrBd,QAAQmB,CAAAA,MAAR,CALAA,QAAe,CAACC,WAAD,CAAcC,OAAd,CAAuB,CACpC,MACE,CAAC,CAACD,WADJ,EACmB,CAAC,CAACC,OADrB,EACmEC,IAAAA,EADnE,GACgCF,WAAYG,CAAAA,kBAFR,CA5B4F;",
"sources":["node_modules/bip174/src/lib/converter/input/finalScriptWitness.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$bip174$src$lib$converter$input$finalScriptWitness\"] = function(global,require,module,exports) {\nvar Buffer = require('buffer').Buffer;\n'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nconst typeFields_1 = require('../../typeFields');\nfunction decode(keyVal) {\n  if (keyVal.key[0] !== typeFields_1.InputTypes.FINAL_SCRIPTWITNESS) {\n    throw new Error(\n      'Decode Error: could not decode finalScriptWitness with key 0x' +\n        keyVal.key.toString('hex'),\n    );\n  }\n  return keyVal.value;\n}\nexports.decode = decode;\nfunction encode(data) {\n  const key = Buffer.from([typeFields_1.InputTypes.FINAL_SCRIPTWITNESS]);\n  return {\n    key,\n    value: data,\n  };\n}\nexports.encode = encode;\nexports.expected = 'Buffer';\nfunction check(data) {\n  return Buffer.isBuffer(data);\n}\nexports.check = check;\nfunction canAdd(currentData, newData) {\n  return (\n    !!currentData && !!newData && currentData.finalScriptWitness === undefined\n  );\n}\nexports.canAdd = canAdd;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Buffer","Object","defineProperty","value","typeFields_1","decode","keyVal","key","InputTypes","FINAL_SCRIPTWITNESS","Error","toString","encode","data","from","expected","check","isBuffer","canAdd","currentData","newData","undefined","finalScriptWitness"]
}
