{
"version":3,
"file":"module$node_modules$bip174$src$lib$converter$input$sighashType.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,8DAAA,CAAmF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAC3H,IAAIC,OAASH,OAAA,CAAQ,kCAAR,CAAkBG,CAAAA,MAC/B,aACAC,OAAOC,CAAAA,cAAP,CAAsBH,OAAtB,CAA+B,YAA/B,CAA6C,CAAEI,MAAO,CAAA,CAAT,CAA7C,CACA,OAAMC,aAAeP,OAAA,CAAQ,+CAAR,CAUrBE,QAAQM,CAAAA,MAAR,CATAA,QAAe,CAACC,MAAD,CAAS,CACtB,GAAIA,MAAOC,CAAAA,GAAP,CAAW,CAAX,CAAJ,GAAsBH,YAAaI,CAAAA,UAAWC,CAAAA,YAA9C,CACE,KAAUC,MAAJ,CACJ,wDADI,CAEFJ,MAAOC,CAAAA,GAAII,CAAAA,QAAX,CAAoB,KAApB,CAFE,CAAN;AAKF,MAAOL,OAAOH,CAAAA,KAAMS,CAAAA,YAAb,CAA0B,CAA1B,CAPe,CAmBxBb,QAAQc,CAAAA,MAAR,CATAA,QAAe,CAACC,IAAD,CAAO,CACpB,MAAMP,IAAMP,MAAOe,CAAAA,IAAP,CAAY,CAACX,YAAaI,CAAAA,UAAWC,CAAAA,YAAzB,CAAZ,CAAZ,CACMN,MAAQH,MAAOgB,CAAAA,WAAP,CAAmB,CAAnB,CACdb,MAAMc,CAAAA,aAAN,CAAoBH,IAApB,CAA0B,CAA1B,CACA,OAAO,CACLP,GADK,CAELJ,KAFK,CAJa,CAUtBJ,QAAQmB,CAAAA,QAAR,CAAmB,QAInBnB,QAAQoB,CAAAA,KAAR,CAHAA,QAAc,CAACL,IAAD,CAAO,CACnB,MAAuB,QAAvB,GAAO,MAAOA,KADK,CAOrBf,QAAQqB,CAAAA,MAAR,CAHAA,QAAe,CAACC,WAAD,CAAcC,OAAd,CAAuB,CACpC,MAAO,CAAC,CAACD,WAAT,EAAwB,CAAC,CAACC,OAA1B,EAAiEC,IAAAA,EAAjE,GAAqCF,WAAYG,CAAAA,WADb,CA9BqF;",
"sources":["node_modules/bip174/src/lib/converter/input/sighashType.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$bip174$src$lib$converter$input$sighashType\"] = function(global,require,module,exports) {\nvar Buffer = require('buffer').Buffer;\n'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nconst typeFields_1 = require('../../typeFields');\nfunction decode(keyVal) {\n  if (keyVal.key[0] !== typeFields_1.InputTypes.SIGHASH_TYPE) {\n    throw new Error(\n      'Decode Error: could not decode sighashType with key 0x' +\n        keyVal.key.toString('hex'),\n    );\n  }\n  return keyVal.value.readUInt32LE(0);\n}\nexports.decode = decode;\nfunction encode(data) {\n  const key = Buffer.from([typeFields_1.InputTypes.SIGHASH_TYPE]);\n  const value = Buffer.allocUnsafe(4);\n  value.writeUInt32LE(data, 0);\n  return {\n    key,\n    value,\n  };\n}\nexports.encode = encode;\nexports.expected = 'number';\nfunction check(data) {\n  return typeof data === 'number';\n}\nexports.check = check;\nfunction canAdd(currentData, newData) {\n  return !!currentData && !!newData && currentData.sighashType === undefined;\n}\nexports.canAdd = canAdd;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Buffer","Object","defineProperty","value","typeFields_1","decode","keyVal","key","InputTypes","SIGHASH_TYPE","Error","toString","readUInt32LE","encode","data","from","allocUnsafe","writeUInt32LE","expected","check","canAdd","currentData","newData","undefined","sighashType"]
}
