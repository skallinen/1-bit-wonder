{
"version":3,
"file":"module$node_modules$bip174$src$lib$combiner$index.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,CAAA,iDAAA,CAAsE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA+D9GC,QAASA,UAAS,CAACC,OAAD,CAAUC,WAAV,CAAuBC,YAAvB,CAAqC,CACrD,MAAOC,IAAA,EAAO,CACZ,GAAI,CAAAH,OAAQI,CAAAA,GAAR,CAAYD,GAAZ,CAAJ,CAAA,CACA,IAAME,MAAQH,YAAaI,CAAAA,MAAb,CAAoBC,EAAA,EAAMA,EAAGJ,CAAAA,GAAIK,CAAAA,QAAP,CAAgB,KAAhB,CAAN,GAAiCL,GAArD,CAAA,CAA0D,CAA1D,CACdF,YAAYQ,CAAAA,IAAZ,CAAiBJ,KAAjB,CACAL,QAAQU,CAAAA,GAAR,CAAYP,GAAZ,CAHA,CADY,CADuC,CAWvDQ,QAASA,UAAS,CAACC,OAAD,CAAU,CAC1B,MAAMC,IAAM,IAAIC,GAChBF,QAAQG,CAAAA,OAAR,CAAgBC,MAAA,EAAU,CAClBC,MAAAA,CAAMD,MAAOb,CAAAA,GAAIK,CAAAA,QAAX,CAAoB,KAApB,CACZ,IAAIK,GAAIT,CAAAA,GAAJ,CAAQa,MAAR,CAAJ,CACE,KAAUC,MAAJ,CAAU,6CAAV,CAAN,CACFL,GAAIH,CAAAA,GAAJ,CAAQO,MAAR,CAJwB,CAA1B,CAMA;MAAOJ,IARmB,CAxE5BM,MAAOC,CAAAA,cAAP,CAAsBtB,OAAtB,CAA+B,YAA/B,CAA6C,CAAEuB,MAAO,CAAA,CAAT,CAA7C,CACA,OAAMC,SAAW1B,OAAA,CAAQ,iDAAR,CA2DjBE,QAAQyB,CAAAA,OAAR,CA1DAA,QAAgB,CAACC,KAAD,CAAQ,CACtB,IAAMC,KAAOD,KAAA,CAAM,CAAN,CACb,OAAMvB,YAAcqB,QAASI,CAAAA,aAAT,CAAuBD,IAAvB,CACdE,MAAAA,CAASH,KAAMI,CAAAA,KAAN,CAAY,CAAZ,CACf,IAAsB,CAAtB,GAAID,KAAOE,CAAAA,MAAX,CAAyB,KAAUX,MAAJ,CAAU,6BAAV,CAAN,CACnBY,IAAAA,CAAeL,IA+DTM,CAAAA,SAAUC,CAAAA,UA9DtB,IAAeC,IAAAA,EAAf,GAAIH,IAAJ,CACE,KAAUZ,MAAJ,CAAU,mCAAV,CAAN,CAEF,MAAMgB,cAAgBvB,SAAA,CAAUV,WAAYkC,CAAAA,aAAtB,CAAtB,CACMC,cAAgBnC,WAAYoC,CAAAA,YAAaC,CAAAA,GAAzB,CAA6B3B,SAA7B,CADtB;AAEM4B,eAAiBtC,WAAYuC,CAAAA,aAAcF,CAAAA,GAA1B,CAA8B3B,SAA9B,CACvB,KAAK,MAAM8B,KAAX,GAAoBd,MAApB,CAA4B,CACpBe,KAAAA,CAAgBD,KAuDZV,CAAAA,SAAUC,CAAAA,UAtDpB,IACcC,IAAAA,EADd,GACES,KADF,EAEE,CAACA,KAAQC,CAAAA,QAAR,EAAmBC,CAAAA,MAAnB,CAA0Bd,IAAOa,CAAAA,QAAP,EAA1B,CAFH,CAIE,KAAUzB,MAAJ,CACJ,+DADI,CAAN,CAIF,MAAMhB,aAAeoB,QAASI,CAAAA,aAAT,CAAuBe,KAAvB,CACE9B,UAAAkC,CAAU3C,YAAaiC,CAAAA,aAAvBU,CACR9B,CAAAA,OAAf,CACEhB,SAAA,CACEmC,aADF,CAEEjC,WAAYkC,CAAAA,aAFd,CAGEjC,YAAaiC,CAAAA,aAHf,CADF,CAOuBjC,aAAamC,CAAAA,YAAaC,CAAAA,GAA1BQ,CAA8BnC,SAA9BmC,CACR/B,CAAAA,OAAf,CAAuB,CAACgC,QAAD,CAAWC,GAAX,CAAA,EACrBD,QAAShC,CAAAA,OAAT,CACEhB,SAAA,CACEqC,aAAA,CAAcY,GAAd,CADF;AAEE/C,WAAYoC,CAAAA,YAAZ,CAAyBW,GAAzB,CAFF,CAGE9C,YAAamC,CAAAA,YAAb,CAA0BW,GAA1B,CAHF,CADF,CADF,CASwB9C,aAAasC,CAAAA,aAAcF,CAAAA,GAA3BW,CAA+BtC,SAA/BsC,CACRlC,CAAAA,OAAhB,CAAwB,CAACmC,SAAD,CAAYF,GAAZ,CAAA,EACtBE,SAAUnC,CAAAA,OAAV,CACEhB,SAAA,CACEwC,cAAA,CAAeS,GAAf,CADF,CAEE/C,WAAYuC,CAAAA,aAAZ,CAA0BQ,GAA1B,CAFF,CAGE9C,YAAasC,CAAAA,aAAb,CAA2BQ,GAA3B,CAHF,CADF,CADF,CA9B0B,CAwC5B,MAAO1B,SAAS6B,CAAAA,eAAT,CAAyBrB,IAAzB,CAAiC,CACtCsB,iBAAkBnD,WAAYkC,CAAAA,aADQ,CAEtCE,aAAcpC,WAAYoC,CAAAA,YAFY,CAGtCG,cAAevC,WAAYuC,CAAAA,aAHW,CAAjC,CApDe,CAJsF;",
"sources":["node_modules/bip174/src/lib/combiner/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$bip174$src$lib$combiner$index\"] = function(global,require,module,exports) {\n'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nconst parser_1 = require('../parser');\nfunction combine(psbts) {\n  const self = psbts[0];\n  const selfKeyVals = parser_1.psbtToKeyVals(self);\n  const others = psbts.slice(1);\n  if (others.length === 0) throw new Error('Combine: Nothing to combine');\n  const selfTx = getTx(self);\n  if (selfTx === undefined) {\n    throw new Error('Combine: Self missing transaction');\n  }\n  const selfGlobalSet = getKeySet(selfKeyVals.globalKeyVals);\n  const selfInputSets = selfKeyVals.inputKeyVals.map(getKeySet);\n  const selfOutputSets = selfKeyVals.outputKeyVals.map(getKeySet);\n  for (const other of others) {\n    const otherTx = getTx(other);\n    if (\n      otherTx === undefined ||\n      !otherTx.toBuffer().equals(selfTx.toBuffer())\n    ) {\n      throw new Error(\n        'Combine: One of the Psbts does not have the same transaction.',\n      );\n    }\n    const otherKeyVals = parser_1.psbtToKeyVals(other);\n    const otherGlobalSet = getKeySet(otherKeyVals.globalKeyVals);\n    otherGlobalSet.forEach(\n      keyPusher(\n        selfGlobalSet,\n        selfKeyVals.globalKeyVals,\n        otherKeyVals.globalKeyVals,\n      ),\n    );\n    const otherInputSets = otherKeyVals.inputKeyVals.map(getKeySet);\n    otherInputSets.forEach((inputSet, idx) =>\n      inputSet.forEach(\n        keyPusher(\n          selfInputSets[idx],\n          selfKeyVals.inputKeyVals[idx],\n          otherKeyVals.inputKeyVals[idx],\n        ),\n      ),\n    );\n    const otherOutputSets = otherKeyVals.outputKeyVals.map(getKeySet);\n    otherOutputSets.forEach((outputSet, idx) =>\n      outputSet.forEach(\n        keyPusher(\n          selfOutputSets[idx],\n          selfKeyVals.outputKeyVals[idx],\n          otherKeyVals.outputKeyVals[idx],\n        ),\n      ),\n    );\n  }\n  return parser_1.psbtFromKeyVals(selfTx, {\n    globalMapKeyVals: selfKeyVals.globalKeyVals,\n    inputKeyVals: selfKeyVals.inputKeyVals,\n    outputKeyVals: selfKeyVals.outputKeyVals,\n  });\n}\nexports.combine = combine;\nfunction keyPusher(selfSet, selfKeyVals, otherKeyVals) {\n  return key => {\n    if (selfSet.has(key)) return;\n    const newKv = otherKeyVals.filter(kv => kv.key.toString('hex') === key)[0];\n    selfKeyVals.push(newKv);\n    selfSet.add(key);\n  };\n}\nfunction getTx(psbt) {\n  return psbt.globalMap.unsignedTx;\n}\nfunction getKeySet(keyVals) {\n  const set = new Set();\n  keyVals.forEach(keyVal => {\n    const hex = keyVal.key.toString('hex');\n    if (set.has(hex))\n      throw new Error('Combine: KeyValue Map keys should be unique');\n    set.add(hex);\n  });\n  return set;\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","keyPusher","selfSet","selfKeyVals","otherKeyVals","key","has","newKv","filter","kv","toString","push","add","getKeySet","keyVals","set","Set","forEach","keyVal","hex","Error","Object","defineProperty","value","parser_1","combine","psbts","self","psbtToKeyVals","others","slice","length","selfTx","globalMap","unsignedTx","undefined","selfGlobalSet","globalKeyVals","selfInputSets","inputKeyVals","map","selfOutputSets","outputKeyVals","other","otherTx","toBuffer","equals","otherGlobalSet","otherInputSets","inputSet","idx","otherOutputSets","outputSet","psbtFromKeyVals","globalMapKeyVals"]
}
