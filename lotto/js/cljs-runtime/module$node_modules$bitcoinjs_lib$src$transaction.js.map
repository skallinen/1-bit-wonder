{
"version":3,
"file":"module$node_modules$bitcoinjs_lib$src$transaction.js",
"lineCount":26,
"mappings":"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",
"sources":["node_modules/bitcoinjs-lib/src/transaction.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$bitcoinjs_lib$src$transaction\"] = function(global,require,module,exports) {\nvar Buffer = require('buffer').Buffer;\n'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nexports.Transaction = void 0;\nconst bufferutils_1 = require('./bufferutils');\nconst bcrypto = require('./crypto');\nconst bscript = require('./script');\nconst script_1 = require('./script');\nconst types = require('./types');\nconst { typeforce } = types;\nfunction varSliceSize(someScript) {\n  const length = someScript.length;\n  return bufferutils_1.varuint.encodingLength(length) + length;\n}\nfunction vectorSize(someVector) {\n  const length = someVector.length;\n  return (\n    bufferutils_1.varuint.encodingLength(length) +\n    someVector.reduce((sum, witness) => {\n      return sum + varSliceSize(witness);\n    }, 0)\n  );\n}\nconst EMPTY_BUFFER = Buffer.allocUnsafe(0);\nconst EMPTY_WITNESS = [];\nconst ZERO = Buffer.from(\n  '0000000000000000000000000000000000000000000000000000000000000000',\n  'hex',\n);\nconst ONE = Buffer.from(\n  '0000000000000000000000000000000000000000000000000000000000000001',\n  'hex',\n);\nconst VALUE_UINT64_MAX = Buffer.from('ffffffffffffffff', 'hex');\nconst BLANK_OUTPUT = {\n  script: EMPTY_BUFFER,\n  valueBuffer: VALUE_UINT64_MAX,\n};\nfunction isOutput(out) {\n  return out.value !== undefined;\n}\nclass Transaction {\n  constructor() {\n    this.version = 1;\n    this.locktime = 0;\n    this.ins = [];\n    this.outs = [];\n  }\n  static fromBuffer(buffer, _NO_STRICT) {\n    const bufferReader = new bufferutils_1.BufferReader(buffer);\n    const tx = new Transaction();\n    tx.version = bufferReader.readInt32();\n    const marker = bufferReader.readUInt8();\n    const flag = bufferReader.readUInt8();\n    let hasWitnesses = false;\n    if (\n      marker === Transaction.ADVANCED_TRANSACTION_MARKER &&\n      flag === Transaction.ADVANCED_TRANSACTION_FLAG\n    ) {\n      hasWitnesses = true;\n    } else {\n      bufferReader.offset -= 2;\n    }\n    const vinLen = bufferReader.readVarInt();\n    for (let i = 0; i < vinLen; ++i) {\n      tx.ins.push({\n        hash: bufferReader.readSlice(32),\n        index: bufferReader.readUInt32(),\n        script: bufferReader.readVarSlice(),\n        sequence: bufferReader.readUInt32(),\n        witness: EMPTY_WITNESS,\n      });\n    }\n    const voutLen = bufferReader.readVarInt();\n    for (let i = 0; i < voutLen; ++i) {\n      tx.outs.push({\n        value: bufferReader.readUInt64(),\n        script: bufferReader.readVarSlice(),\n      });\n    }\n    if (hasWitnesses) {\n      for (let i = 0; i < vinLen; ++i) {\n        tx.ins[i].witness = bufferReader.readVector();\n      }\n      // was this pointless?\n      if (!tx.hasWitnesses())\n        throw new Error('Transaction has superfluous witness data');\n    }\n    tx.locktime = bufferReader.readUInt32();\n    if (_NO_STRICT) return tx;\n    if (bufferReader.offset !== buffer.length)\n      throw new Error('Transaction has unexpected data');\n    return tx;\n  }\n  static fromHex(hex) {\n    return Transaction.fromBuffer(Buffer.from(hex, 'hex'), false);\n  }\n  static isCoinbaseHash(buffer) {\n    typeforce(types.Hash256bit, buffer);\n    for (let i = 0; i < 32; ++i) {\n      if (buffer[i] !== 0) return false;\n    }\n    return true;\n  }\n  isCoinbase() {\n    return (\n      this.ins.length === 1 && Transaction.isCoinbaseHash(this.ins[0].hash)\n    );\n  }\n  addInput(hash, index, sequence, scriptSig) {\n    typeforce(\n      types.tuple(\n        types.Hash256bit,\n        types.UInt32,\n        types.maybe(types.UInt32),\n        types.maybe(types.Buffer),\n      ),\n      arguments,\n    );\n    if (types.Null(sequence)) {\n      sequence = Transaction.DEFAULT_SEQUENCE;\n    }\n    // Add the input and return the input's index\n    return (\n      this.ins.push({\n        hash,\n        index,\n        script: scriptSig || EMPTY_BUFFER,\n        sequence: sequence,\n        witness: EMPTY_WITNESS,\n      }) - 1\n    );\n  }\n  addOutput(scriptPubKey, value) {\n    typeforce(types.tuple(types.Buffer, types.Satoshi), arguments);\n    // Add the output and return the output's index\n    return (\n      this.outs.push({\n        script: scriptPubKey,\n        value,\n      }) - 1\n    );\n  }\n  hasWitnesses() {\n    return this.ins.some(x => {\n      return x.witness.length !== 0;\n    });\n  }\n  weight() {\n    const base = this.byteLength(false);\n    const total = this.byteLength(true);\n    return base * 3 + total;\n  }\n  virtualSize() {\n    return Math.ceil(this.weight() / 4);\n  }\n  byteLength(_ALLOW_WITNESS = true) {\n    const hasWitnesses = _ALLOW_WITNESS && this.hasWitnesses();\n    return (\n      (hasWitnesses ? 10 : 8) +\n      bufferutils_1.varuint.encodingLength(this.ins.length) +\n      bufferutils_1.varuint.encodingLength(this.outs.length) +\n      this.ins.reduce((sum, input) => {\n        return sum + 40 + varSliceSize(input.script);\n      }, 0) +\n      this.outs.reduce((sum, output) => {\n        return sum + 8 + varSliceSize(output.script);\n      }, 0) +\n      (hasWitnesses\n        ? this.ins.reduce((sum, input) => {\n            return sum + vectorSize(input.witness);\n          }, 0)\n        : 0)\n    );\n  }\n  clone() {\n    const newTx = new Transaction();\n    newTx.version = this.version;\n    newTx.locktime = this.locktime;\n    newTx.ins = this.ins.map(txIn => {\n      return {\n        hash: txIn.hash,\n        index: txIn.index,\n        script: txIn.script,\n        sequence: txIn.sequence,\n        witness: txIn.witness,\n      };\n    });\n    newTx.outs = this.outs.map(txOut => {\n      return {\n        script: txOut.script,\n        value: txOut.value,\n      };\n    });\n    return newTx;\n  }\n  /**\n   * Hash transaction for signing a specific input.\n   *\n   * Bitcoin uses a different hash for each signed transaction input.\n   * This method copies the transaction, makes the necessary changes based on the\n   * hashType, and then hashes the result.\n   * This hash can then be used to sign the provided transaction input.\n   */\n  hashForSignature(inIndex, prevOutScript, hashType) {\n    typeforce(\n      types.tuple(types.UInt32, types.Buffer, /* types.UInt8 */ types.Number),\n      arguments,\n    );\n    // https://github.com/bitcoin/bitcoin/blob/master/src/test/sighash_tests.cpp#L29\n    if (inIndex >= this.ins.length) return ONE;\n    // ignore OP_CODESEPARATOR\n    const ourScript = bscript.compile(\n      bscript.decompile(prevOutScript).filter(x => {\n        return x !== script_1.OPS.OP_CODESEPARATOR;\n      }),\n    );\n    const txTmp = this.clone();\n    // SIGHASH_NONE: ignore all outputs? (wildcard payee)\n    if ((hashType & 0x1f) === Transaction.SIGHASH_NONE) {\n      txTmp.outs = [];\n      // ignore sequence numbers (except at inIndex)\n      txTmp.ins.forEach((input, i) => {\n        if (i === inIndex) return;\n        input.sequence = 0;\n      });\n      // SIGHASH_SINGLE: ignore all outputs, except at the same index?\n    } else if ((hashType & 0x1f) === Transaction.SIGHASH_SINGLE) {\n      // https://github.com/bitcoin/bitcoin/blob/master/src/test/sighash_tests.cpp#L60\n      if (inIndex >= this.outs.length) return ONE;\n      // truncate outputs after\n      txTmp.outs.length = inIndex + 1;\n      // \"blank\" outputs before\n      for (let i = 0; i < inIndex; i++) {\n        txTmp.outs[i] = BLANK_OUTPUT;\n      }\n      // ignore sequence numbers (except at inIndex)\n      txTmp.ins.forEach((input, y) => {\n        if (y === inIndex) return;\n        input.sequence = 0;\n      });\n    }\n    // SIGHASH_ANYONECANPAY: ignore inputs entirely?\n    if (hashType & Transaction.SIGHASH_ANYONECANPAY) {\n      txTmp.ins = [txTmp.ins[inIndex]];\n      txTmp.ins[0].script = ourScript;\n      // SIGHASH_ALL: only ignore input scripts\n    } else {\n      // \"blank\" others input scripts\n      txTmp.ins.forEach(input => {\n        input.script = EMPTY_BUFFER;\n      });\n      txTmp.ins[inIndex].script = ourScript;\n    }\n    // serialize and hash\n    const buffer = Buffer.allocUnsafe(txTmp.byteLength(false) + 4);\n    buffer.writeInt32LE(hashType, buffer.length - 4);\n    txTmp.__toBuffer(buffer, 0, false);\n    return bcrypto.hash256(buffer);\n  }\n  hashForWitnessV1(inIndex, prevOutScripts, values, hashType, leafHash, annex) {\n    // https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki#common-signature-message\n    typeforce(\n      types.tuple(\n        types.UInt32,\n        typeforce.arrayOf(types.Buffer),\n        typeforce.arrayOf(types.Satoshi),\n        types.UInt32,\n      ),\n      arguments,\n    );\n    if (\n      values.length !== this.ins.length ||\n      prevOutScripts.length !== this.ins.length\n    ) {\n      throw new Error('Must supply prevout script and value for all inputs');\n    }\n    const outputType =\n      hashType === Transaction.SIGHASH_DEFAULT\n        ? Transaction.SIGHASH_ALL\n        : hashType & Transaction.SIGHASH_OUTPUT_MASK;\n    const inputType = hashType & Transaction.SIGHASH_INPUT_MASK;\n    const isAnyoneCanPay = inputType === Transaction.SIGHASH_ANYONECANPAY;\n    const isNone = outputType === Transaction.SIGHASH_NONE;\n    const isSingle = outputType === Transaction.SIGHASH_SINGLE;\n    let hashPrevouts = EMPTY_BUFFER;\n    let hashAmounts = EMPTY_BUFFER;\n    let hashScriptPubKeys = EMPTY_BUFFER;\n    let hashSequences = EMPTY_BUFFER;\n    let hashOutputs = EMPTY_BUFFER;\n    if (!isAnyoneCanPay) {\n      let bufferWriter = bufferutils_1.BufferWriter.withCapacity(\n        36 * this.ins.length,\n      );\n      this.ins.forEach(txIn => {\n        bufferWriter.writeSlice(txIn.hash);\n        bufferWriter.writeUInt32(txIn.index);\n      });\n      hashPrevouts = bcrypto.sha256(bufferWriter.end());\n      bufferWriter = bufferutils_1.BufferWriter.withCapacity(\n        8 * this.ins.length,\n      );\n      values.forEach(value => bufferWriter.writeUInt64(value));\n      hashAmounts = bcrypto.sha256(bufferWriter.end());\n      bufferWriter = bufferutils_1.BufferWriter.withCapacity(\n        prevOutScripts.map(varSliceSize).reduce((a, b) => a + b),\n      );\n      prevOutScripts.forEach(prevOutScript =>\n        bufferWriter.writeVarSlice(prevOutScript),\n      );\n      hashScriptPubKeys = bcrypto.sha256(bufferWriter.end());\n      bufferWriter = bufferutils_1.BufferWriter.withCapacity(\n        4 * this.ins.length,\n      );\n      this.ins.forEach(txIn => bufferWriter.writeUInt32(txIn.sequence));\n      hashSequences = bcrypto.sha256(bufferWriter.end());\n    }\n    if (!(isNone || isSingle)) {\n      const txOutsSize = this.outs\n        .map(output => 8 + varSliceSize(output.script))\n        .reduce((a, b) => a + b);\n      const bufferWriter = bufferutils_1.BufferWriter.withCapacity(txOutsSize);\n      this.outs.forEach(out => {\n        bufferWriter.writeUInt64(out.value);\n        bufferWriter.writeVarSlice(out.script);\n      });\n      hashOutputs = bcrypto.sha256(bufferWriter.end());\n    } else if (isSingle && inIndex < this.outs.length) {\n      const output = this.outs[inIndex];\n      const bufferWriter = bufferutils_1.BufferWriter.withCapacity(\n        8 + varSliceSize(output.script),\n      );\n      bufferWriter.writeUInt64(output.value);\n      bufferWriter.writeVarSlice(output.script);\n      hashOutputs = bcrypto.sha256(bufferWriter.end());\n    }\n    const spendType = (leafHash ? 2 : 0) + (annex ? 1 : 0);\n    // Length calculation from:\n    // https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki#cite_note-14\n    // With extension from:\n    // https://github.com/bitcoin/bips/blob/master/bip-0342.mediawiki#signature-validation\n    const sigMsgSize =\n      174 -\n      (isAnyoneCanPay ? 49 : 0) -\n      (isNone ? 32 : 0) +\n      (annex ? 32 : 0) +\n      (leafHash ? 37 : 0);\n    const sigMsgWriter = bufferutils_1.BufferWriter.withCapacity(sigMsgSize);\n    sigMsgWriter.writeUInt8(hashType);\n    // Transaction\n    sigMsgWriter.writeInt32(this.version);\n    sigMsgWriter.writeUInt32(this.locktime);\n    sigMsgWriter.writeSlice(hashPrevouts);\n    sigMsgWriter.writeSlice(hashAmounts);\n    sigMsgWriter.writeSlice(hashScriptPubKeys);\n    sigMsgWriter.writeSlice(hashSequences);\n    if (!(isNone || isSingle)) {\n      sigMsgWriter.writeSlice(hashOutputs);\n    }\n    // Input\n    sigMsgWriter.writeUInt8(spendType);\n    if (isAnyoneCanPay) {\n      const input = this.ins[inIndex];\n      sigMsgWriter.writeSlice(input.hash);\n      sigMsgWriter.writeUInt32(input.index);\n      sigMsgWriter.writeUInt64(values[inIndex]);\n      sigMsgWriter.writeVarSlice(prevOutScripts[inIndex]);\n      sigMsgWriter.writeUInt32(input.sequence);\n    } else {\n      sigMsgWriter.writeUInt32(inIndex);\n    }\n    if (annex) {\n      const bufferWriter = bufferutils_1.BufferWriter.withCapacity(\n        varSliceSize(annex),\n      );\n      bufferWriter.writeVarSlice(annex);\n      sigMsgWriter.writeSlice(bcrypto.sha256(bufferWriter.end()));\n    }\n    // Output\n    if (isSingle) {\n      sigMsgWriter.writeSlice(hashOutputs);\n    }\n    // BIP342 extension\n    if (leafHash) {\n      sigMsgWriter.writeSlice(leafHash);\n      sigMsgWriter.writeUInt8(0);\n      sigMsgWriter.writeUInt32(0xffffffff);\n    }\n    // Extra zero byte because:\n    // https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki#cite_note-19\n    return bcrypto.taggedHash(\n      'TapSighash',\n      Buffer.concat([Buffer.of(0x00), sigMsgWriter.end()]),\n    );\n  }\n  hashForWitnessV0(inIndex, prevOutScript, value, hashType) {\n    typeforce(\n      types.tuple(types.UInt32, types.Buffer, types.Satoshi, types.UInt32),\n      arguments,\n    );\n    let tbuffer = Buffer.from([]);\n    let bufferWriter;\n    let hashOutputs = ZERO;\n    let hashPrevouts = ZERO;\n    let hashSequence = ZERO;\n    if (!(hashType & Transaction.SIGHASH_ANYONECANPAY)) {\n      tbuffer = Buffer.allocUnsafe(36 * this.ins.length);\n      bufferWriter = new bufferutils_1.BufferWriter(tbuffer, 0);\n      this.ins.forEach(txIn => {\n        bufferWriter.writeSlice(txIn.hash);\n        bufferWriter.writeUInt32(txIn.index);\n      });\n      hashPrevouts = bcrypto.hash256(tbuffer);\n    }\n    if (\n      !(hashType & Transaction.SIGHASH_ANYONECANPAY) &&\n      (hashType & 0x1f) !== Transaction.SIGHASH_SINGLE &&\n      (hashType & 0x1f) !== Transaction.SIGHASH_NONE\n    ) {\n      tbuffer = Buffer.allocUnsafe(4 * this.ins.length);\n      bufferWriter = new bufferutils_1.BufferWriter(tbuffer, 0);\n      this.ins.forEach(txIn => {\n        bufferWriter.writeUInt32(txIn.sequence);\n      });\n      hashSequence = bcrypto.hash256(tbuffer);\n    }\n    if (\n      (hashType & 0x1f) !== Transaction.SIGHASH_SINGLE &&\n      (hashType & 0x1f) !== Transaction.SIGHASH_NONE\n    ) {\n      const txOutsSize = this.outs.reduce((sum, output) => {\n        return sum + 8 + varSliceSize(output.script);\n      }, 0);\n      tbuffer = Buffer.allocUnsafe(txOutsSize);\n      bufferWriter = new bufferutils_1.BufferWriter(tbuffer, 0);\n      this.outs.forEach(out => {\n        bufferWriter.writeUInt64(out.value);\n        bufferWriter.writeVarSlice(out.script);\n      });\n      hashOutputs = bcrypto.hash256(tbuffer);\n    } else if (\n      (hashType & 0x1f) === Transaction.SIGHASH_SINGLE &&\n      inIndex < this.outs.length\n    ) {\n      const output = this.outs[inIndex];\n      tbuffer = Buffer.allocUnsafe(8 + varSliceSize(output.script));\n      bufferWriter = new bufferutils_1.BufferWriter(tbuffer, 0);\n      bufferWriter.writeUInt64(output.value);\n      bufferWriter.writeVarSlice(output.script);\n      hashOutputs = bcrypto.hash256(tbuffer);\n    }\n    tbuffer = Buffer.allocUnsafe(156 + varSliceSize(prevOutScript));\n    bufferWriter = new bufferutils_1.BufferWriter(tbuffer, 0);\n    const input = this.ins[inIndex];\n    bufferWriter.writeInt32(this.version);\n    bufferWriter.writeSlice(hashPrevouts);\n    bufferWriter.writeSlice(hashSequence);\n    bufferWriter.writeSlice(input.hash);\n    bufferWriter.writeUInt32(input.index);\n    bufferWriter.writeVarSlice(prevOutScript);\n    bufferWriter.writeUInt64(value);\n    bufferWriter.writeUInt32(input.sequence);\n    bufferWriter.writeSlice(hashOutputs);\n    bufferWriter.writeUInt32(this.locktime);\n    bufferWriter.writeUInt32(hashType);\n    return bcrypto.hash256(tbuffer);\n  }\n  getHash(forWitness) {\n    // wtxid for coinbase is always 32 bytes of 0x00\n    if (forWitness && this.isCoinbase()) return Buffer.alloc(32, 0);\n    return bcrypto.hash256(this.__toBuffer(undefined, undefined, forWitness));\n  }\n  getId() {\n    // transaction hash's are displayed in reverse order\n    return (0, bufferutils_1.reverseBuffer)(this.getHash(false)).toString(\n      'hex',\n    );\n  }\n  toBuffer(buffer, initialOffset) {\n    return this.__toBuffer(buffer, initialOffset, true);\n  }\n  toHex() {\n    return this.toBuffer(undefined, undefined).toString('hex');\n  }\n  setInputScript(index, scriptSig) {\n    typeforce(types.tuple(types.Number, types.Buffer), arguments);\n    this.ins[index].script = scriptSig;\n  }\n  setWitness(index, witness) {\n    typeforce(types.tuple(types.Number, [types.Buffer]), arguments);\n    this.ins[index].witness = witness;\n  }\n  __toBuffer(buffer, initialOffset, _ALLOW_WITNESS = false) {\n    if (!buffer) buffer = Buffer.allocUnsafe(this.byteLength(_ALLOW_WITNESS));\n    const bufferWriter = new bufferutils_1.BufferWriter(\n      buffer,\n      initialOffset || 0,\n    );\n    bufferWriter.writeInt32(this.version);\n    const hasWitnesses = _ALLOW_WITNESS && this.hasWitnesses();\n    if (hasWitnesses) {\n      bufferWriter.writeUInt8(Transaction.ADVANCED_TRANSACTION_MARKER);\n      bufferWriter.writeUInt8(Transaction.ADVANCED_TRANSACTION_FLAG);\n    }\n    bufferWriter.writeVarInt(this.ins.length);\n    this.ins.forEach(txIn => {\n      bufferWriter.writeSlice(txIn.hash);\n      bufferWriter.writeUInt32(txIn.index);\n      bufferWriter.writeVarSlice(txIn.script);\n      bufferWriter.writeUInt32(txIn.sequence);\n    });\n    bufferWriter.writeVarInt(this.outs.length);\n    this.outs.forEach(txOut => {\n      if (isOutput(txOut)) {\n        bufferWriter.writeUInt64(txOut.value);\n      } else {\n        bufferWriter.writeSlice(txOut.valueBuffer);\n      }\n      bufferWriter.writeVarSlice(txOut.script);\n    });\n    if (hasWitnesses) {\n      this.ins.forEach(input => {\n        bufferWriter.writeVector(input.witness);\n      });\n    }\n    bufferWriter.writeUInt32(this.locktime);\n    // avoid slicing unless necessary\n    if (initialOffset !== undefined)\n      return buffer.slice(initialOffset, bufferWriter.offset);\n    return buffer;\n  }\n}\nexports.Transaction = Transaction;\nTransaction.DEFAULT_SEQUENCE = 0xffffffff;\nTransaction.SIGHASH_DEFAULT = 0x00;\nTransaction.SIGHASH_ALL = 0x01;\nTransaction.SIGHASH_NONE = 0x02;\nTransaction.SIGHASH_SINGLE = 0x03;\nTransaction.SIGHASH_ANYONECANPAY = 0x80;\nTransaction.SIGHASH_OUTPUT_MASK = 0x03;\nTransaction.SIGHASH_INPUT_MASK = 0x80;\nTransaction.ADVANCED_TRANSACTION_MARKER = 0x00;\nTransaction.ADVANCED_TRANSACTION_FLAG = 0x01;\n\n};"],
"names":["shadow$provide","global","require","module","exports","varSliceSize","someScript","length","bufferutils_1","varuint","encodingLength","vectorSize","someVector","reduce","sum","witness","Buffer","Object","defineProperty","value","Transaction","bcrypto","bscript","script_1","types","typeforce","EMPTY_BUFFER","allocUnsafe","EMPTY_WITNESS","ZERO","from","ONE","VALUE_UINT64_MAX","BLANK_OUTPUT","script","valueBuffer","constructor","version","locktime","ins","outs","fromBuffer","buffer","_NO_STRICT","bufferReader","BufferReader","tx","readInt32","marker","readUInt8","flag","hasWitnesses","ADVANCED_TRANSACTION_MARKER","ADVANCED_TRANSACTION_FLAG","offset","vinLen","readVarInt","i","push","hash","readSlice","index","readUInt32","readVarSlice","sequence","voutLen","readUInt64","readVector","Error","fromHex","hex","isCoinbaseHash","Hash256bit","isCoinbase","addInput","scriptSig","tuple","UInt32","maybe","arguments","Null","DEFAULT_SEQUENCE","addOutput","scriptPubKey","Satoshi","some","x","weight","base","byteLength","total","virtualSize","Math","ceil","_ALLOW_WITNESS","input","output","clone","newTx","map","txIn","txOut","hashForSignature","inIndex","prevOutScript","hashType","Number","ourScript","compile","decompile","filter","OPS","OP_CODESEPARATOR","txTmp","SIGHASH_NONE","forEach","SIGHASH_SINGLE","y","SIGHASH_ANYONECANPAY","writeInt32LE","__toBuffer","hash256","hashForWitnessV1","prevOutScripts","values","leafHash","annex","arrayOf","outputType","SIGHASH_DEFAULT","SIGHASH_ALL","SIGHASH_OUTPUT_MASK","isAnyoneCanPay","SIGHASH_INPUT_MASK","isNone","isSingle","hashPrevouts","hashAmounts","hashScriptPubKeys","hashSequences","hashOutputs","bufferWriter","BufferWriter","withCapacity","writeSlice","writeUInt32","sha256","end","writeUInt64","a","b","writeVarSlice","txOutsSize","out","spendType","sigMsgWriter","writeUInt8","writeInt32","taggedHash","concat","of","hashForWitnessV0","tbuffer","hashSequence","getHash","forWitness","alloc","undefined","getId","reverseBuffer","toString","toBuffer","initialOffset","toHex","setInputScript","setWitness","writeVarInt","writeVector","slice"]
}
