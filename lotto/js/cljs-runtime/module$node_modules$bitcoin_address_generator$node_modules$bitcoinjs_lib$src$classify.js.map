{
"version":3,
"file":"module$node_modules$bitcoin_address_generator$node_modules$bitcoinjs_lib$src$classify.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/bitcoin-address-generator/node_modules/bitcoinjs-lib/src/classify.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$bitcoin_address_generator$node_modules$bitcoinjs_lib$src$classify\"] = function(global,require,module,exports) {\nconst decompile = require('./script').decompile\nconst multisig = require('./templates/multisig')\nconst nullData = require('./templates/nulldata')\nconst pubKey = require('./templates/pubkey')\nconst pubKeyHash = require('./templates/pubkeyhash')\nconst scriptHash = require('./templates/scripthash')\nconst witnessPubKeyHash = require('./templates/witnesspubkeyhash')\nconst witnessScriptHash = require('./templates/witnessscripthash')\nconst witnessCommitment = require('./templates/witnesscommitment')\n\nconst types = {\n  P2MS: 'multisig',\n  NONSTANDARD: 'nonstandard',\n  NULLDATA: 'nulldata',\n  P2PK: 'pubkey',\n  P2PKH: 'pubkeyhash',\n  P2SH: 'scripthash',\n  P2WPKH: 'witnesspubkeyhash',\n  P2WSH: 'witnessscripthash',\n  WITNESS_COMMITMENT: 'witnesscommitment'\n}\n\nfunction classifyOutput (script) {\n  if (witnessPubKeyHash.output.check(script)) return types.P2WPKH\n  if (witnessScriptHash.output.check(script)) return types.P2WSH\n  if (pubKeyHash.output.check(script)) return types.P2PKH\n  if (scriptHash.output.check(script)) return types.P2SH\n\n  // XXX: optimization, below functions .decompile before use\n  const chunks = decompile(script)\n  if (!chunks) throw new TypeError('Invalid script')\n\n  if (multisig.output.check(chunks)) return types.P2MS\n  if (pubKey.output.check(chunks)) return types.P2PK\n  if (witnessCommitment.output.check(chunks)) return types.WITNESS_COMMITMENT\n  if (nullData.output.check(chunks)) return types.NULLDATA\n\n  return types.NONSTANDARD\n}\n\nfunction classifyInput (script, allowIncomplete) {\n  // XXX: optimization, below functions .decompile before use\n  const chunks = decompile(script)\n  if (!chunks) throw new TypeError('Invalid script')\n\n  if (pubKeyHash.input.check(chunks)) return types.P2PKH\n  if (scriptHash.input.check(chunks, allowIncomplete)) return types.P2SH\n  if (multisig.input.check(chunks, allowIncomplete)) return types.P2MS\n  if (pubKey.input.check(chunks)) return types.P2PK\n\n  return types.NONSTANDARD\n}\n\nfunction classifyWitness (script, allowIncomplete) {\n  // XXX: optimization, below functions .decompile before use\n  const chunks = decompile(script)\n  if (!chunks) throw new TypeError('Invalid script')\n\n  if (witnessPubKeyHash.input.check(chunks)) return types.P2WPKH\n  if (witnessScriptHash.input.check(chunks, allowIncomplete)) return types.P2WSH\n\n  return types.NONSTANDARD\n}\n\nmodule.exports = {\n  input: classifyInput,\n  output: classifyOutput,\n  witness: classifyWitness,\n  types: types\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","decompile","multisig","nullData","pubKey","pubKeyHash","scriptHash","witnessPubKeyHash","witnessScriptHash","witnessCommitment","types","P2MS","NONSTANDARD","NULLDATA","P2PK","P2PKH","P2SH","P2WPKH","P2WSH","WITNESS_COMMITMENT","input","classifyInput","script","allowIncomplete","chunks","TypeError","check","output","classifyOutput","witness","classifyWitness"]
}
