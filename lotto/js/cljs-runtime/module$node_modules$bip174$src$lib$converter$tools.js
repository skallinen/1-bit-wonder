shadow$provide.module$node_modules$bip174$src$lib$converter$tools=function(global,require,module,exports){function keyValToBuffer(keyVal){const keyLen=keyVal.key.length,valLen=keyVal.value.length,keyVarIntLen=varuint.encodingLength(keyLen),valVarIntLen=varuint.encodingLength(valLen),buffer=Buffer.allocUnsafe(keyVarIntLen+keyLen+valVarIntLen+valLen);varuint.encode(keyLen,buffer,0);keyVal.key.copy(buffer,keyVarIntLen);varuint.encode(valLen,buffer,keyVarIntLen+keyLen);keyVal.value.copy(buffer,keyVarIntLen+
keyLen+valVarIntLen);return buffer}function verifuint(value,max){if("number"!==typeof value)throw Error("cannot write a non-number as a number");if(0>value)throw Error("specified a negative value for writing an unsigned value");if(value>max)throw Error("RangeError: value out of range");if(Math.floor(value)!==value)throw Error("value has a fractional component");}var Buffer=require("module$node_modules$buffer$index").Buffer;"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const varuint=
require("module$node_modules$bip174$src$lib$converter$varint");exports.range=n=>[...Array(n).keys()];exports.reverseBuffer=function(buffer){if(1>buffer.length)return buffer;let j=buffer.length-1,tmp;for(let i=0;i<buffer.length/2;i++)tmp=buffer[i],buffer[i]=buffer[j],buffer[j]=tmp,j--;return buffer};exports.keyValsToBuffer=function(keyVals){keyVals=keyVals.map(keyValToBuffer);keyVals.push(Buffer.from([0]));return Buffer.concat(keyVals)};exports.keyValToBuffer=keyValToBuffer;exports.readUInt64LE=function(buffer,
offset){const a=buffer.readUInt32LE(offset);buffer=buffer.readUInt32LE(offset+4);buffer*=4294967296;verifuint(buffer+a,9007199254740991);return buffer+a};exports.writeUInt64LE=function(buffer,value,offset){verifuint(value,9007199254740991);buffer.writeInt32LE(value&-1,offset);buffer.writeUInt32LE(Math.floor(value/4294967296),offset+4);return offset+8}}
//# sourceMappingURL=module$node_modules$bip174$src$lib$converter$tools.js.map
