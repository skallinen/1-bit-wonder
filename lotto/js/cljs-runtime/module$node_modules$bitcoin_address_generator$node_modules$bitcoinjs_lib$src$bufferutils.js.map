{
"version":3,
"file":"module$node_modules$bitcoin_address_generator$node_modules$bitcoinjs_lib$src$bufferutils.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,wFAAA,CAA6G,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAErJC,QAASA,UAAU,CAACC,KAAD,CAAQC,GAAR,CAAa,CAC9B,GAAqB,QAArB,GAAI,MAAOD,MAAX,CAA+B,KAAUE,MAAJ,CAAU,uCAAV,CAAN,CAC/B,GAAY,CAAZ,CAAIF,KAAJ,CAAe,KAAUE,MAAJ,CAAU,0DAAV,CAAN,CACf,GAAIF,KAAJ,CAAYC,GAAZ,CAAiB,KAAUC,MAAJ,CAAU,gCAAV,CAAN,CACjB,GAAIC,IAAKC,CAAAA,KAAL,CAAWJ,KAAX,CAAJ,GAA0BA,KAA1B,CAAiC,KAAUE,MAAJ,CAAU,kCAAV,CAAN,CAJH,CAwBhCL,MAAOC,CAAAA,OAAP,CAAiB,CACfO,aAlBFA,QAAsB,CAACC,MAAD;AAASC,MAAT,CAAiB,CACrC,MAAMC,EAAIF,MAAOG,CAAAA,YAAP,CAAoBF,MAApB,CACNG,OAAAA,CAAIJ,MAAOG,CAAAA,YAAP,CAAoBF,MAApB,CAA6B,CAA7B,CACRG,OAAA,EAAK,UAELX,UAAA,CAAUW,MAAV,CAAcF,CAAd,CAAiB,gBAAjB,CACA,OAAOE,OAAP,CAAWF,CAN0B,CAiBtB,CAEfG,cAVFA,QAAuB,CAACL,MAAD,CAASN,KAAT,CAAgBO,MAAhB,CAAwB,CAC7CR,SAAA,CAAUC,KAAV,CAAiB,gBAAjB,CAEAM,OAAOM,CAAAA,YAAP,CAAoBZ,KAApB,CAA4B,CAAC,CAA7B,CAAgCO,MAAhC,CACAD,OAAOO,CAAAA,aAAP,CAAqBV,IAAKC,CAAAA,KAAL,CAAWJ,KAAX,CAAmB,UAAnB,CAArB,CAAsDO,MAAtD,CAA+D,CAA/D,CACA,OAAOA,OAAP,CAAgB,CAL6B,CAQ9B,CA1BoI;",
"sources":["node_modules/bitcoin-address-generator/node_modules/bitcoinjs-lib/src/bufferutils.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$bitcoin_address_generator$node_modules$bitcoinjs_lib$src$bufferutils\"] = function(global,require,module,exports) {\n// https://github.com/feross/buffer/blob/master/index.js#L1127\nfunction verifuint (value, max) {\n  if (typeof value !== 'number') throw new Error('cannot write a non-number as a number')\n  if (value < 0) throw new Error('specified a negative value for writing an unsigned value')\n  if (value > max) throw new Error('RangeError: value out of range')\n  if (Math.floor(value) !== value) throw new Error('value has a fractional component')\n}\n\nfunction readUInt64LE (buffer, offset) {\n  const a = buffer.readUInt32LE(offset)\n  let b = buffer.readUInt32LE(offset + 4)\n  b *= 0x100000000\n\n  verifuint(b + a, 0x001fffffffffffff)\n  return b + a\n}\n\nfunction writeUInt64LE (buffer, value, offset) {\n  verifuint(value, 0x001fffffffffffff)\n\n  buffer.writeInt32LE(value & -1, offset)\n  buffer.writeUInt32LE(Math.floor(value / 0x100000000), offset + 4)\n  return offset + 8\n}\n\nmodule.exports = {\n  readUInt64LE: readUInt64LE,\n  writeUInt64LE: writeUInt64LE\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","verifuint","value","max","Error","Math","floor","readUInt64LE","buffer","offset","a","readUInt32LE","b","writeUInt64LE","writeInt32LE","writeUInt32LE"]
}
