{
"version":3,
"file":"module$node_modules$bitcoin_address_generator$node_modules$bitcoinjs_lib$src$script_signature.js",
"lineCount":3,
"mappings":"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",
"sources":["node_modules/bitcoin-address-generator/node_modules/bitcoinjs-lib/src/script_signature.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$bitcoin_address_generator$node_modules$bitcoinjs_lib$src$script_signature\"] = function(global,require,module,exports) {\nconst bip66 = require('bip66')\nconst Buffer = require('safe-buffer').Buffer\nconst typeforce = require('typeforce')\nconst types = require('./types')\n\nconst ZERO = Buffer.alloc(1, 0)\nfunction toDER (x) {\n  let i = 0\n  while (x[i] === 0) ++i\n  if (i === x.length) return ZERO\n  x = x.slice(i)\n  if (x[0] & 0x80) return Buffer.concat([ZERO, x], 1 + x.length)\n  return x\n}\n\nfunction fromDER (x) {\n  if (x[0] === 0x00) x = x.slice(1)\n  const buffer = Buffer.alloc(32, 0)\n  const bstart = Math.max(0, 32 - x.length)\n  x.copy(buffer, bstart)\n  return buffer\n}\n\n// BIP62: 1 byte hashType flag (only 0x01, 0x02, 0x03, 0x81, 0x82 and 0x83 are allowed)\nfunction decode (buffer) {\n  const hashType = buffer.readUInt8(buffer.length - 1)\n  const hashTypeMod = hashType & ~0x80\n  if (hashTypeMod <= 0 || hashTypeMod >= 4) throw new Error('Invalid hashType ' + hashType)\n\n  const decode = bip66.decode(buffer.slice(0, -1))\n  const r = fromDER(decode.r)\n  const s = fromDER(decode.s)\n\n  return {\n    signature: Buffer.concat([r, s], 64),\n    hashType: hashType\n  }\n}\n\nfunction encode (signature, hashType) {\n  typeforce({\n    signature: types.BufferN(64),\n    hashType: types.UInt8\n  }, { signature, hashType })\n\n  const hashTypeMod = hashType & ~0x80\n  if (hashTypeMod <= 0 || hashTypeMod >= 4) throw new Error('Invalid hashType ' + hashType)\n\n  const hashTypeBuffer = Buffer.allocUnsafe(1)\n  hashTypeBuffer.writeUInt8(hashType, 0)\n\n  const r = toDER(signature.slice(0, 32))\n  const s = toDER(signature.slice(32, 64))\n\n  return Buffer.concat([\n    bip66.encode(r, s),\n    hashTypeBuffer\n  ])\n}\n\nmodule.exports = {\n  decode: decode,\n  encode: encode\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","toDER","x","i","length","ZERO","slice","Buffer","concat","fromDER","buffer","alloc","copy","Math","max","bstart","bip66","typeforce","types","decode","hashType","readUInt8","hashTypeMod","Error","r","s","signature","encode","BufferN","UInt8","hashTypeBuffer","allocUnsafe","writeUInt8"]
}
