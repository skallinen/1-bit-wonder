{
"version":3,
"file":"module$node_modules$bitcoin_address_generator$node_modules$bitcoinjs_lib$src$templates$witnessscripthash$input.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,8GAAA,CAAmI,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAY3KC,QAASA,MAAM,CAACC,MAAD,CAASC,eAAT,CAA0B,CACvCC,SAAA,CAAUC,KAAMC,CAAAA,KAAhB,CAAuBJ,MAAvB,CACA,IAAoB,CAApB,CAAIA,MAAOK,CAAAA,MAAX,CAAuB,MAAO,CAAA,CAE9B,KAAMC,cAAgBN,MAAA,CAAOA,MAAOK,CAAAA,MAAd,CAAuB,CAAvB,CACtB,IAAI,CAACE,MAAOC,CAAAA,QAAP,CAAgBF,aAAhB,CAAL,CAAqC,MAAO,CAAA,CAEtCG,cAAAA,CAAsBC,OAAQC,CAAAA,SAAR,CAAkBL,aAAlB,CAG5B,IAAI,CAACG,aAAL,EAA2D,CAA3D,GAA4BA,aAAoBJ,CAAAA,MAAhD,CAA8D,MAAO,CAAA,CAE/DO,OAAAA,CAAsBF,OAAQG,CAAAA,OAAR,CAAgBb,MAAOc,CAAAA,KAAP,CAAa,CAAb,CAAgB,CAAC,CAAjB,CAAhB,CAS5B,OANIC,MAAMC,CAAAA,KAAMjB,CAAAA,KAAZ,CAAkBa,MAAlB,CAMJ;AALEG,KAAME,CAAAA,MAAOlB,CAAAA,KAAb,CAAmBU,aAAnB,CAKF,EAHIS,IAAKF,CAAAA,KAAMjB,CAAAA,KAAX,CAAiBa,MAAjB,CAAsCX,eAAtC,CAGJ,EAFEiB,IAAKD,CAAAA,MAAOlB,CAAAA,KAAZ,CAAkBU,aAAlB,CAEF,EAAIU,IAAKH,CAAAA,KAAMjB,CAAAA,KAAX,CAAiBa,MAAjB,CAAJ,EACEO,IAAKF,CAAAA,MAAOlB,CAAAA,KAAZ,CAAkBU,aAAlB,CADF,CACiD,CAAA,CADjD,CAGO,CAAA,CAxBgC,CAXzC,IAAIF,OAASX,OAAA,CAAQ,kCAAR,CAAkBW,CAAAA,MAG/B,OAAMG,QAAUd,OAAA,CAAQ,qFAAR,CAAhB,CACMO,MAAQP,OAAA,CAAQ,oFAAR,CADd,CAEMM,UAAYN,OAAA,CAAQ,qCAAR,CAFlB;AAIMsB,KAAOtB,OAAA,CAAQ,uGAAR,CAJb,CAKMuB,KAAOvB,OAAA,CAAQ,qGAAR,CALb,CAMMmB,MAAQnB,OAAA,CAAQ,yGAAR,CA4BdG,MAAMqB,CAAAA,MAAN,CAAeC,QAAS,EAAG,CAAE,MAAO,yBAAT,CAE3BxB,OAAOC,CAAAA,OAAP,CAAiB,CAAEC,KAAF,CAxC0J;",
"sources":["node_modules/bitcoin-address-generator/node_modules/bitcoinjs-lib/src/templates/witnessscripthash/input.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$bitcoin_address_generator$node_modules$bitcoinjs_lib$src$templates$witnessscripthash$input\"] = function(global,require,module,exports) {\nvar Buffer = require('buffer').Buffer;\n// <scriptSig> {serialized scriptPubKey script}\n\nconst bscript = require('../../script')\nconst types = require('../../types')\nconst typeforce = require('typeforce')\n\nconst p2ms = require('../multisig/')\nconst p2pk = require('../pubkey/')\nconst p2pkh = require('../pubkeyhash/')\n\nfunction check (chunks, allowIncomplete) {\n  typeforce(types.Array, chunks)\n  if (chunks.length < 1) return false\n\n  const witnessScript = chunks[chunks.length - 1]\n  if (!Buffer.isBuffer(witnessScript)) return false\n\n  const witnessScriptChunks = bscript.decompile(witnessScript)\n\n  // is witnessScript a valid script?\n  if (!witnessScriptChunks || witnessScriptChunks.length === 0) return false\n\n  const witnessRawScriptSig = bscript.compile(chunks.slice(0, -1))\n\n  // match types\n  if (p2pkh.input.check(witnessRawScriptSig) &&\n    p2pkh.output.check(witnessScriptChunks)) return true\n\n  if (p2ms.input.check(witnessRawScriptSig, allowIncomplete) &&\n    p2ms.output.check(witnessScriptChunks)) return true\n\n  if (p2pk.input.check(witnessRawScriptSig) &&\n    p2pk.output.check(witnessScriptChunks)) return true\n\n  return false\n}\ncheck.toJSON = function () { return 'witnessScriptHash input' }\n\nmodule.exports = { check }\n\n};"],
"names":["shadow$provide","global","require","module","exports","check","chunks","allowIncomplete","typeforce","types","Array","length","witnessScript","Buffer","isBuffer","witnessScriptChunks","bscript","decompile","witnessRawScriptSig","compile","slice","p2pkh","input","output","p2ms","p2pk","toJSON","check.toJSON"]
}
