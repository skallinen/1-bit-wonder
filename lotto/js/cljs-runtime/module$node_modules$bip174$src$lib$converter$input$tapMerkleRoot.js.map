{
"version":3,
"file":"module$node_modules$bip174$src$lib$converter$input$tapMerkleRoot.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,gEAAA,CAAqF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA2B7HC,QAASA,MAAK,CAACC,IAAD,CAAO,CACnB,MAAOC,OAAOC,CAAAA,QAAP,CAAgBF,IAAhB,CAAP,EAAgD,EAAhD,GAAgCA,IAAKG,CAAAA,MADlB,CA1BrB,IAAIF,OAASL,OAAA,CAAQ,kCAAR,CAAkBK,CAAAA,MAC/B,aACAG,OAAOC,CAAAA,cAAP,CAAsBP,OAAtB,CAA+B,YAA/B,CAA6C,CAAEQ,MAAO,CAAA,CAAT,CAA7C,CACA,OAAMC,aAAeX,OAAA,CAAQ,+CAAR,CAgBrBE,QAAQU,CAAAA,MAAR,CAfAA,QAAe,CAACC,MAAD,CAAS,CACtB,GACEA,MAAOC,CAAAA,GAAP,CAAW,CAAX,CADF,GACoBH,YAAaI,CAAAA,UAAWC,CAAAA,eAD5C,EAEwB,CAFxB,GAEEH,MAAOC,CAAAA,GAAIP,CAAAA,MAFb,CAIE,KAAUU,MAAJ,CACJ,0DADI;AAEFJ,MAAOC,CAAAA,GAAII,CAAAA,QAAX,CAAoB,KAApB,CAFE,CAAN,CAKF,GAAI,CAACf,KAAA,CAAMU,MAAOH,CAAAA,KAAb,CAAL,CACE,KAAUO,MAAJ,CAAU,gDAAV,CAAN,CAEF,MAAOJ,OAAOH,CAAAA,KAbQ,CAoBxBR,QAAQiB,CAAAA,MAAR,CAJAA,QAAe,CAACT,KAAD,CAAQ,CAErB,MAAO,CAAEI,IADGT,MAAOe,CAAAA,IAAPN,CAAY,CAACH,YAAaI,CAAAA,UAAWC,CAAAA,eAAzB,CAAZF,CACL,CAAOJ,KAAP,CAFc,CAKvBR,QAAQmB,CAAAA,QAAR,CAAmB,QAInBnB,QAAQC,CAAAA,KAAR,CAAgBA,KAIhBD,QAAQoB,CAAAA,MAAR,CAHAA,QAAe,CAACC,WAAD,CAAcC,OAAd,CAAuB,CACpC,MAAO,CAAC,CAACD,WAAT,EAAwB,CAAC,CAACC,OAA1B,EAAmEC,IAAAA,EAAnE,GAAqCF,WAAYG,CAAAA,aADb,CA/BuF;",
"sources":["node_modules/bip174/src/lib/converter/input/tapMerkleRoot.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$bip174$src$lib$converter$input$tapMerkleRoot\"] = function(global,require,module,exports) {\nvar Buffer = require('buffer').Buffer;\n'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nconst typeFields_1 = require('../../typeFields');\nfunction decode(keyVal) {\n  if (\n    keyVal.key[0] !== typeFields_1.InputTypes.TAP_MERKLE_ROOT ||\n    keyVal.key.length !== 1\n  ) {\n    throw new Error(\n      'Decode Error: could not decode tapMerkleRoot with key 0x' +\n        keyVal.key.toString('hex'),\n    );\n  }\n  if (!check(keyVal.value)) {\n    throw new Error('Decode Error: tapMerkleRoot not a 32-byte hash');\n  }\n  return keyVal.value;\n}\nexports.decode = decode;\nfunction encode(value) {\n  const key = Buffer.from([typeFields_1.InputTypes.TAP_MERKLE_ROOT]);\n  return { key, value };\n}\nexports.encode = encode;\nexports.expected = 'Buffer';\nfunction check(data) {\n  return Buffer.isBuffer(data) && data.length === 32;\n}\nexports.check = check;\nfunction canAdd(currentData, newData) {\n  return !!currentData && !!newData && currentData.tapMerkleRoot === undefined;\n}\nexports.canAdd = canAdd;\n\n};"],
"names":["shadow$provide","global","require","module","exports","check","data","Buffer","isBuffer","length","Object","defineProperty","value","typeFields_1","decode","keyVal","key","InputTypes","TAP_MERKLE_ROOT","Error","toString","encode","from","expected","canAdd","currentData","newData","undefined","tapMerkleRoot"]
}
