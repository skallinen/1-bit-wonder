{
"version":3,
"file":"module$node_modules$bitcoin_address_generator$node_modules$bitcoinjs_lib$src$templates$multisig$output.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,sGAAA,CAA2H,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAQnKC,QAASA,MAAM,CAACC,MAAD,CAASC,eAAT,CAA0B,CACjCC,MAAAA,CAASC,OAAQC,CAAAA,SAAR,CAAkBJ,MAAlB,CAKf,IAHoB,CAGpB,CAHIE,MAAOG,CAAAA,MAGX,EAFIH,MAAA,CAAOA,MAAOG,CAAAA,MAAd,CAAuB,CAAvB,CAEJ,GAFkCC,GAAIC,CAAAA,gBAEtC,EADI,CAACC,KAAMC,CAAAA,MAAN,CAAaP,MAAA,CAAO,CAAP,CAAb,CACL,EAAI,CAACM,KAAMC,CAAAA,MAAN,CAAaP,MAAA,CAAOA,MAAOG,CAAAA,MAAd,CAAuB,CAAvB,CAAb,CAAL,CAA8C,MAAO,CAAA,CACrD,OAAMK,EAAIR,MAAA,CAAO,CAAP,CAAJQ,CAAgBC,WAAtB,CACMC,EAAIV,MAAA,CAAOA,MAAOG,CAAAA,MAAd,CAAuB,CAAvB,CAAJO,CAAgCD,WAKtC,OAHS,EAGT,EAHID,CAGJ,EAFQ,EAER,CAFIE,CAEJ,EADIF,CACJ,CADQE,CACR,EAAIA,CAAJ,GAAUV,MAAOG,CAAAA,MAAjB,CAA0B,CAA1B,CAAoC,CAAA,CAApC,CACIJ,eAAJ;AAA4B,CAAA,CAA5B,CAEaC,MAAOW,CAAAA,KAAPC,CAAa,CAAbA,CAAgB,CAAC,CAAjBA,CACDC,CAAAA,KAAL,CAAWZ,OAAQa,CAAAA,iBAAnB,CAjBgC,CALzC,MAAMb,QAAUP,OAAA,CAAQ,qFAAR,CAAhB,CACMY,MAAQZ,OAAA,CAAQ,oFAAR,CADd,CAEMU,IAAMV,OAAA,CAAQ,4CAAR,CAFZ,CAGMe,YAAcL,GAAIW,CAAAA,WAqBxBlB,MAAMmB,CAAAA,MAAN,CAAeC,QAAS,EAAG,CAAE,MAAO,kBAAT,CAE3BtB,OAAOC,CAAAA,OAAP,CAAiB,CAAEC,KAAF,CA7BkJ;",
"sources":["node_modules/bitcoin-address-generator/node_modules/bitcoinjs-lib/src/templates/multisig/output.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$bitcoin_address_generator$node_modules$bitcoinjs_lib$src$templates$multisig$output\"] = function(global,require,module,exports) {\n// m [pubKeys ...] n OP_CHECKMULTISIG\n\nconst bscript = require('../../script')\nconst types = require('../../types')\nconst OPS = require('bitcoin-ops')\nconst OP_INT_BASE = OPS.OP_RESERVED // OP_1 - 1\n\nfunction check (script, allowIncomplete) {\n  const chunks = bscript.decompile(script)\n\n  if (chunks.length < 4) return false\n  if (chunks[chunks.length - 1] !== OPS.OP_CHECKMULTISIG) return false\n  if (!types.Number(chunks[0])) return false\n  if (!types.Number(chunks[chunks.length - 2])) return false\n  const m = chunks[0] - OP_INT_BASE\n  const n = chunks[chunks.length - 2] - OP_INT_BASE\n\n  if (m <= 0) return false\n  if (n > 16) return false\n  if (m > n) return false\n  if (n !== chunks.length - 3) return false\n  if (allowIncomplete) return true\n\n  const keys = chunks.slice(1, -2)\n  return keys.every(bscript.isCanonicalPubKey)\n}\ncheck.toJSON = function () { return 'multi-sig output' }\n\nmodule.exports = { check }\n\n};"],
"names":["shadow$provide","global","require","module","exports","check","script","allowIncomplete","chunks","bscript","decompile","length","OPS","OP_CHECKMULTISIG","types","Number","m","OP_INT_BASE","n","slice","keys","every","isCanonicalPubKey","OP_RESERVED","toJSON","check.toJSON"]
}
