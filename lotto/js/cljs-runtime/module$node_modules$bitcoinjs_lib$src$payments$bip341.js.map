{
"version":3,
"file":"module$node_modules$bitcoinjs_lib$src$payments$bip341.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/bitcoinjs-lib/src/payments/bip341.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$bitcoinjs_lib$src$payments$bip341\"] = function(global,require,module,exports) {\n'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nexports.tweakKey =\n  exports.tapTweakHash =\n  exports.tapleafHash =\n  exports.findScriptPath =\n  exports.toHashTree =\n  exports.rootHashFromPath =\n  exports.MAX_TAPTREE_DEPTH =\n  exports.LEAF_VERSION_TAPSCRIPT =\n    void 0;\nconst buffer_1 = require('buffer');\nconst ecc_lib_1 = require('../ecc_lib');\nconst bcrypto = require('../crypto');\nconst bufferutils_1 = require('../bufferutils');\nconst types_1 = require('../types');\nexports.LEAF_VERSION_TAPSCRIPT = 0xc0;\nexports.MAX_TAPTREE_DEPTH = 128;\nconst isHashBranch = ht => 'left' in ht && 'right' in ht;\nfunction rootHashFromPath(controlBlock, leafHash) {\n  if (controlBlock.length < 33)\n    throw new TypeError(\n      `The control-block length is too small. Got ${controlBlock.length}, expected min 33.`,\n    );\n  const m = (controlBlock.length - 33) / 32;\n  let kj = leafHash;\n  for (let j = 0; j < m; j++) {\n    const ej = controlBlock.slice(33 + 32 * j, 65 + 32 * j);\n    if (kj.compare(ej) < 0) {\n      kj = tapBranchHash(kj, ej);\n    } else {\n      kj = tapBranchHash(ej, kj);\n    }\n  }\n  return kj;\n}\nexports.rootHashFromPath = rootHashFromPath;\n/**\n * Build a hash tree of merkle nodes from the scripts binary tree.\n * @param scriptTree - the tree of scripts to pairwise hash.\n */\nfunction toHashTree(scriptTree) {\n  if ((0, types_1.isTapleaf)(scriptTree))\n    return { hash: tapleafHash(scriptTree) };\n  const hashes = [toHashTree(scriptTree[0]), toHashTree(scriptTree[1])];\n  hashes.sort((a, b) => a.hash.compare(b.hash));\n  const [left, right] = hashes;\n  return {\n    hash: tapBranchHash(left.hash, right.hash),\n    left,\n    right,\n  };\n}\nexports.toHashTree = toHashTree;\n/**\n * Given a HashTree, finds the path from a particular hash to the root.\n * @param node - the root of the tree\n * @param hash - the hash to search for\n * @returns - array of sibling hashes, from leaf (inclusive) to root\n * (exclusive) needed to prove inclusion of the specified hash. undefined if no\n * path is found\n */\nfunction findScriptPath(node, hash) {\n  if (isHashBranch(node)) {\n    const leftPath = findScriptPath(node.left, hash);\n    if (leftPath !== undefined) return [...leftPath, node.right.hash];\n    const rightPath = findScriptPath(node.right, hash);\n    if (rightPath !== undefined) return [...rightPath, node.left.hash];\n  } else if (node.hash.equals(hash)) {\n    return [];\n  }\n  return undefined;\n}\nexports.findScriptPath = findScriptPath;\nfunction tapleafHash(leaf) {\n  const version = leaf.version || exports.LEAF_VERSION_TAPSCRIPT;\n  return bcrypto.taggedHash(\n    'TapLeaf',\n    buffer_1.Buffer.concat([\n      buffer_1.Buffer.from([version]),\n      serializeScript(leaf.output),\n    ]),\n  );\n}\nexports.tapleafHash = tapleafHash;\nfunction tapTweakHash(pubKey, h) {\n  return bcrypto.taggedHash(\n    'TapTweak',\n    buffer_1.Buffer.concat(h ? [pubKey, h] : [pubKey]),\n  );\n}\nexports.tapTweakHash = tapTweakHash;\nfunction tweakKey(pubKey, h) {\n  if (!buffer_1.Buffer.isBuffer(pubKey)) return null;\n  if (pubKey.length !== 32) return null;\n  if (h && h.length !== 32) return null;\n  const tweakHash = tapTweakHash(pubKey, h);\n  const res = (0, ecc_lib_1.getEccLib)().xOnlyPointAddTweak(pubKey, tweakHash);\n  if (!res || res.xOnlyPubkey === null) return null;\n  return {\n    parity: res.parity,\n    x: buffer_1.Buffer.from(res.xOnlyPubkey),\n  };\n}\nexports.tweakKey = tweakKey;\nfunction tapBranchHash(a, b) {\n  return bcrypto.taggedHash('TapBranch', buffer_1.Buffer.concat([a, b]));\n}\nfunction serializeScript(s) {\n  const varintLen = bufferutils_1.varuint.encodingLength(s.length);\n  const buffer = buffer_1.Buffer.allocUnsafe(varintLen); // better\n  bufferutils_1.varuint.encode(s.length, buffer);\n  return buffer_1.Buffer.concat([buffer, s]);\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","toHashTree","scriptTree","types_1","isTapleaf","hash","tapleafHash","hashes","sort","a","b","compare","left","right","tapBranchHash","findScriptPath","node","leftPath","undefined","rightPath","equals","leaf","bcrypto","taggedHash","Buffer","buffer_1","concat","from","version","LEAF_VERSION_TAPSCRIPT","output","varintLen","bufferutils_1","varuint","encodingLength","s","length","buffer","allocUnsafe","encode","tapTweakHash","pubKey","h","Object","defineProperty","value","tweakKey","rootHashFromPath","MAX_TAPTREE_DEPTH","ecc_lib_1","controlBlock","leafHash","TypeError","m","j","ej","slice","kj","isBuffer","tweakHash","res","getEccLib","xOnlyPointAddTweak","xOnlyPubkey","parity","x"]
}
