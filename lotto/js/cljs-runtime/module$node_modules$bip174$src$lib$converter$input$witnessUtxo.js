shadow$provide.module$node_modules$bip174$src$lib$converter$input$witnessUtxo=function(global,require,module,exports){var Buffer=require("module$node_modules$buffer$index").Buffer;"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const typeFields_1=require("module$node_modules$bip174$src$lib$typeFields"),tools_1=require("module$node_modules$bip174$src$lib$converter$tools"),varuint=require("module$node_modules$bip174$src$lib$converter$varint");exports.decode=function(keyVal){if(keyVal.key[0]!==
typeFields_1.InputTypes.WITNESS_UTXO)throw Error("Decode Error: could not decode witnessUtxo with key 0x"+keyVal.key.toString("hex"));const value=tools_1.readUInt64LE(keyVal.value,0);let _offset=8;const scriptLen=varuint.decode(keyVal.value,_offset);_offset+=varuint.encodingLength(scriptLen);keyVal=keyVal.value.slice(_offset);if(keyVal.length!==scriptLen)throw Error("Decode Error: WITNESS_UTXO script is not proper length");return{script:keyVal,value}};exports.encode=function(data){const {script,value}=
data;data=varuint.encodingLength(script.length);const result=Buffer.allocUnsafe(8+data+script.length);tools_1.writeUInt64LE(result,value,0);varuint.encode(script.length,result,8);script.copy(result,8+data);return{key:Buffer.from([typeFields_1.InputTypes.WITNESS_UTXO]),value:result}};exports.expected="{ script: Buffer; value: number; }";exports.check=function(data){return Buffer.isBuffer(data.script)&&"number"===typeof data.value};exports.canAdd=function(currentData,newData){return!!currentData&&!!newData&&
void 0===currentData.witnessUtxo}}
//# sourceMappingURL=module$node_modules$bip174$src$lib$converter$input$witnessUtxo.js.map
