{
"version":3,
"file":"module$node_modules$bitcoin_address_generator$node_modules$bitcoinjs_lib$src$templates$scripthash$input.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,CAAA,uGAAA,CAA4H,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAYpKC,QAASA,MAAM,CAACC,MAAD,CAASC,eAAT,CAA0B,CACjCC,MAAAA,CAASC,OAAQC,CAAAA,SAAR,CAAkBJ,MAAlB,CACf,IAAoB,CAApB,CAAIE,MAAOG,CAAAA,MAAX,CAAuB,MAAO,CAAA,CAE9B,KAAMC,UAAYJ,MAAA,CAAOA,MAAOG,CAAAA,MAAd,CAAuB,CAAvB,CAClB,IAAI,CAACE,MAAOC,CAAAA,QAAP,CAAgBF,SAAhB,CAAL,CAAiC,MAAO,CAAA,CAExC,OAAMG,gBAAkBN,OAAQC,CAAAA,SAAR,CAAkBD,OAAQO,CAAAA,OAAR,CAAgBR,MAAOS,CAAAA,KAAP,CAAa,CAAb,CAAgB,CAAC,CAAjB,CAAhB,CAAlB,CAOxB,OAAA,CANMC,SAMN,CAN2BT,OAAQC,CAAAA,SAAR,CAAkBE,SAAlB,CAM3B,GAAKH,OAAQU,CAAAA,UAAR,CAAmBJ,eAAnB,CAAL,CAGsB,CAAtB;AAAIP,MAAOG,CAAAA,MAAX,CACSS,MAAOf,CAAAA,KAAP,CAAaa,SAAb,CADT,EAEIG,OAAQhB,CAAAA,KAAR,CAAca,SAAd,CAFJ,CAMII,KAAMC,CAAAA,KAAMlB,CAAAA,KAAZ,CAAkBU,eAAlB,CAMJ,EALEO,KAAME,CAAAA,MAAOnB,CAAAA,KAAb,CAAmBa,SAAnB,CAKF,EAHIO,IAAKF,CAAAA,KAAMlB,CAAAA,KAAX,CAAiBU,eAAjB,CAAkCR,eAAlC,CAGJ,EAFEkB,IAAKD,CAAAA,MAAOnB,CAAAA,KAAZ,CAAkBa,SAAlB,CAEF,EAAIQ,IAAKH,CAAAA,KAAMlB,CAAAA,KAAX,CAAiBU,eAAjB,CAAJ,EACEW,IAAKF,CAAAA,MAAOnB,CAAAA,KAAZ,CAAkBa,SAAlB,CADF,CACgD,CAAA,CADhD,CAGO,CAAA,CAlBP,CAAiD,CAAA,CAdV,CATzC,MAAML,OAASX,OAAA,CAAQ,uCAAR,CAAuBW,CAAAA,MAAtC,CACMJ,QAAUP,OAAA,CAAQ,qFAAR,CADhB,CAGMuB,KAAOvB,OAAA,CAAQ,uGAAR,CAHb;AAIMwB,KAAOxB,OAAA,CAAQ,qGAAR,CAJb,CAKMoB,MAAQpB,OAAA,CAAQ,yGAAR,CALd,CAMMmB,QAAUnB,OAAA,CAAQ,iHAAR,CANhB,CAOMkB,OAASlB,OAAA,CAAQ,iHAAR,CAoCfG,MAAMsB,CAAAA,MAAN;AAAeC,QAAS,EAAG,CAAE,MAAO,kBAAT,CAE3BzB,OAAOC,CAAAA,OAAP,CAAiB,CAAEC,KAAF,CAhDmJ;",
"sources":["node_modules/bitcoin-address-generator/node_modules/bitcoinjs-lib/src/templates/scripthash/input.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$bitcoin_address_generator$node_modules$bitcoinjs_lib$src$templates$scripthash$input\"] = function(global,require,module,exports) {\n// <scriptSig> {serialized scriptPubKey script}\n\nconst Buffer = require('safe-buffer').Buffer\nconst bscript = require('../../script')\n\nconst p2ms = require('../multisig/')\nconst p2pk = require('../pubkey/')\nconst p2pkh = require('../pubkeyhash/')\nconst p2wpkho = require('../witnesspubkeyhash/output')\nconst p2wsho = require('../witnessscripthash/output')\n\nfunction check (script, allowIncomplete) {\n  const chunks = bscript.decompile(script)\n  if (chunks.length < 1) return false\n\n  const lastChunk = chunks[chunks.length - 1]\n  if (!Buffer.isBuffer(lastChunk)) return false\n\n  const scriptSigChunks = bscript.decompile(bscript.compile(chunks.slice(0, -1)))\n  const redeemScriptChunks = bscript.decompile(lastChunk)\n\n  // is redeemScript a valid script?\n  if (!redeemScriptChunks) return false\n\n  // is redeemScriptSig push only?\n  if (!bscript.isPushOnly(scriptSigChunks)) return false\n\n  // is witness?\n  if (chunks.length === 1) {\n    return p2wsho.check(redeemScriptChunks) ||\n      p2wpkho.check(redeemScriptChunks)\n  }\n\n  // match types\n  if (p2pkh.input.check(scriptSigChunks) &&\n    p2pkh.output.check(redeemScriptChunks)) return true\n\n  if (p2ms.input.check(scriptSigChunks, allowIncomplete) &&\n    p2ms.output.check(redeemScriptChunks)) return true\n\n  if (p2pk.input.check(scriptSigChunks) &&\n    p2pk.output.check(redeemScriptChunks)) return true\n\n  return false\n}\ncheck.toJSON = function () { return 'scriptHash input' }\n\nmodule.exports = { check }\n\n};"],
"names":["shadow$provide","global","require","module","exports","check","script","allowIncomplete","chunks","bscript","decompile","length","lastChunk","Buffer","isBuffer","scriptSigChunks","compile","slice","redeemScriptChunks","isPushOnly","p2wsho","p2wpkho","p2pkh","input","output","p2ms","p2pk","toJSON","check.toJSON"]
}
