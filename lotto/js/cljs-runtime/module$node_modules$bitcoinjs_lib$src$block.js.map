{
"version":3,
"file":"module$node_modules$bitcoinjs_lib$src$block.js",
"lineCount":11,
"mappings":"AAAAA,cAAA,CAAA,2CAAA,CAAgE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAkMxGC,QAASA,sBAAqB,CAACC,YAAD,CAAe,CAC3C,MACEA,aADF,WAC0BC,MAD1B,EAEED,YAAA,CAAa,CAAb,CAFF,EAGEA,YAAA,CAAa,CAAb,CAAgBE,CAAAA,GAHlB,EAIEF,YAAA,CAAa,CAAb,CAAgBE,CAAAA,GAJlB,WAIiCD,MAJjC,EAKED,YAAA,CAAa,CAAb,CAAgBE,CAAAA,GAAhB,CAAoB,CAApB,CALF,EAMEF,YAAA,CAAa,CAAb,CAAgBE,CAAAA,GAAhB,CAAoB,CAApB,CAAuBC,CAAAA,OANzB,EAOEH,YAAA,CAAa,CAAb,CAAgBE,CAAAA,GAAhB,CAAoB,CAApB,CAAuBC,CAAAA,OAPzB,WAO4CF,MAP5C,EAQ0C,CAR1C,CAQED,YAAA,CAAa,CAAb,CAAgBE,CAAAA,GAAhB,CAAoB,CAApB,CAAuBC,CAAAA,OAAQC,CAAAA,MATU,CAY7CC,QAASA,gBAAe,CAACL,YAAD,CAAe,CACrC,MACEA,aADF,WAC0BC,MAD1B,EAEED,YAAaM,CAAAA,IAAb,CACEC,EAAA;AACgB,QADhB,GACE,MAAOA,GADT,EAEEA,EAAGL,CAAAA,GAFL,WAEoBD,MAFpB,EAGEM,EAAGL,CAAAA,GAAII,CAAAA,IAAP,CACEE,KAAA,EACmB,QADnB,GACE,MAAOA,MADT,EAEEA,KAAML,CAAAA,OAFR,WAE2BF,MAF3B,EAGyB,CAHzB,CAGEO,KAAML,CAAAA,OAAQC,CAAAA,MAJlB,CAJJ,CAHmC,CA7MvC,IAAIK,OAASb,OAAA,CAAQ,kCAAR,CAAkBa,CAAAA,MAC/B,aACAC,OAAOC,CAAAA,cAAP,CAAsBb,OAAtB,CAA+B,YAA/B,CAA6C,CAAEc,MAAO,CAAA,CAAT,CAA7C,CACAd,QAAQe,CAAAA,KAAR,CAAgB,IAAK,EACrB,OAAMC,cAAgBlB,OAAA,CAAQ,mDAAR,CAAtB,CACMmB,QAAUnB,OAAA,CAAQ,8CAAR,CADhB,CAEMoB,SAAWpB,OAAA,CAAQ,8CAAR,CAFjB;AAGMqB,cAAgBrB,OAAA,CAAQ,mDAAR,CAHtB,CAIMsB,MAAQtB,OAAA,CAAQ,6CAAR,CAJd,CAKM,CAAEuB,SAAF,CAAA,CAAgBD,KALtB,CAMME,kBAAoB,IAAIC,SAAJ,CACxB,kDADwB,CAN1B,CASMC,sBAAwB,IAAID,SAAJ,CAC5B,oDAD4B,CAG9B,MAAMR,MAAN,CACEU,WAAW,EAAG,CACZ,IAAKC,CAAAA,OAAL,CAAe,CAEf,KAAKC,CAAAA,UAAL,CADA,IAAKC,CAAAA,QACL,CADgBC,IAAAA,EAEhB,KAAKC,CAAAA,SAAL,CAAiB,CACjB,KAAKC,CAAAA,aAAL,CAAqBF,IAAAA,EAErB,KAAKG,CAAAA,KAAL,CADA,IAAKC,CAAAA,IACL,CADY,CAEZ,KAAK/B,CAAAA,YAAL,CAAoB2B,IAAAA,EARR,CAUPK,iBAAU,CAACC,MAAD,CAAS,CACxB,GAAoB,EAApB;AAAIA,MAAO7B,CAAAA,MAAX,CAAwB,KAAU8B,MAAJ,CAAU,kCAAV,CAAN,CACxB,IAAMC,aAAe,IAAIrB,aAAcsB,CAAAA,YAAlB,CAA+BH,MAA/B,CACrB,OAAMI,MAAQ,IAAIxB,KAClBwB,MAAMb,CAAAA,OAAN,CAAgBW,YAAaG,CAAAA,SAAb,EAChBD,MAAMX,CAAAA,QAAN,CAAiBS,YAAaI,CAAAA,SAAb,CAAuB,EAAvB,CACjBF,MAAMZ,CAAAA,UAAN,CAAmBU,YAAaI,CAAAA,SAAb,CAAuB,EAAvB,CACnBF,MAAMT,CAAAA,SAAN,CAAkBO,YAAaK,CAAAA,UAAb,EAClBH,MAAMN,CAAAA,IAAN,CAAaI,YAAaK,CAAAA,UAAb,EACbH,MAAMP,CAAAA,KAAN,CAAcK,YAAaK,CAAAA,UAAb,EACd,IAAsB,EAAtB,GAAIP,MAAO7B,CAAAA,MAAX,CAA0B,MAAOiC,MAS3BI,OAAAA,CAAgBN,YAAaO,CAAAA,UAAb,EACtBL,MAAMrC,CAAAA,YAAN,CAAqB,EACrB,KAAK,IAAI2C,EAAI,CAAb,CAAgBA,CAAhB,CAAoBF,MAApB,CAAmC,EAAEE,CAArC,CAAwC,CATtC,MAAMpC;AAAKU,aAAc2B,CAAAA,WAAYZ,CAAAA,UAA1B,CACTG,YAAaF,CAAAA,MAAOY,CAAAA,KAApB,CAA0BV,YAAaW,CAAAA,MAAvC,CADS,CAET,CAAA,CAFS,CAIXX,aAAaW,CAAAA,MAAb,EAAuBvC,EAAGwC,CAAAA,UAAH,EAOvBV,MAAMrC,CAAAA,YAAagD,CAAAA,IAAnB,CANOzC,EAMP,CAFsC,CAMxC,GAFMsB,YAEN,CAFsBQ,KAAMY,CAAAA,gBAAN,EAEtB,CAAmBZ,KAAMR,CAAAA,aAAN,CAAsBA,YACzC,OAAOQ,MA5BiB,CA8BnBa,cAAO,CAACC,GAAD,CAAM,CAClB,MAAOtC,MAAMmB,CAAAA,UAAN,CAAiBvB,MAAO2C,CAAAA,IAAP,CAAYD,GAAZ,CAAiB,KAAjB,CAAjB,CADW,CAGbE,sBAAe,CAACtB,IAAD,CAAO,CAC3B,MAAMuB,WAAavB,IAAbuB,CAAoB,UAApBA,GAAmC,EAAnCA,EAAyC,CAC9BvB,KAAXwB,EAAkB,OACxB,OAAMC,OAAS/C,MAAOgD,CAAAA,KAAP,CAAa,EAAb,CAAiB,CAAjB,CACfD,OAAOE,CAAAA,WAAP,CAAmBH,IAAnB,CAA6B,EAA7B,CAAkCD,QAAlC,CAA4C,CAA5C,CACA,OAAOE,OALoB,CAOtBG,0BAAmB,CAAC3D,YAAD;AAAe4D,UAAf,CAA2B,CACnDzC,SAAA,CAAU,CAAC,CAAE0C,QAAS3C,KAAM4C,CAAAA,QAAjB,CAAD,CAAV,CAAyC9D,YAAzC,CACA,IAA4B,CAA5B,GAAIA,YAAaI,CAAAA,MAAjB,CAA+B,KAAMgB,kBAAN,CAC/B,GAAIwC,UAAJ,EAAkB,CAAC7D,qBAAA,CAAsBC,YAAtB,CAAnB,CACE,KAAMsB,sBAAN,CACF,IAAMyC,OAAS/D,YAAagE,CAAAA,GAAb,CAAiBC,WAAA,EAC9BA,WAAYJ,CAAAA,OAAZ,CAAoBD,UAApB,CADa,CAGTM,OAAAA,CAAW,GAAIlD,QAASmD,CAAAA,cAAb,EAA6BJ,MAA7B,CAAqChD,OAAQqD,CAAAA,OAA7C,CACjB,OAAOR,WAAA,CACH7C,OAAQqD,CAAAA,OAAR,CACE3D,MAAO4D,CAAAA,MAAP,CAAc,CAACH,MAAD,CAAWlE,YAAA,CAAa,CAAb,CAAgBE,CAAAA,GAAhB,CAAoB,CAApB,CAAuBC,CAAAA,OAAvB,CAA+B,CAA/B,CAAX,CAAd,CADF,CADG,CAIH+D,MAb+C,CAerDjB,gBAAgB,EAAG,CACjB,GAAI,CAAClD,qBAAA,CAAsB,IAAKC,CAAAA,YAA3B,CAAL,CAA+C,MAAO,KAKtD;IAAMsE,eAAiB,IAAKtE,CAAAA,YAAL,CAAkB,CAAlB,CAAqBuE,CAAAA,IACzCC,CAAAA,MADoB,CACbC,GAAA,EACNA,GAAIC,CAAAA,MAAO7B,CAAAA,KAAX,CAAiB,CAAjB,CAAoB,CAApB,CAAuB8B,CAAAA,MAAvB,CAA8BlE,MAAO2C,CAAAA,IAAP,CAAY,cAAZ,CAA4B,KAA5B,CAA9B,CAFmB,CAIpBY,CAAAA,GAJoB,CAIhBS,GAAA,EAAOA,GAAIC,CAAAA,MAAO7B,CAAAA,KAAX,CAAiB,CAAjB,CAAoB,EAApB,CAJS,CAKvB,IAA8B,CAA9B,GAAIyB,cAAelE,CAAAA,MAAnB,CAAiC,MAAO,KAElCwE,eAAAA,CAASN,cAAA,CAAeA,cAAelE,CAAAA,MAA9B,CAAuC,CAAvC,CACf,OAAMwE,eAAN,WAAwBnE,OAAxB,EAAoD,EAApD,GAAkCmE,cAAOxE,CAAAA,MAAzC,CACOwE,cADP,CAAgE,IAd/C,CAiBnBC,gBAAgB,EAAG,CAMjB,MAJE,KAAKhD,CAAAA,aAIP,WAJgCpB,OAIhC,EAHgC,EAGhC,GAHE,IAAKoB,CAAAA,aAAczB,CAAAA,MAGrB,EAAgC,IAAhC,GAAI,IAAK6C,CAAAA,gBAAL,EAAJ,CAA6C,CAAA,CAA7C,CACO,CAAA,CAPU,CASnB6B,UAAU,EAAG,CACX,MAAOzE,gBAAA,CAAgB,IAAKL,CAAAA,YAArB,CADI,CAGb+E,MAAM,EAAG,CACP,MAAMC;AAAO,IAAKjC,CAAAA,UAAL,CAAgB,CAAA,CAAhB,CAAuB,CAAA,CAAvB,CAAb,CACMkC,MAAQ,IAAKlC,CAAAA,UAAL,CAAgB,CAAA,CAAhB,CAAuB,CAAA,CAAvB,CACd,OAAc,EAAd,CAAOiC,IAAP,CAAkBC,KAHX,CAKTlC,UAAU,CAACmC,WAAD,CAAcC,YAAA,CAAe,CAAA,CAA7B,CAAmC,CAC3C,MAAID,YAAJ,EAAmB,CAAC,IAAKlF,CAAAA,YAAzB,CAA8C,EAA9C,CAEE,EAFF,CAGEc,aAAcsE,CAAAA,OAAQC,CAAAA,cAAtB,CAAqC,IAAKrF,CAAAA,YAAaI,CAAAA,MAAvD,CAHF,CAIE,IAAKJ,CAAAA,YAAasF,CAAAA,MAAlB,CAAyB,CAACC,CAAD,CAAIC,CAAJ,CAAA,EAAUD,CAAV,CAAcC,CAAEzC,CAAAA,UAAF,CAAaoC,YAAb,CAAvC,CAAmE,CAAnE,CALyC,CAQ7CtB,OAAO,EAAG,CACR,MAAO9C,QAAQqD,CAAAA,OAAR,CAAgB,IAAKqB,CAAAA,QAAL,CAAc,CAAA,CAAd,CAAhB,CADC,CAGVC,KAAK,EAAG,CACN,MAAO,GAAI5E,aAAc6E,CAAAA,aAAlB,EAAiC,IAAK9B,CAAAA,OAAL,EAAjC,CAAiD+B,CAAAA,QAAjD,CAA0D,KAA1D,CADD,CAGRC,UAAU,EAAG,CACX,MAAMC,KAAO,IAAIC,IAAJ,CAAS,CAAT,CACbD,KAAKE,CAAAA,aAAL,CAAmB,IAAKpE,CAAAA,SAAxB,CACA,OAAOkE,KAHI,CAMbL,QAAQ,CAACP,WAAD,CAAc,CACpB,MAAMjD;AAASxB,MAAOwF,CAAAA,WAAP,CAAmB,IAAKlD,CAAAA,UAAL,CAAgBmC,WAAhB,CAAnB,CAAf,CACMgB,aAAe,IAAIpF,aAAcqF,CAAAA,YAAlB,CAA+BlE,MAA/B,CACrBiE,aAAaE,CAAAA,UAAb,CAAwB,IAAK5E,CAAAA,OAA7B,CACA0E,aAAaG,CAAAA,UAAb,CAAwB,IAAK3E,CAAAA,QAA7B,CACAwE,aAAaG,CAAAA,UAAb,CAAwB,IAAK5E,CAAAA,UAA7B,CACAyE,aAAaI,CAAAA,WAAb,CAAyB,IAAK1E,CAAAA,SAA9B,CACAsE,aAAaI,CAAAA,WAAb,CAAyB,IAAKvE,CAAAA,IAA9B,CACAmE,aAAaI,CAAAA,WAAb,CAAyB,IAAKxE,CAAAA,KAA9B,CACA,IAAIoD,WAAJ,EAAmB,CAAC,IAAKlF,CAAAA,YAAzB,CAAuC,MAAOiC,OAC9CnB,cAAcsE,CAAAA,OAAQmB,CAAAA,MAAtB,CACE,IAAKvG,CAAAA,YAAaI,CAAAA,MADpB,CAEE6B,MAFF,CAGEiE,YAAapD,CAAAA,MAHf,CAKAoD,aAAapD,CAAAA,MAAb,EAAuBhC,aAAcsE,CAAAA,OAAQmB,CAAAA,MAAOC,CAAAA,KACpD;IAAKxG,CAAAA,YAAayG,CAAAA,OAAlB,CAA0BlG,EAAA,EAAM,CAC9B,MAAMmG,OAASnG,EAAGwC,CAAAA,UAAH,EACfxC,GAAGkF,CAAAA,QAAH,CAAYxD,MAAZ,CAAoBiE,YAAapD,CAAAA,MAAjC,CACAoD,aAAapD,CAAAA,MAAb,EAAuB4D,MAHO,CAAhC,CAKA,OAAOzE,OArBa,CAuBtB0E,KAAK,CAACzB,WAAD,CAAc,CACjB,MAAO,KAAKO,CAAAA,QAAL,CAAcP,WAAd,CAA2BU,CAAAA,QAA3B,CAAoC,KAApC,CADU,CAGnBgB,YAAY,EAAG,CAGb,MAAM/B,iBAAmB,IAAKA,CAAAA,gBAAL,EACzB,OAAI,CAACA,gBAAL,EAAyB,IAAKC,CAAAA,UAAL,EAAzB,CAAmD,CAAA,CAAnD,CAEE,IAAK+B,CAAAA,iBAAL,EAFF,GAGGhC,gBAAA,CAAmB,IAAKiC,CAAAA,oBAAL,EAAnB,CAAiD,CAAA,CAHpD,CAJa,CAUfC,gBAAgB,EAAG,CACjB,MAAMC,KAAO,GAAIlG,aAAc6E,CAAAA,aAAlB,EAAiC,IAAK9B,CAAAA,OAAL,EAAjC,CAAb,CACML,OAAS3C,KAAMwC,CAAAA,eAAN,CAAsB,IAAKtB,CAAAA,IAA3B,CACf;MAA+B,EAA/B,EAAOiF,IAAKC,CAAAA,OAAL,CAAazD,MAAb,CAHU,CAKnBqD,iBAAiB,EAAG,CAClB,GAAI,CAAC,IAAK7G,CAAAA,YAAV,CAAwB,KAAMoB,kBAAN,CACxB,MAAM8F,iBAAmBrG,KAAM8C,CAAAA,mBAAN,CAA0B,IAAK3D,CAAAA,YAA/B,CACzB,OAAqD,EAArD,GAAO,IAAKyB,CAAAA,UAAWwF,CAAAA,OAAhB,CAAwBC,gBAAxB,CAHW,CAKpBJ,oBAAoB,EAAG,CACrB,GAAI,CAAC,IAAK9G,CAAAA,YAAV,CAAwB,KAAMoB,kBAAN,CACxB,GAAI,CAAC,IAAKyD,CAAAA,gBAAL,EAAL,CAA8B,KAAMvD,sBAAN,CAC9B,MAAM6F,oBAAsBtG,KAAM8C,CAAAA,mBAAN,CAC1B,IAAK3D,CAAAA,YADqB,CAE1B,CAAA,CAF0B,CAI5B,OAA2D,EAA3D,GAAO,IAAK6B,CAAAA,aAAcoF,CAAAA,OAAnB,CAA2BE,mBAA3B,CAPc,CAtKzB,CAgLArH,OAAQe,CAAAA,KAAR,CAAgBA,KAjMwF;",
"sources":["node_modules/bitcoinjs-lib/src/block.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$bitcoinjs_lib$src$block\"] = function(global,require,module,exports) {\nvar Buffer = require('buffer').Buffer;\n'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nexports.Block = void 0;\nconst bufferutils_1 = require('./bufferutils');\nconst bcrypto = require('./crypto');\nconst merkle_1 = require('./merkle');\nconst transaction_1 = require('./transaction');\nconst types = require('./types');\nconst { typeforce } = types;\nconst errorMerkleNoTxes = new TypeError(\n  'Cannot compute merkle root for zero transactions',\n);\nconst errorWitnessNotSegwit = new TypeError(\n  'Cannot compute witness commit for non-segwit block',\n);\nclass Block {\n  constructor() {\n    this.version = 1;\n    this.prevHash = undefined;\n    this.merkleRoot = undefined;\n    this.timestamp = 0;\n    this.witnessCommit = undefined;\n    this.bits = 0;\n    this.nonce = 0;\n    this.transactions = undefined;\n  }\n  static fromBuffer(buffer) {\n    if (buffer.length < 80) throw new Error('Buffer too small (< 80 bytes)');\n    const bufferReader = new bufferutils_1.BufferReader(buffer);\n    const block = new Block();\n    block.version = bufferReader.readInt32();\n    block.prevHash = bufferReader.readSlice(32);\n    block.merkleRoot = bufferReader.readSlice(32);\n    block.timestamp = bufferReader.readUInt32();\n    block.bits = bufferReader.readUInt32();\n    block.nonce = bufferReader.readUInt32();\n    if (buffer.length === 80) return block;\n    const readTransaction = () => {\n      const tx = transaction_1.Transaction.fromBuffer(\n        bufferReader.buffer.slice(bufferReader.offset),\n        true,\n      );\n      bufferReader.offset += tx.byteLength();\n      return tx;\n    };\n    const nTransactions = bufferReader.readVarInt();\n    block.transactions = [];\n    for (let i = 0; i < nTransactions; ++i) {\n      const tx = readTransaction();\n      block.transactions.push(tx);\n    }\n    const witnessCommit = block.getWitnessCommit();\n    // This Block contains a witness commit\n    if (witnessCommit) block.witnessCommit = witnessCommit;\n    return block;\n  }\n  static fromHex(hex) {\n    return Block.fromBuffer(Buffer.from(hex, 'hex'));\n  }\n  static calculateTarget(bits) {\n    const exponent = ((bits & 0xff000000) >> 24) - 3;\n    const mantissa = bits & 0x007fffff;\n    const target = Buffer.alloc(32, 0);\n    target.writeUIntBE(mantissa, 29 - exponent, 3);\n    return target;\n  }\n  static calculateMerkleRoot(transactions, forWitness) {\n    typeforce([{ getHash: types.Function }], transactions);\n    if (transactions.length === 0) throw errorMerkleNoTxes;\n    if (forWitness && !txesHaveWitnessCommit(transactions))\n      throw errorWitnessNotSegwit;\n    const hashes = transactions.map(transaction =>\n      transaction.getHash(forWitness),\n    );\n    const rootHash = (0, merkle_1.fastMerkleRoot)(hashes, bcrypto.hash256);\n    return forWitness\n      ? bcrypto.hash256(\n          Buffer.concat([rootHash, transactions[0].ins[0].witness[0]]),\n        )\n      : rootHash;\n  }\n  getWitnessCommit() {\n    if (!txesHaveWitnessCommit(this.transactions)) return null;\n    // The merkle root for the witness data is in an OP_RETURN output.\n    // There is no rule for the index of the output, so use filter to find it.\n    // The root is prepended with 0xaa21a9ed so check for 0x6a24aa21a9ed\n    // If multiple commits are found, the output with highest index is assumed.\n    const witnessCommits = this.transactions[0].outs\n      .filter(out =>\n        out.script.slice(0, 6).equals(Buffer.from('6a24aa21a9ed', 'hex')),\n      )\n      .map(out => out.script.slice(6, 38));\n    if (witnessCommits.length === 0) return null;\n    // Use the commit with the highest output (should only be one though)\n    const result = witnessCommits[witnessCommits.length - 1];\n    if (!(result instanceof Buffer && result.length === 32)) return null;\n    return result;\n  }\n  hasWitnessCommit() {\n    if (\n      this.witnessCommit instanceof Buffer &&\n      this.witnessCommit.length === 32\n    )\n      return true;\n    if (this.getWitnessCommit() !== null) return true;\n    return false;\n  }\n  hasWitness() {\n    return anyTxHasWitness(this.transactions);\n  }\n  weight() {\n    const base = this.byteLength(false, false);\n    const total = this.byteLength(false, true);\n    return base * 3 + total;\n  }\n  byteLength(headersOnly, allowWitness = true) {\n    if (headersOnly || !this.transactions) return 80;\n    return (\n      80 +\n      bufferutils_1.varuint.encodingLength(this.transactions.length) +\n      this.transactions.reduce((a, x) => a + x.byteLength(allowWitness), 0)\n    );\n  }\n  getHash() {\n    return bcrypto.hash256(this.toBuffer(true));\n  }\n  getId() {\n    return (0, bufferutils_1.reverseBuffer)(this.getHash()).toString('hex');\n  }\n  getUTCDate() {\n    const date = new Date(0); // epoch\n    date.setUTCSeconds(this.timestamp);\n    return date;\n  }\n  // TODO: buffer, offset compatibility\n  toBuffer(headersOnly) {\n    const buffer = Buffer.allocUnsafe(this.byteLength(headersOnly));\n    const bufferWriter = new bufferutils_1.BufferWriter(buffer);\n    bufferWriter.writeInt32(this.version);\n    bufferWriter.writeSlice(this.prevHash);\n    bufferWriter.writeSlice(this.merkleRoot);\n    bufferWriter.writeUInt32(this.timestamp);\n    bufferWriter.writeUInt32(this.bits);\n    bufferWriter.writeUInt32(this.nonce);\n    if (headersOnly || !this.transactions) return buffer;\n    bufferutils_1.varuint.encode(\n      this.transactions.length,\n      buffer,\n      bufferWriter.offset,\n    );\n    bufferWriter.offset += bufferutils_1.varuint.encode.bytes;\n    this.transactions.forEach(tx => {\n      const txSize = tx.byteLength(); // TODO: extract from toBuffer?\n      tx.toBuffer(buffer, bufferWriter.offset);\n      bufferWriter.offset += txSize;\n    });\n    return buffer;\n  }\n  toHex(headersOnly) {\n    return this.toBuffer(headersOnly).toString('hex');\n  }\n  checkTxRoots() {\n    // If the Block has segwit transactions but no witness commit,\n    // there's no way it can be valid, so fail the check.\n    const hasWitnessCommit = this.hasWitnessCommit();\n    if (!hasWitnessCommit && this.hasWitness()) return false;\n    return (\n      this.__checkMerkleRoot() &&\n      (hasWitnessCommit ? this.__checkWitnessCommit() : true)\n    );\n  }\n  checkProofOfWork() {\n    const hash = (0, bufferutils_1.reverseBuffer)(this.getHash());\n    const target = Block.calculateTarget(this.bits);\n    return hash.compare(target) <= 0;\n  }\n  __checkMerkleRoot() {\n    if (!this.transactions) throw errorMerkleNoTxes;\n    const actualMerkleRoot = Block.calculateMerkleRoot(this.transactions);\n    return this.merkleRoot.compare(actualMerkleRoot) === 0;\n  }\n  __checkWitnessCommit() {\n    if (!this.transactions) throw errorMerkleNoTxes;\n    if (!this.hasWitnessCommit()) throw errorWitnessNotSegwit;\n    const actualWitnessCommit = Block.calculateMerkleRoot(\n      this.transactions,\n      true,\n    );\n    return this.witnessCommit.compare(actualWitnessCommit) === 0;\n  }\n}\nexports.Block = Block;\nfunction txesHaveWitnessCommit(transactions) {\n  return (\n    transactions instanceof Array &&\n    transactions[0] &&\n    transactions[0].ins &&\n    transactions[0].ins instanceof Array &&\n    transactions[0].ins[0] &&\n    transactions[0].ins[0].witness &&\n    transactions[0].ins[0].witness instanceof Array &&\n    transactions[0].ins[0].witness.length > 0\n  );\n}\nfunction anyTxHasWitness(transactions) {\n  return (\n    transactions instanceof Array &&\n    transactions.some(\n      tx =>\n        typeof tx === 'object' &&\n        tx.ins instanceof Array &&\n        tx.ins.some(\n          input =>\n            typeof input === 'object' &&\n            input.witness instanceof Array &&\n            input.witness.length > 0,\n        ),\n    )\n  );\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","txesHaveWitnessCommit","transactions","Array","ins","witness","length","anyTxHasWitness","some","tx","input","Buffer","Object","defineProperty","value","Block","bufferutils_1","bcrypto","merkle_1","transaction_1","types","typeforce","errorMerkleNoTxes","TypeError","errorWitnessNotSegwit","constructor","version","merkleRoot","prevHash","undefined","timestamp","witnessCommit","nonce","bits","fromBuffer","buffer","Error","bufferReader","BufferReader","block","readInt32","readSlice","readUInt32","nTransactions","readVarInt","i","Transaction","slice","offset","byteLength","push","getWitnessCommit","fromHex","hex","from","calculateTarget","exponent","mantissa","target","alloc","writeUIntBE","calculateMerkleRoot","forWitness","getHash","Function","hashes","map","transaction","rootHash","fastMerkleRoot","hash256","concat","witnessCommits","outs","filter","out","script","equals","result","hasWitnessCommit","hasWitness","weight","base","total","headersOnly","allowWitness","varuint","encodingLength","reduce","a","x","toBuffer","getId","reverseBuffer","toString","getUTCDate","date","Date","setUTCSeconds","allocUnsafe","bufferWriter","BufferWriter","writeInt32","writeSlice","writeUInt32","encode","bytes","forEach","txSize","toHex","checkTxRoots","__checkMerkleRoot","__checkWitnessCommit","checkProofOfWork","hash","compare","actualMerkleRoot","actualWitnessCommit"]
}
