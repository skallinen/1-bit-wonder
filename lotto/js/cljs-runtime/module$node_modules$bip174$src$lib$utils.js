shadow$provide.module$node_modules$bip174$src$lib$utils=function(global,require,module,exports){function checkForInput(inputs,inputIndex){inputs=inputs[inputIndex];if(void 0===inputs)throw Error(`No input #${inputIndex}`);return inputs}function checkForOutput(outputs,outputIndex){outputs=outputs[outputIndex];if(void 0===outputs)throw Error(`No output #${outputIndex}`);return outputs}function throwForUpdateMaker(typeName,name,expected,data){throw Error(`Data for ${typeName} key ${name} is incorrect: Expected `+
`${expected} and got ${JSON.stringify(data)}`);}function updateMaker(typeName){return(updateData,mainData)=>{for(const name of Object.keys(updateData)){const data=updateData[name],{canAdd,canAddToArray,check,expected}=converter[typeName+"s"][name]||{},isArray=!!canAddToArray;if(check)if(isArray){if(!Array.isArray(data)||mainData[name]&&!Array.isArray(mainData[name]))throw Error(`Key type ${name} must be an array`);data.every(check)||throwForUpdateMaker(typeName,name,expected,data);const arr=mainData[name]||
[],dupeCheckSet=new Set;if(!data.every(v=>canAddToArray(arr,v,dupeCheckSet)))throw Error("Can not add duplicate data to array");mainData[name]=arr.concat(data)}else{check(data)||throwForUpdateMaker(typeName,name,expected,data);if(!canAdd(mainData,data))throw Error(`Can not add duplicate data to ${typeName}`);mainData[name]=data}}}}var Buffer=require("module$node_modules$buffer$index").Buffer;"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const converter=require("module$node_modules$bip174$src$lib$converter$index");
exports.checkForInput=checkForInput;exports.checkForOutput=checkForOutput;exports.checkHasKey=function(checkKeyVal,keyVals,enumLength){if(checkKeyVal.key[0]<enumLength)throw Error("Use the method for your specific key instead of addUnknownKeyVal*");if(keyVals&&0!==keyVals.filter(kv=>kv.key.equals(checkKeyVal.key)).length)throw Error(`Duplicate Key: ${checkKeyVal.key.toString("hex")}`);};exports.getEnumLength=function(myenum){let count=0;Object.keys(myenum).forEach(val=>{Number(isNaN(Number(val)))&&
count++});return count};exports.inputCheckUncleanFinalized=function(inputIndex,input){var result=!1;if(input.nonWitnessUtxo||input.witnessUtxo){result=!input.witnessScript||!!input.finalScriptWitness;const hasOneFinal=!!input.finalScriptSig||!!input.finalScriptWitness;result=(!input.redeemScript||!!input.finalScriptSig)&&result&&hasOneFinal}if(!1===result)throw Error(`Input #${inputIndex} has too much or too little data to clean`);};exports.updateGlobal=updateMaker("global");exports.updateInput=updateMaker("input");
exports.updateOutput=updateMaker("output");exports.addInputAttributes=function(inputs,data){inputs=checkForInput(inputs,inputs.length-1);exports.updateInput(data,inputs)};exports.addOutputAttributes=function(outputs,data){outputs=checkForOutput(outputs,outputs.length-1);exports.updateOutput(data,outputs)};exports.defaultVersionSetter=function(version,txBuf){if(!Buffer.isBuffer(txBuf)||4>txBuf.length)throw Error("Set Version: Invalid Transaction");txBuf.writeUInt32LE(version,0);return txBuf};exports.defaultLocktimeSetter=
function(locktime,txBuf){if(!Buffer.isBuffer(txBuf)||4>txBuf.length)throw Error("Set Locktime: Invalid Transaction");txBuf.writeUInt32LE(locktime,txBuf.length-4);return txBuf}}
//# sourceMappingURL=module$node_modules$bip174$src$lib$utils.js.map
