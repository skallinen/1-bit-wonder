shadow$provide.module$node_modules$bitcoinjs_lib$src$psbt$psbtutils=function(global,require,module,exports){function isPaymentFactory(payment){return script=>{try{return payment({output:script}),!0}catch(err){return!1}}}function pubkeyPositionInScript(pubkey,script){const pubkeyHash=(0,crypto_1.hash160)(pubkey),pubkeyXOnly=pubkey.slice(1,33);script=bscript.decompile(script);if(null===script)throw Error("Unknown script error");return script.findIndex(element=>"number"===typeof element?!1:element.equals(pubkey)||
element.equals(pubkeyHash)||element.equals(pubkeyXOnly))}function signatureBlocksAction(signature,signatureDecodeFn,action){({hashType:signature}=signatureDecodeFn(signature));signatureDecodeFn=[];signature&transaction_1.Transaction.SIGHASH_ANYONECANPAY&&signatureDecodeFn.push("addInput");switch(signature&31){case transaction_1.Transaction.SIGHASH_SINGLE:case transaction_1.Transaction.SIGHASH_NONE:signatureDecodeFn.push("addOutput"),signatureDecodeFn.push("setInputSequence")}return-1===signatureDecodeFn.indexOf(action)?
!0:!1}function extractPartialSigs(input){let pSigs=[];if(0===(input.partialSig||[]).length){if(!input.finalScriptSig&&!input.finalScriptWitness)return[];pSigs=getPsigsFromInputFinalScripts(input)}else pSigs=input.partialSig;return pSigs.map(p=>p.signature)}function getPsigsFromInputFinalScripts(input){const scriptItems=input.finalScriptSig?bscript.decompile(input.finalScriptSig)||[]:[];input=input.finalScriptWitness?bscript.decompile(input.finalScriptWitness)||[]:[];return scriptItems.concat(input).filter(item=>
Buffer.isBuffer(item)&&bscript.isCanonicalScriptSignature(item)).map(sig=>({signature:sig}))}var Buffer=require("module$node_modules$buffer$index").Buffer;"use strict";Object.defineProperty(exports,"__esModule",{value:!0});exports.signatureBlocksAction=exports.checkInputForSig=exports.pubkeyInScript=exports.pubkeyPositionInScript=exports.witnessStackToScriptWitness=exports.isP2TR=exports.isP2SHScript=exports.isP2WSHScript=exports.isP2WPKH=exports.isP2PKH=exports.isP2PK=exports.isP2MS=void 0;const varuint=
require("module$node_modules$bip174$src$lib$converter$varint"),bscript=require("module$node_modules$bitcoinjs_lib$src$script"),transaction_1=require("module$node_modules$bitcoinjs_lib$src$transaction"),crypto_1=require("module$node_modules$bitcoinjs_lib$src$crypto");global=require("module$node_modules$bitcoinjs_lib$src$payments$index");exports.isP2MS=isPaymentFactory(global.p2ms);exports.isP2PK=isPaymentFactory(global.p2pk);exports.isP2PKH=isPaymentFactory(global.p2pkh);exports.isP2WPKH=isPaymentFactory(global.p2wpkh);
exports.isP2WSHScript=isPaymentFactory(global.p2wsh);exports.isP2SHScript=isPaymentFactory(global.p2sh);exports.isP2TR=isPaymentFactory(global.p2tr);exports.witnessStackToScriptWitness=function(witness){function writeVarInt(i){const currentLen=buffer.length,varintLen=varuint.encodingLength(i);buffer=Buffer.concat([buffer,Buffer.allocUnsafe(varintLen)]);varuint.encode(i,buffer,currentLen)}function writeVarSlice(slice){writeVarInt(slice.length);buffer=Buffer.concat([buffer,Buffer.from(slice)])}let buffer=
Buffer.allocUnsafe(0);(function(vector){writeVarInt(vector.length);vector.forEach(writeVarSlice)})(witness);return buffer};exports.pubkeyPositionInScript=pubkeyPositionInScript;exports.pubkeyInScript=function(pubkey,script){return-1!==pubkeyPositionInScript(pubkey,script)};exports.checkInputForSig=function(input,action){return extractPartialSigs(input).some(pSig=>signatureBlocksAction(pSig,bscript.signature.decode,action))};exports.signatureBlocksAction=signatureBlocksAction}
//# sourceMappingURL=module$node_modules$bitcoinjs_lib$src$psbt$psbtutils.js.map
