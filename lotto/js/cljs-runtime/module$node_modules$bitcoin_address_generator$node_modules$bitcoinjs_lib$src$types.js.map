{
"version":3,
"file":"module$node_modules$bitcoin_address_generator$node_modules$bitcoinjs_lib$src$types.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,kFAAA,CAAuG,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAQ/IC,QAASA,UAAU,CAACC,KAAD,CAAQ,CACzB,MAAOC,UAAUC,CAAAA,MAAV,CAAiBF,KAAjB,CAAP,EAAkCA,KAAMG,CAAAA,KAAN,CAAY,yBAAZ,CADT,CAP3B,MAAMF,UAAYL,OAAA,CAAQ,qCAAR,CAAlB,CAEMQ,WAAaC,IAAKC,CAAAA,GAAL,CAAS,CAAT,CAAY,EAAZ,CAAbF,CAA+B,CAQrCL,UAAUQ,CAAAA,MAAV,CAAmBC,QAAS,EAAG,CAAE,MAAO,uBAAT,CAQzBC,OAAAA,CAAUR,SAAUS,CAAAA,UAAV,CAAqB,OAArB,CAGVC,QAAAA,CAAUV,SAAUW,CAAAA,OAAV,CAAkB,CAChCC,cAAeZ,SAAUa,CAAAA,KAAV,CAAgBb,SAAUc,CAAAA,MAA1B,CAAkCd,SAAUC,CAAAA,MAA5C,CADiB;AAEhCc,MAAO,CACLC,OAAQhB,SAAUiB,CAAAA,MADb,CAELC,QAASlB,SAAUiB,CAAAA,MAFd,CAFyB,CAMhCE,WAAYnB,SAAUoB,CAAAA,KANU,CAOhCC,WAAYrB,SAAUoB,CAAAA,KAPU,CAQhCE,IAAKtB,SAAUoB,CAAAA,KARiB,CAAlB,CAYVG,OAAAA,CAAQ,CACDzB,SADC,CAEZ0B,aAAcxB,SAAUyB,CAAAA,OAAV,CAAkB,EAAlB,CAFF,CAGZjB,QAASA,MAHG,CAIZkB,WAAY1B,SAAUyB,CAAAA,OAAV,CAAkB,EAAlB,CAJA,CAKZE,WAAY3B,SAAUyB,CAAAA,OAAV,CAAkB,EAAlB,CALA,CAMZf,QAASA,OANG,CAOZkB,QA3BFA,QAAiB,CAAC7B,KAAD,CAAQ,CACvB,MAAOC,UAAU6B,CAAAA,MAAV,CAAiB9B,KAAjB,CAAP,EAFkB+B,KAElB,EAAkC/B,KADX,CAoBX,CAQZgC,OAtCFA,QAAgB,CAAChC,KAAD,CAAQ,CACtB,MAAOC,UAAUiB,CAAAA,MAAV,CAAiBlB,KAAjB,CAAP,EAAkCA,KAAlC,EAA2CI,UADrB,CA8BV,CAWd,KAAK6B,IAAIA,QAAT,GAAqBhC,UAArB,CACEuB,MAAA,CAAMS,QAAN,CAAA,CAAkBhC,SAAA,CAAUgC,QAAV,CAGpBpC,OAAOC,CAAAA,OAAP;AAAiB0B,MAjD8H;",
"sources":["node_modules/bitcoin-address-generator/node_modules/bitcoinjs-lib/src/types.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$bitcoin_address_generator$node_modules$bitcoinjs_lib$src$types\"] = function(global,require,module,exports) {\nconst typeforce = require('typeforce')\n\nconst UINT31_MAX = Math.pow(2, 31) - 1\nfunction UInt31 (value) {\n  return typeforce.UInt32(value) && value <= UINT31_MAX\n}\n\nfunction BIP32Path (value) {\n  return typeforce.String(value) && value.match(/^(m\\/)?(\\d+'?\\/)*\\d+'?$/)\n}\nBIP32Path.toJSON = function () { return 'BIP32 derivation path' }\n\nconst SATOSHI_MAX = 21 * 1e14\nfunction Satoshi (value) {\n  return typeforce.UInt53(value) && value <= SATOSHI_MAX\n}\n\n// external dependent types\nconst ECPoint = typeforce.quacksLike('Point')\n\n// exposed, external API\nconst Network = typeforce.compile({\n  messagePrefix: typeforce.oneOf(typeforce.Buffer, typeforce.String),\n  bip32: {\n    public: typeforce.UInt32,\n    private: typeforce.UInt32\n  },\n  pubKeyHash: typeforce.UInt8,\n  scriptHash: typeforce.UInt8,\n  wif: typeforce.UInt8\n})\n\n// extend typeforce types with ours\nconst types = {\n  BIP32Path: BIP32Path,\n  Buffer256bit: typeforce.BufferN(32),\n  ECPoint: ECPoint,\n  Hash160bit: typeforce.BufferN(20),\n  Hash256bit: typeforce.BufferN(32),\n  Network: Network,\n  Satoshi: Satoshi,\n  UInt31: UInt31\n}\n\nfor (var typeName in typeforce) {\n  types[typeName] = typeforce[typeName]\n}\n\nmodule.exports = types\n\n};"],
"names":["shadow$provide","global","require","module","exports","BIP32Path","value","typeforce","String","match","UINT31_MAX","Math","pow","toJSON","BIP32Path.toJSON","ECPoint","quacksLike","Network","compile","messagePrefix","oneOf","Buffer","bip32","public","UInt32","private","pubKeyHash","UInt8","scriptHash","wif","types","Buffer256bit","BufferN","Hash160bit","Hash256bit","Satoshi","UInt53","SATOSHI_MAX","UInt31","typeName"]
}
