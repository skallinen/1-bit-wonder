{
"version":3,
"file":"module$node_modules$bip174$src$lib$converter$shared$witnessScript.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,iEAAA,CAAsF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAC9H,IAAIC,OAASH,OAAA,CAAQ,kCAAR,CAAkBG,CAAAA,MAC/B,aACAC,OAAOC,CAAAA,cAAP,CAAsBH,OAAtB,CAA+B,YAA/B,CAA6C,CAAEI,MAAO,CAAA,CAAT,CAA7C,CAmCAJ,QAAQK,CAAAA,aAAR,CAlCAA,QAAsB,CAACC,SAAD,CAAY,CA0BhC,MAAO,CACLC,OA1BFA,QAAe,CAACC,MAAD,CAAS,CACtB,GAAIA,MAAOC,CAAAA,GAAP,CAAW,CAAX,CAAJ,GAAsBH,SAAtB,CACE,KAAUI,MAAJ,CACJ,0DADI,CAEFF,MAAOC,CAAAA,GAAIE,CAAAA,QAAX,CAAoB,KAApB,CAFE,CAAN,CAKF,MAAOH,OAAOJ,CAAAA,KAPQ,CAyBjB,CAELQ,OAlBFA,QAAe,CAACC,IAAD,CAAO,CAEpB,MAAO,CACLJ,IAFUR,MAAOa,CAAAA,IAAPL,CAAY,CAACH,SAAD,CAAZG,CACL;AAELL,MAAOS,IAFF,CAFa,CAgBf,CAGLE,MAXFA,QAAc,CAACF,IAAD,CAAO,CACnB,MAAOZ,OAAOe,CAAAA,QAAP,CAAgBH,IAAhB,CADY,CAQd,CAILI,SAbeA,QASV,CAKLC,OAVFA,QAAe,CAACC,WAAD,CAAcC,OAAd,CAAuB,CACpC,MACE,CAAC,CAACD,WADJ,EACmB,CAAC,CAACC,OADrB,EAC8DC,IAAAA,EAD9D,GACgCF,WAAYG,CAAAA,aAFR,CAK/B,CA1ByB,CAJ4F;",
"sources":["node_modules/bip174/src/lib/converter/shared/witnessScript.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$bip174$src$lib$converter$shared$witnessScript\"] = function(global,require,module,exports) {\nvar Buffer = require('buffer').Buffer;\n'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nfunction makeConverter(TYPE_BYTE) {\n  function decode(keyVal) {\n    if (keyVal.key[0] !== TYPE_BYTE) {\n      throw new Error(\n        'Decode Error: could not decode witnessScript with key 0x' +\n          keyVal.key.toString('hex'),\n      );\n    }\n    return keyVal.value;\n  }\n  function encode(data) {\n    const key = Buffer.from([TYPE_BYTE]);\n    return {\n      key,\n      value: data,\n    };\n  }\n  const expected = 'Buffer';\n  function check(data) {\n    return Buffer.isBuffer(data);\n  }\n  function canAdd(currentData, newData) {\n    return (\n      !!currentData && !!newData && currentData.witnessScript === undefined\n    );\n  }\n  return {\n    decode,\n    encode,\n    check,\n    expected,\n    canAdd,\n  };\n}\nexports.makeConverter = makeConverter;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Buffer","Object","defineProperty","value","makeConverter","TYPE_BYTE","decode","keyVal","key","Error","toString","encode","data","from","check","isBuffer","expected","canAdd","currentData","newData","undefined","witnessScript"]
}
