{
"version":3,
"file":"module$node_modules$hash_DOT_js$lib$hash$common.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/hash_DOT_js/lib/hash/common.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$hash_DOT_js$lib$hash$common\"] = function(global,require,module,exports) {\n'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction BlockHash() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = 'big';\n\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\nexports.BlockHash = BlockHash;\n\nBlockHash.prototype.update = function update(msg, enc) {\n  // Convert message to array, pad it, and join into 32bit blocks\n  msg = utils.toArray(msg, enc);\n  if (!this.pending)\n    this.pending = msg;\n  else\n    this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length;\n\n  // Enough data, try updating\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending;\n\n    // Process pending data in blocks\n    var r = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r, msg.length);\n    if (this.pending.length === 0)\n      this.pending = null;\n\n    msg = utils.join32(msg, 0, msg.length - r, this.endian);\n    for (var i = 0; i < msg.length; i += this._delta32)\n      this._update(msg, i, i + this._delta32);\n  }\n\n  return this;\n};\n\nBlockHash.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert(this.pending === null);\n\n  return this._digest(enc);\n};\n\nBlockHash.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - ((len + this.padLength) % bytes);\n  var res = new Array(k + this.padLength);\n  res[0] = 0x80;\n  for (var i = 1; i < k; i++)\n    res[i] = 0;\n\n  // Append length\n  len <<= 3;\n  if (this.endian === 'big') {\n    for (var t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = len & 0xff;\n  } else {\n    res[i++] = len & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n\n    for (t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n  }\n\n  return res;\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","BlockHash","pending","pendingTotal","blockSize","constructor","outSize","hmacStrength","padLength","endian","_delta8","_delta32","utils","assert","prototype","update","BlockHash.prototype.update","msg","enc","toArray","concat","length","i","r","slice","join32","_update","digest","BlockHash.prototype.digest","_pad","_digest","BlockHash.prototype._pad","len","bytes","k","res","Array","t"]
}
