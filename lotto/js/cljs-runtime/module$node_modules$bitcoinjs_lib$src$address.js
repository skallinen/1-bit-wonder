shadow$provide.module$node_modules$bitcoinjs_lib$src$address=function(global,require,module,exports){function fromBase58Check(address){var payload=bs58check.decode(address);if(21>payload.length)throw new TypeError(address+" is too short");if(21<payload.length)throw new TypeError(address+" is too long");address=payload.readUInt8(0);payload=payload.slice(1);return{version:address,hash:payload}}function fromBech32(address){let result,version;try{result=bech32_1.bech32.decode(address)}catch(e){}if(result){if(version=
result.words[0],0!==version)throw new TypeError(address+" uses wrong encoding");}else if(result=bech32_1.bech32m.decode(address),version=result.words[0],0===version)throw new TypeError(address+" uses wrong encoding");address=bech32_1.bech32.fromWords(result.words.slice(1));return{version,prefix:result.prefix,data:Buffer.from(address)}}function toBech32(data,version,prefix){data=bech32_1.bech32.toWords(data);data.unshift(version);return 0===version?bech32_1.bech32.encode(prefix,data):bech32_1.bech32m.encode(prefix,
data)}var Buffer=require("module$node_modules$buffer$index").Buffer;"use strict";Object.defineProperty(exports,"__esModule",{value:!0});exports.toOutputScript=exports.fromOutputScript=exports.toBech32=exports.toBase58Check=exports.fromBech32=exports.fromBase58Check=void 0;const networks=require("module$node_modules$bitcoinjs_lib$src$networks"),payments=require("module$node_modules$bitcoinjs_lib$src$payments$index"),bscript=require("module$node_modules$bitcoinjs_lib$src$script"),types_1=require("module$node_modules$bitcoinjs_lib$src$types"),
bech32_1=require("module$node_modules$bech32$dist$index"),bs58check=require("module$node_modules$bs58check$index");exports.fromBase58Check=fromBase58Check;exports.fromBech32=fromBech32;exports.toBase58Check=function(hash,version){(0,types_1.typeforce)((0,types_1.tuple)(types_1.Hash160bit,types_1.UInt8),arguments);const payload=Buffer.allocUnsafe(21);payload.writeUInt8(version,0);hash.copy(payload,1);return bs58check.encode(payload)};exports.toBech32=toBech32;exports.fromOutputScript=function(output,
network){network=network||networks.bitcoin;try{return payments.p2pkh({output,network}).address}catch(e){}try{return payments.p2sh({output,network}).address}catch(e){}try{return payments.p2wpkh({output,network}).address}catch(e){}try{return payments.p2wsh({output,network}).address}catch(e){}try{return payments.p2tr({output,network}).address}catch(e){}try{const data=output.slice(2);if(2>data.length||40<data.length)throw new TypeError("Invalid program length for segwit address");const version=output[0]-
80;if(2>version||16<version)throw new TypeError("Invalid version for segwit address");if(output[1]!==data.length)throw new TypeError("Invalid script for segwit address");console.warn("WARNING: Sending to a future segwit version address can lead to loss of funds. End users MUST be warned carefully in the GUI and asked if they wish to proceed with caution. Wallets should verify the segwit version from the output of fromBech32, then decide when it is safe to use which version of segwit.");return toBech32(data,
version,network.bech32)}catch(e){}throw Error(bscript.toASM(output)+" has no matching Address");};exports.toOutputScript=function(address,network){network=network||networks.bitcoin;let decodeBase58,decodeBech32;try{decodeBase58=fromBase58Check(address)}catch(e){}if(decodeBase58){if(decodeBase58.version===network.pubKeyHash)return payments.p2pkh({hash:decodeBase58.hash}).output;if(decodeBase58.version===network.scriptHash)return payments.p2sh({hash:decodeBase58.hash}).output}else{try{decodeBech32=
fromBech32(address)}catch(e){}if(decodeBech32){if(decodeBech32.prefix!==network.bech32)throw Error(address+" has an invalid prefix");if(0===decodeBech32.version){if(20===decodeBech32.data.length)return payments.p2wpkh({hash:decodeBech32.data}).output;if(32===decodeBech32.data.length)return payments.p2wsh({hash:decodeBech32.data}).output}else if(1===decodeBech32.version){if(32===decodeBech32.data.length)return payments.p2tr({pubkey:decodeBech32.data}).output}else if(2<=decodeBech32.version&&16>=decodeBech32.version&&
2<=decodeBech32.data.length&&40>=decodeBech32.data.length)return console.warn("WARNING: Sending to a future segwit version address can lead to loss of funds. End users MUST be warned carefully in the GUI and asked if they wish to proceed with caution. Wallets should verify the segwit version from the output of fromBech32, then decide when it is safe to use which version of segwit."),bscript.compile([decodeBech32.version+80,decodeBech32.data])}}throw Error(address+" has no matching Script");}}
//# sourceMappingURL=module$node_modules$bitcoinjs_lib$src$address.js.map
