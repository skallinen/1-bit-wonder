{
"version":3,
"file":"module$node_modules$bip174$src$lib$converter$index.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/bip174/src/lib/converter/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$bip174$src$lib$converter$index\"] = function(global,require,module,exports) {\n'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nconst typeFields_1 = require('../typeFields');\nconst globalXpub = require('./global/globalXpub');\nconst unsignedTx = require('./global/unsignedTx');\nconst finalScriptSig = require('./input/finalScriptSig');\nconst finalScriptWitness = require('./input/finalScriptWitness');\nconst nonWitnessUtxo = require('./input/nonWitnessUtxo');\nconst partialSig = require('./input/partialSig');\nconst porCommitment = require('./input/porCommitment');\nconst sighashType = require('./input/sighashType');\nconst tapKeySig = require('./input/tapKeySig');\nconst tapLeafScript = require('./input/tapLeafScript');\nconst tapMerkleRoot = require('./input/tapMerkleRoot');\nconst tapScriptSig = require('./input/tapScriptSig');\nconst witnessUtxo = require('./input/witnessUtxo');\nconst tapTree = require('./output/tapTree');\nconst bip32Derivation = require('./shared/bip32Derivation');\nconst checkPubkey = require('./shared/checkPubkey');\nconst redeemScript = require('./shared/redeemScript');\nconst tapBip32Derivation = require('./shared/tapBip32Derivation');\nconst tapInternalKey = require('./shared/tapInternalKey');\nconst witnessScript = require('./shared/witnessScript');\nconst globals = {\n  unsignedTx,\n  globalXpub,\n  // pass an Array of key bytes that require pubkey beside the key\n  checkPubkey: checkPubkey.makeChecker([]),\n};\nexports.globals = globals;\nconst inputs = {\n  nonWitnessUtxo,\n  partialSig,\n  sighashType,\n  finalScriptSig,\n  finalScriptWitness,\n  porCommitment,\n  witnessUtxo,\n  bip32Derivation: bip32Derivation.makeConverter(\n    typeFields_1.InputTypes.BIP32_DERIVATION,\n  ),\n  redeemScript: redeemScript.makeConverter(\n    typeFields_1.InputTypes.REDEEM_SCRIPT,\n  ),\n  witnessScript: witnessScript.makeConverter(\n    typeFields_1.InputTypes.WITNESS_SCRIPT,\n  ),\n  checkPubkey: checkPubkey.makeChecker([\n    typeFields_1.InputTypes.PARTIAL_SIG,\n    typeFields_1.InputTypes.BIP32_DERIVATION,\n  ]),\n  tapKeySig,\n  tapScriptSig,\n  tapLeafScript,\n  tapBip32Derivation: tapBip32Derivation.makeConverter(\n    typeFields_1.InputTypes.TAP_BIP32_DERIVATION,\n  ),\n  tapInternalKey: tapInternalKey.makeConverter(\n    typeFields_1.InputTypes.TAP_INTERNAL_KEY,\n  ),\n  tapMerkleRoot,\n};\nexports.inputs = inputs;\nconst outputs = {\n  bip32Derivation: bip32Derivation.makeConverter(\n    typeFields_1.OutputTypes.BIP32_DERIVATION,\n  ),\n  redeemScript: redeemScript.makeConverter(\n    typeFields_1.OutputTypes.REDEEM_SCRIPT,\n  ),\n  witnessScript: witnessScript.makeConverter(\n    typeFields_1.OutputTypes.WITNESS_SCRIPT,\n  ),\n  checkPubkey: checkPubkey.makeChecker([\n    typeFields_1.OutputTypes.BIP32_DERIVATION,\n  ]),\n  tapBip32Derivation: tapBip32Derivation.makeConverter(\n    typeFields_1.OutputTypes.TAP_BIP32_DERIVATION,\n  ),\n  tapTree,\n  tapInternalKey: tapInternalKey.makeConverter(\n    typeFields_1.OutputTypes.TAP_INTERNAL_KEY,\n  ),\n};\nexports.outputs = outputs;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","typeFields_1","globalXpub","unsignedTx","finalScriptSig","finalScriptWitness","nonWitnessUtxo","partialSig","porCommitment","sighashType","tapKeySig","tapLeafScript","tapMerkleRoot","tapScriptSig","witnessUtxo","tapTree","bip32Derivation","checkPubkey","redeemScript","tapBip32Derivation","tapInternalKey","witnessScript","globals","makeChecker","inputs","makeConverter","InputTypes","BIP32_DERIVATION","REDEEM_SCRIPT","WITNESS_SCRIPT","PARTIAL_SIG","TAP_BIP32_DERIVATION","TAP_INTERNAL_KEY","outputs","OutputTypes"]
}
