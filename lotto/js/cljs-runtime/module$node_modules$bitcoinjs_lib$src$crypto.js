shadow$provide.module$node_modules$bitcoinjs_lib$src$crypto=function(global,require,module,exports){function ripemd160(buffer){try{return createHash("rmd160").update(buffer).digest()}catch(err){try{return createHash("ripemd160").update(buffer).digest()}catch(err2){return(new RipeMd160).update(buffer).digest()}}}function sha256(buffer){return createHash("sha256").update(buffer).digest()}var Buffer=require("module$node_modules$buffer$index").Buffer;"use strict";Object.defineProperty(exports,"__esModule",
{value:!0});exports.taggedHash=exports.hash256=exports.hash160=exports.sha256=exports.sha1=exports.ripemd160=void 0;const createHash=require("module$node_modules$create_hash$browser"),RipeMd160=require("module$node_modules$ripemd160$index");exports.ripemd160=ripemd160;exports.sha1=function(buffer){return createHash("sha1").update(buffer).digest()};exports.sha256=sha256;exports.hash160=function(buffer){return ripemd160(sha256(buffer))};exports.hash256=function(buffer){return sha256(sha256(buffer))};
const TAGGED_HASH_PREFIXES=Object.fromEntries("BIP0340/challenge;BIP0340/aux;BIP0340/nonce;TapLeaf;TapBranch;TapSighash;TapTweak;KeyAgg list;KeyAgg coefficient".split(";").map(tag=>{const tagHash=sha256(Buffer.from(tag));return[tag,Buffer.concat([tagHash,tagHash])]}));exports.taggedHash=function(prefix,data){return sha256(Buffer.concat([TAGGED_HASH_PREFIXES[prefix],data]))}}
//# sourceMappingURL=module$node_modules$bitcoinjs_lib$src$crypto.js.map
