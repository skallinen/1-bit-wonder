{
"version":3,
"file":"module$node_modules$bip174$src$lib$converter$output$tapTree.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/bip174/src/lib/converter/output/tapTree.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$bip174$src$lib$converter$output$tapTree\"] = function(global,require,module,exports) {\nvar Buffer = require('buffer').Buffer;\n'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nconst typeFields_1 = require('../../typeFields');\nconst varuint = require('../varint');\nfunction decode(keyVal) {\n  if (\n    keyVal.key[0] !== typeFields_1.OutputTypes.TAP_TREE ||\n    keyVal.key.length !== 1\n  ) {\n    throw new Error(\n      'Decode Error: could not decode tapTree with key 0x' +\n        keyVal.key.toString('hex'),\n    );\n  }\n  let _offset = 0;\n  const data = [];\n  while (_offset < keyVal.value.length) {\n    const depth = keyVal.value[_offset++];\n    const leafVersion = keyVal.value[_offset++];\n    const scriptLen = varuint.decode(keyVal.value, _offset);\n    _offset += varuint.encodingLength(scriptLen);\n    data.push({\n      depth,\n      leafVersion,\n      script: keyVal.value.slice(_offset, _offset + scriptLen),\n    });\n    _offset += scriptLen;\n  }\n  return { leaves: data };\n}\nexports.decode = decode;\nfunction encode(tree) {\n  const key = Buffer.from([typeFields_1.OutputTypes.TAP_TREE]);\n  const bufs = [].concat(\n    ...tree.leaves.map(tapLeaf => [\n      Buffer.of(tapLeaf.depth, tapLeaf.leafVersion),\n      varuint.encode(tapLeaf.script.length),\n      tapLeaf.script,\n    ]),\n  );\n  return {\n    key,\n    value: Buffer.concat(bufs),\n  };\n}\nexports.encode = encode;\nexports.expected =\n  '{ leaves: [{ depth: number; leafVersion: number, script: Buffer; }] }';\nfunction check(data) {\n  return (\n    Array.isArray(data.leaves) &&\n    data.leaves.every(\n      tapLeaf =>\n        tapLeaf.depth >= 0 &&\n        tapLeaf.depth <= 128 &&\n        (tapLeaf.leafVersion & 0xfe) === tapLeaf.leafVersion &&\n        Buffer.isBuffer(tapLeaf.script),\n    )\n  );\n}\nexports.check = check;\nfunction canAdd(currentData, newData) {\n  return !!currentData && !!newData && currentData.tapTree === undefined;\n}\nexports.canAdd = canAdd;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Buffer","Object","defineProperty","value","typeFields_1","varuint","decode","keyVal","key","OutputTypes","TAP_TREE","length","Error","toString","_offset","data","depth","leafVersion","scriptLen","encodingLength","push","script","slice","leaves","encode","tree","from","bufs","concat","map","tapLeaf","of","expected","check","Array","isArray","every","isBuffer","canAdd","currentData","newData","undefined","tapTree"]
}
