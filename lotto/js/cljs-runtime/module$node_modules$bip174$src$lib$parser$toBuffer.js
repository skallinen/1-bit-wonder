shadow$provide.module$node_modules$bip174$src$lib$parser$toBuffer=function(global,require,module,exports){function keyValsFromMap(keyValMap,converterFactory){const keyHexSet=new Set,keyVals=Object.entries(keyValMap).reduce((result,[key,value])=>{if("unknownKeyVals"===key)return result;key=converterFactory[key];if(void 0===key)return result;value=(Array.isArray(value)?value:[value]).map(key.encode);value.map(kv=>kv.key.toString("hex")).forEach(hex=>{if(keyHexSet.has(hex))throw Error("Serialize Error: Duplicate key: "+
hex);keyHexSet.add(hex)});return result.concat(value)},[]);keyValMap=keyValMap.unknownKeyVals?keyValMap.unknownKeyVals.filter(keyVal=>!keyHexSet.has(keyVal.key.toString("hex"))):[];return keyVals.concat(keyValMap).sort(sortKeyVals)}function psbtToKeyVals({globalMap,inputs,outputs}){return{globalKeyVals:keyValsFromMap(globalMap,convert.globals),inputKeyVals:inputs.map(i=>keyValsFromMap(i,convert.inputs)),outputKeyVals:outputs.map(o=>keyValsFromMap(o,convert.outputs))}}var Buffer=require("module$node_modules$buffer$index").Buffer;
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const convert=require("module$node_modules$bip174$src$lib$converter$index"),tools_1=require("module$node_modules$bip174$src$lib$converter$tools");exports.psbtToBuffer=function({globalMap,inputs,outputs}){const {globalKeyVals,inputKeyVals,outputKeyVals}=psbtToKeyVals({globalMap,inputs,outputs});globalMap=tools_1.keyValsToBuffer(globalKeyVals);outputs=keyVals=>0===keyVals.length?[Buffer.from([0])]:keyVals.map(tools_1.keyValsToBuffer);
inputs=outputs(inputKeyVals);outputs=outputs(outputKeyVals);const header=Buffer.allocUnsafe(5);header.writeUIntBE(482972169471,0,5);return Buffer.concat([header,globalMap].concat(inputs,outputs))};const sortKeyVals=(a,b)=>a.key.compare(b.key);exports.psbtToKeyVals=psbtToKeyVals}
//# sourceMappingURL=module$node_modules$bip174$src$lib$parser$toBuffer.js.map
