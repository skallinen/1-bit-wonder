shadow$provide.module$node_modules$bip174$src$lib$converter$shared$tapBip32Derivation=function(global,require,module,exports){var Buffer=require("module$node_modules$buffer$index").Buffer;"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const varuint=require("module$node_modules$bip174$src$lib$converter$varint"),bip32Derivation=require("module$node_modules$bip174$src$lib$converter$shared$bip32Derivation"),isValidBIP340Key=pubkey=>32===pubkey.length;exports.makeConverter=function(TYPE_BYTE){const parent=
bip32Derivation.makeConverter(TYPE_BYTE,isValidBIP340Key);return{decode:function(keyVal){const nHashes=varuint.decode(keyVal.value),nHashesLen=varuint.encodingLength(nHashes),base=parent.decode({key:keyVal.key,value:keyVal.value.slice(nHashesLen+32*nHashes)}),leafHashes=Array(nHashes);for(let i=0,_offset=nHashesLen;i<nHashes;i++,_offset+=32)leafHashes[i]=keyVal.value.slice(_offset,_offset+32);return Object.assign({},base,{leafHashes})},encode:function(data){const base=parent.encode(data);var nHashesLen=
varuint.encodingLength(data.leafHashes.length);nHashesLen=Buffer.allocUnsafe(nHashesLen);varuint.encode(data.leafHashes.length,nHashesLen);data=Buffer.concat([nHashesLen,...data.leafHashes,base.value]);return Object.assign({},base,{value:data})},check:function(data){return Array.isArray(data.leafHashes)&&data.leafHashes.every(leafHash=>Buffer.isBuffer(leafHash)&&32===leafHash.length)&&parent.check(data)},expected:"{ masterFingerprint: Buffer; pubkey: Buffer; path: string; leafHashes: Buffer[]; }",
canAddToArray:parent.canAddToArray}}}
//# sourceMappingURL=module$node_modules$bip174$src$lib$converter$shared$tapBip32Derivation.js.map
