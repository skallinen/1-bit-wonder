{
"version":3,
"file":"module$node_modules$bip174$src$lib$converter$shared$tapBip32Derivation.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,CAAA,sEAAA,CAA2F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CACnI,IAAIC,OAASH,OAAA,CAAQ,kCAAR,CAAkBG,CAAAA,MAC/B,aACAC,OAAOC,CAAAA,cAAP,CAAsBH,OAAtB,CAA+B,YAA/B,CAA6C,CAAEI,MAAO,CAAA,CAAT,CAA7C,CACA,OAAMC,QAAUP,OAAA,CAAQ,qDAAR,CAAhB,CACMQ,gBAAkBR,OAAA,CAAQ,qEAAR,CADxB,CAEMS,iBAAmBC,MAAAD,EAA4B,EAA5BA,GAAUC,MAAOC,CAAAA,MAgD1CT,QAAQU,CAAAA,aAAR,CA/CAA,QAAsB,CAACC,SAAD,CAAY,CAChC,MAAMC;AAASN,eAAgBI,CAAAA,aAAhB,CAA8BC,SAA9B,CAAyCJ,gBAAzC,CAsCf,OAAO,CACLM,OAtCFA,QAAe,CAACC,MAAD,CAAS,CACtB,MAAMC,QAAUV,OAAQQ,CAAAA,MAAR,CAAeC,MAAOV,CAAAA,KAAtB,CAAhB,CACMY,WAAaX,OAAQY,CAAAA,cAAR,CAAuBF,OAAvB,CADnB,CAEMG,KAAON,MAAOC,CAAAA,MAAP,CAAc,CACzBM,IAAKL,MAAOK,CAAAA,GADa,CAEzBf,MAAOU,MAAOV,CAAAA,KAAMgB,CAAAA,KAAb,CAAmBJ,UAAnB,CAA0C,EAA1C,CAAgCD,OAAhC,CAFkB,CAAd,CAFb,CAMMM,WAAiBC,KAAJ,CAAUP,OAAV,CACnB,KAAK,IAAIQ,EAAI,CAAR,CAAWC,QAAUR,UAA1B,CAAsCO,CAAtC,CAA0CR,OAA1C,CAAmDQ,CAAA,EAAA,CAAKC,OAAL,EAAgB,EAAnE,CACEH,UAAA,CAAWE,CAAX,CAAA,CAAgBT,MAAOV,CAAAA,KAAMgB,CAAAA,KAAb,CAAmBI,OAAnB,CAA4BA,OAA5B,CAAsC,EAAtC,CAElB,OAAOtB,OAAOuB,CAAAA,MAAP,CAAc,EAAd,CAAkBP,IAAlB,CAAwB,CAAEG,UAAF,CAAxB,CAXe,CAqCjB,CAELK,OA1BFA,QAAe,CAACC,IAAD,CAAO,CACpB,MAAMT,KAAON,MAAOc,CAAAA,MAAP,CAAcC,IAAd,CACb,KAAMX;AAAaX,OAAQY,CAAAA,cAAR,CAAuBU,IAAKN,CAAAA,UAAWZ,CAAAA,MAAvC,CACbmB,WAAAA,CAAa3B,MAAO4B,CAAAA,WAAP,CAAmBb,UAAnB,CACnBX,QAAQqB,CAAAA,MAAR,CAAeC,IAAKN,CAAAA,UAAWZ,CAAAA,MAA/B,CAAuCmB,UAAvC,CACMxB,KAAAA,CAAQH,MAAO6B,CAAAA,MAAP,CAAc,CAACF,UAAD,CAAa,GAAGD,IAAKN,CAAAA,UAArB,CAAiCH,IAAKd,CAAAA,KAAtC,CAAd,CACd,OAAOF,OAAOuB,CAAAA,MAAP,CAAc,EAAd,CAAkBP,IAAlB,CAAwB,CAAEd,MAAAA,IAAF,CAAxB,CANa,CAwBf,CAGL2B,MAZFA,QAAc,CAACJ,IAAD,CAAO,CACnB,MACEL,MAAMU,CAAAA,OAAN,CAAcL,IAAKN,CAAAA,UAAnB,CADF,EAEEM,IAAKN,CAAAA,UAAWY,CAAAA,KAAhB,CACEC,QAAA,EAAYjC,MAAOkC,CAAAA,QAAP,CAAgBD,QAAhB,CAAZ,EAA6D,EAA7D,GAAyCA,QAASzB,CAAAA,MADpD,CAFF,EAKEG,MAAOmB,CAAAA,KAAP,CAAaJ,IAAb,CANiB,CASd,CAILS,SAnBAA,oFAeK;AAKLC,cAAezB,MAAOyB,CAAAA,aALjB,CAvCyB,CAPiG;",
"sources":["node_modules/bip174/src/lib/converter/shared/tapBip32Derivation.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$bip174$src$lib$converter$shared$tapBip32Derivation\"] = function(global,require,module,exports) {\nvar Buffer = require('buffer').Buffer;\n'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nconst varuint = require('../varint');\nconst bip32Derivation = require('./bip32Derivation');\nconst isValidBIP340Key = pubkey => pubkey.length === 32;\nfunction makeConverter(TYPE_BYTE) {\n  const parent = bip32Derivation.makeConverter(TYPE_BYTE, isValidBIP340Key);\n  function decode(keyVal) {\n    const nHashes = varuint.decode(keyVal.value);\n    const nHashesLen = varuint.encodingLength(nHashes);\n    const base = parent.decode({\n      key: keyVal.key,\n      value: keyVal.value.slice(nHashesLen + nHashes * 32),\n    });\n    const leafHashes = new Array(nHashes);\n    for (let i = 0, _offset = nHashesLen; i < nHashes; i++, _offset += 32) {\n      leafHashes[i] = keyVal.value.slice(_offset, _offset + 32);\n    }\n    return Object.assign({}, base, { leafHashes });\n  }\n  function encode(data) {\n    const base = parent.encode(data);\n    const nHashesLen = varuint.encodingLength(data.leafHashes.length);\n    const nHashesBuf = Buffer.allocUnsafe(nHashesLen);\n    varuint.encode(data.leafHashes.length, nHashesBuf);\n    const value = Buffer.concat([nHashesBuf, ...data.leafHashes, base.value]);\n    return Object.assign({}, base, { value });\n  }\n  const expected =\n    '{ ' +\n    'masterFingerprint: Buffer; ' +\n    'pubkey: Buffer; ' +\n    'path: string; ' +\n    'leafHashes: Buffer[]; ' +\n    '}';\n  function check(data) {\n    return (\n      Array.isArray(data.leafHashes) &&\n      data.leafHashes.every(\n        leafHash => Buffer.isBuffer(leafHash) && leafHash.length === 32,\n      ) &&\n      parent.check(data)\n    );\n  }\n  return {\n    decode,\n    encode,\n    check,\n    expected,\n    canAddToArray: parent.canAddToArray,\n  };\n}\nexports.makeConverter = makeConverter;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Buffer","Object","defineProperty","value","varuint","bip32Derivation","isValidBIP340Key","pubkey","length","makeConverter","TYPE_BYTE","parent","decode","keyVal","nHashes","nHashesLen","encodingLength","base","key","slice","leafHashes","Array","i","_offset","assign","encode","data","nHashesBuf","allocUnsafe","concat","check","isArray","every","leafHash","isBuffer","expected","canAddToArray"]
}
