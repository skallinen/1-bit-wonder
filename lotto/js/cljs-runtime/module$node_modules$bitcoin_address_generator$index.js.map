{
"version":3,
"file":"module$node_modules$bitcoin_address_generator$index.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,mDAAA,CAAwE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAChH,IAAIC,OAASH,OAAA,CAAQ,kCAAR,CAAkBG,CAAAA,MAC/B,OAAMC,QAAUJ,OAAA,CAAQ,oFAAR,CAAhB,CACMK,GAAKL,OAAA,CAAQ,2CAAR,CAAoBK,CAAAA,EAD/B,CAEMC,OAASN,OAAA,CAAQ,0CAAR,CAFf,CAGMO,UAAYP,OAAA,CAAQ,qCAAR,CAHlB,CAIMQ,OAASR,OAAA,CAAQ,gCAAR,CAEf;IAAIS,QAAU,CAGd,oBAA+BC,QAADC,EAAc,CACxC,IAAIC,WAAaH,OAAQI,CAAAA,gBAAR,EACjB,KAAIC,KAAOL,OAAQM,CAAAA,qBAAR,CAA8BH,UAA9B,CACPI,KAAAA,CAAUP,OAAQQ,CAAAA,mBAAR,CAA4BH,IAA5B,CACdJ,SAAA,CAAS,CACLQ,IAAKN,UADA,CAELI,QAASA,IAFJ,CAAT,CAJwC,CAH9B,CAcd,iBAA2B,EAAAG,EACTf,OAAQgB,CAAAA,MAAOC,CAAAA,UAAfC,EACWC,CAAAA,SAAUC,CAAAA,QAAlBZ,CAA2B,KAA3BA,CAhBP,CAyBd,sBAAgCA,UAAAa,EAAc,CAGtCF,UAAAA,CADaG,CADHC,IAAItB,EAAJsB,CAAO,WAAPA,CACGD,EAAAA,cAANE,CAAqBhB,UAArBgB,CACUC,CAAAA,SAAL,CAAe,KAAf,CACZf,WAAAA,CAAOR,MAAA,CAAOH,MAAO2B,CAAAA,IAAP,CAAYP,UAAZ,CAAuB,KAAvB,CAAP,CAGX,OAFoCQ,CAAhB,IAAIxB,SAAYwB,EAAAA,MAAhB,CAAuB5B,MAAO2B,CAAAA,IAAP,CAAYhB,UAAZ;AAAkB,KAAlB,CAAvB,CAAiDkB,CAAAA,MAAjDC,EALsB,CAzBhC,CAwCd,oBAA8BA,aAAAC,EAAiB,CAErCC,aAAAA,CAAQhC,MAAO2B,CAAAA,IAAP,CAAY,IAAZ,CAAmBG,aAAcT,CAAAA,QAAd,CAAuB,KAAvB,CAAnB,CAAkD,KAAlD,CAEd,KAAMY,MAAQ9B,MAAA,CAAO6B,aAAP,CAIRE,MAAAA,CAFQ/B,MAAAgC,CAAOnC,MAAO2B,CAAAA,IAAP,CAAYM,KAAZ,CAAmB,KAAnB,CAAPE,CAESC,CAAAA,SAAN,CAAgB,CAAhB,CAAmB,CAAnB,CAEXC,cAAAA,CAAQL,aAAMX,CAAAA,QAAN,CAAe,KAAf,CAARgB,CAAgCH,KAGtC,OADgB7B,OAAOiC,CAAAA,MAAPzB,CAAcb,MAAO2B,CAAAA,IAAP,CAAYU,aAAZ,CAAmB,KAAnB,CAAdxB,CAZ2B,CAxCjC,CAwDdf,OAAOC,CAAAA,OAAP,CAAiBO,OAhE+F;",
"sources":["node_modules/bitcoin-address-generator/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$bitcoin_address_generator$index\"] = function(global,require,module,exports) {\nvar Buffer = require('buffer').Buffer;\nconst bitcoin = require(\"bitcoinjs-lib\");\r\nconst ec = require(\"elliptic\").ec;\r\nconst sha256 = require('js-sha256');\r\nconst ripemd160 = require('ripemd160');\r\nconst base58 = require('bs58');\r\n\r\nlet Bitcoin = {};\r\n\r\n// Generate the key and address\r\nBitcoin.createWalletAddress = (callback) => {\r\n    let privateKey = Bitcoin.createPrivateKey();\r\n    let hash = Bitcoin.generatePublicKeyHash(privateKey);\r\n    let address = Bitcoin.createPublicAddress(hash);\r\n    callback({\r\n        key: privateKey,\r\n        address: address\r\n    });\r\n}\r\n\r\n// Create the private key \r\nBitcoin.createPrivateKey = () => {\r\n    var keyPair = bitcoin.ECPair.makeRandom();\r\n    let privateKey = keyPair.publicKey.toString('hex');\r\n    return privateKey;\r\n}\r\n\r\n/**\r\n * Generate the public key hash\r\n * \r\n * @param {String} privateKey \r\n */\r\nBitcoin.generatePublicKeyHash = privateKey => {\r\n    const ecdsa = new ec('secp256k1'),\r\n        keys = ecdsa.keyFromPrivate(privateKey),\r\n        publicKey = keys.getPublic('hex'),\r\n        hash = sha256(Buffer.from(publicKey, 'hex')),\r\n        publicKeyHash = new ripemd160().update(Buffer.from(hash, 'hex')).digest();\r\n\r\n    return publicKeyHash;\r\n}\r\n\r\n/**\r\n * Create a public address based on the hash\r\n * \r\n * @param {String} publicKeyHash \r\n */\r\nBitcoin.createPublicAddress = publicKeyHash => {\r\n    // step 1 - add prefix \"00\" in hex\r\n    const step1 = Buffer.from(\"00\" + publicKeyHash.toString('hex'), 'hex');\r\n    // step 2 - create SHA256 hash of step 1\r\n    const step2 = sha256(step1);\r\n    // step 3 - create SHA256 hash of step 2\r\n    const step3 = sha256(Buffer.from(step2, 'hex'));\r\n    // step 4 - find the 1st byte of step 3 - save as \"checksum\"\r\n    const checksum = step3.substring(0, 8);\r\n    // step 5 - add step 1 + checksum\r\n    const step4 = step1.toString('hex') + checksum;\r\n    // return base 58 encoding of step 5\r\n    const address = base58.encode(Buffer.from(step4, 'hex'));\r\n    return address;\r\n  }\r\n\r\nmodule.exports = Bitcoin;\n};"],
"names":["shadow$provide","global","require","module","exports","Buffer","bitcoin","ec","sha256","ripemd160","base58","Bitcoin","callback","Bitcoin.createWalletAddress","privateKey","createPrivateKey","hash","generatePublicKeyHash","address","createPublicAddress","key","Bitcoin.createPrivateKey","ECPair","makeRandom","keyPair","publicKey","toString","Bitcoin.generatePublicKeyHash","keyFromPrivate","ecdsa","keys","getPublic","from","update","digest","publicKeyHash","Bitcoin.createPublicAddress","step1","step2","checksum","step3","substring","step4","encode"]
}
