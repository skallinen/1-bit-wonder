{
"version":3,
"file":"module$node_modules$bitcoinjs_lib$src$script_signature.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/bitcoinjs-lib/src/script_signature.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$bitcoinjs_lib$src$script_signature\"] = function(global,require,module,exports) {\nvar Buffer = require('buffer').Buffer;\n'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nexports.encode = exports.decode = void 0;\nconst bip66 = require('./bip66');\nconst types = require('./types');\nconst { typeforce } = types;\nconst ZERO = Buffer.alloc(1, 0);\nfunction toDER(x) {\n  let i = 0;\n  while (x[i] === 0) ++i;\n  if (i === x.length) return ZERO;\n  x = x.slice(i);\n  if (x[0] & 0x80) return Buffer.concat([ZERO, x], 1 + x.length);\n  return x;\n}\nfunction fromDER(x) {\n  if (x[0] === 0x00) x = x.slice(1);\n  const buffer = Buffer.alloc(32, 0);\n  const bstart = Math.max(0, 32 - x.length);\n  x.copy(buffer, bstart);\n  return buffer;\n}\n// BIP62: 1 byte hashType flag (only 0x01, 0x02, 0x03, 0x81, 0x82 and 0x83 are allowed)\nfunction decode(buffer) {\n  const hashType = buffer.readUInt8(buffer.length - 1);\n  const hashTypeMod = hashType & ~0x80;\n  if (hashTypeMod <= 0 || hashTypeMod >= 4)\n    throw new Error('Invalid hashType ' + hashType);\n  const decoded = bip66.decode(buffer.slice(0, -1));\n  const r = fromDER(decoded.r);\n  const s = fromDER(decoded.s);\n  const signature = Buffer.concat([r, s], 64);\n  return { signature, hashType };\n}\nexports.decode = decode;\nfunction encode(signature, hashType) {\n  typeforce(\n    {\n      signature: types.BufferN(64),\n      hashType: types.UInt8,\n    },\n    { signature, hashType },\n  );\n  const hashTypeMod = hashType & ~0x80;\n  if (hashTypeMod <= 0 || hashTypeMod >= 4)\n    throw new Error('Invalid hashType ' + hashType);\n  const hashTypeBuffer = Buffer.allocUnsafe(1);\n  hashTypeBuffer.writeUInt8(hashType, 0);\n  const r = toDER(signature.slice(0, 32));\n  const s = toDER(signature.slice(32, 64));\n  return Buffer.concat([bip66.encode(r, s), hashTypeBuffer]);\n}\nexports.encode = encode;\n\n};"],
"names":["shadow$provide","global","require","module","exports","toDER","x","i","length","ZERO","slice","Buffer","concat","fromDER","buffer","alloc","copy","Math","max","bstart","Object","defineProperty","value","encode","decode","bip66","types","typeforce","hashType","readUInt8","hashTypeMod","Error","decoded","r","s","signature","BufferN","UInt8","hashTypeBuffer","allocUnsafe","writeUInt8"]
}
