{
"version":3,
"file":"module$node_modules$bitcoin_address_generator$node_modules$bitcoinjs_lib$src$ecpair.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/bitcoin-address-generator/node_modules/bitcoinjs-lib/src/ecpair.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$bitcoin_address_generator$node_modules$bitcoinjs_lib$src$ecpair\"] = function(global,require,module,exports) {\nconst ecc = require('tiny-secp256k1')\nconst randomBytes = require('randombytes')\nconst typeforce = require('typeforce')\nconst types = require('./types')\nconst wif = require('wif')\n\nconst NETWORKS = require('./networks')\nconst isOptions = typeforce.maybe(typeforce.compile({\n  compressed: types.maybe(types.Boolean),\n  network: types.maybe(types.Network)\n}))\n\nfunction ECPair (d, Q, options) {\n  options = options || {}\n\n  this.compressed = options.compressed === undefined ? true : options.compressed\n  this.network = options.network || NETWORKS.bitcoin\n\n  this.__d = d || null\n  this.__Q = null\n  if (Q) this.__Q = ecc.pointCompress(Q, this.compressed)\n}\n\nObject.defineProperty(ECPair.prototype, 'privateKey', {\n  enumerable: false,\n  get: function () { return this.__d }\n})\n\nObject.defineProperty(ECPair.prototype, 'publicKey', { get: function () {\n  if (!this.__Q) this.__Q = ecc.pointFromScalar(this.__d, this.compressed)\n  return this.__Q\n}})\n\nECPair.prototype.toWIF = function () {\n  if (!this.__d) throw new Error('Missing private key')\n  return wif.encode(this.network.wif, this.__d, this.compressed)\n}\n\nECPair.prototype.sign = function (hash) {\n  if (!this.__d) throw new Error('Missing private key')\n  return ecc.sign(hash, this.__d)\n}\n\nECPair.prototype.verify = function (hash, signature) {\n  return ecc.verify(hash, this.publicKey, signature)\n}\n\nfunction fromPrivateKey (buffer, options) {\n  typeforce(types.Buffer256bit, buffer)\n  if (!ecc.isPrivate(buffer)) throw new TypeError('Private key not in range [1, n)')\n  typeforce(isOptions, options)\n\n  return new ECPair(buffer, null, options)\n}\n\nfunction fromPublicKey (buffer, options) {\n  typeforce(ecc.isPoint, buffer)\n  typeforce(isOptions, options)\n  return new ECPair(null, buffer, options)\n}\n\nfunction fromWIF (string, network) {\n  const decoded = wif.decode(string)\n  const version = decoded.version\n\n  // list of networks?\n  if (types.Array(network)) {\n    network = network.filter(function (x) {\n      return version === x.wif\n    }).pop()\n\n    if (!network) throw new Error('Unknown network version')\n\n  // otherwise, assume a network object (or default to bitcoin)\n  } else {\n    network = network || NETWORKS.bitcoin\n\n    if (version !== network.wif) throw new Error('Invalid network version')\n  }\n\n  return fromPrivateKey(decoded.privateKey, {\n    compressed: decoded.compressed,\n    network: network\n  })\n}\n\nfunction makeRandom (options) {\n  typeforce(isOptions, options)\n  options = options || {}\n  const rng = options.rng || randomBytes\n\n  let d\n  do {\n    d = rng(32)\n    typeforce(types.Buffer256bit, d)\n  } while (!ecc.isPrivate(d))\n\n  return fromPrivateKey(d, options)\n}\n\nmodule.exports = {\n  makeRandom,\n  fromPrivateKey,\n  fromPublicKey,\n  fromWIF\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","ECPair","d","Q","options","compressed","undefined","network","NETWORKS","bitcoin","__d","__Q","ecc","pointCompress","fromPrivateKey","buffer","typeforce","types","Buffer256bit","isPrivate","TypeError","isOptions","randomBytes","wif","maybe","compile","Boolean","Network","Object","defineProperty","prototype","enumerable","get","pointFromScalar","toWIF","ECPair.prototype.toWIF","Error","encode","sign","ECPair.prototype.sign","hash","verify","ECPair.prototype.verify","signature","publicKey","makeRandom","rng","fromPublicKey","isPoint","fromWIF","string","decoded","decode","version","Array","filter","x","pop","privateKey"]
}
