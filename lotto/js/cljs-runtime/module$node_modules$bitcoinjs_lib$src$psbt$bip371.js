shadow$provide.module$node_modules$bitcoinjs_lib$src$psbt$bip371=function(global,require,module,exports){function isTaprootInput(input){return input&&!!(input.tapInternalKey||input.tapMerkleRoot||input.tapLeafScript&&input.tapLeafScript.length||input.tapBip32Derivation&&input.tapBip32Derivation.length||input.witnessUtxo&&(0,psbtutils_1.isP2TR)(input.witnessUtxo.script))}function isTaprootOutput(output,script){return output&&!!(output.tapInternalKey||output.tapTree||output.tapBip32Derivation&&output.tapBip32Derivation.length||
script&&(0,psbtutils_1.isP2TR)(script))}function tapTreeFromList(leaves=[]){if(1===leaves.length&&0===leaves[0].depth)return{output:leaves[0].script,version:leaves[0].leafVersion};let tree;for(const leaf of leaves)if(tree=instertLeafInTree(leaf,tree),!tree)throw Error("No room left to insert tapleaf in tree");return tree}function decodeSchnorrSignature(signature){return{signature:signature.slice(0,64),hashType:signature.slice(64)[0]||transaction_1.Transaction.SIGHASH_DEFAULT}}function extractTaprootSigs(input){const sigs=
[];input.tapKeySig&&sigs.push(input.tapKeySig);input.tapScriptSig&&sigs.push(...input.tapScriptSig.map(s=>s.signature));sigs.length||(input=getTapKeySigFromWithness(input.finalScriptWitness))&&sigs.push(input);return sigs}function getTapKeySigFromWithness(finalScriptWitness){if(finalScriptWitness&&(finalScriptWitness=finalScriptWitness.slice(2),64===finalScriptWitness.length||65===finalScriptWitness.length))return finalScriptWitness}function _tapTreeToList(tree,leaves=[],depth=0){if(depth>bip341_1.MAX_TAPTREE_DEPTH)throw Error("Max taptree depth exceeded.");
if(!tree)return[];if((0,types_1.isTapleaf)(tree))return leaves.push({depth,leafVersion:tree.version||bip341_1.LEAF_VERSION_TAPSCRIPT,script:tree.output}),leaves;tree[0]&&_tapTreeToList(tree[0],leaves,depth+1);tree[1]&&_tapTreeToList(tree[1],leaves,depth+1);return leaves}function instertLeafInTree(leaf,tree,depth=0){if(depth>bip341_1.MAX_TAPTREE_DEPTH)throw Error("Max taptree depth exceeded.");if(leaf.depth===depth){if(!tree)return{output:leaf.script,version:leaf.leafVersion}}else if(!(0,types_1.isTapleaf)(tree)){var leftSide=
instertLeafInTree(leaf,tree&&tree[0],depth+1);if(leftSide)return[leftSide,tree&&tree[1]];if(leaf=instertLeafInTree(leaf,tree&&tree[1],depth+1))return[tree&&tree[0],leaf]}}function checkIfTapLeafInTree(inputData,newInputData,action){if(newInputData.tapMerkleRoot){const newLeafsInTree=(newInputData.tapLeafScript||[]).every(l=>isTapLeafInTree(l,newInputData.tapMerkleRoot)),oldLeafsInTree=(inputData.tapLeafScript||[]).every(l=>isTapLeafInTree(l,newInputData.tapMerkleRoot));if(!newLeafsInTree||!oldLeafsInTree)throw Error(`Invalid arguments for Psbt.${action}. Tapleaf not part of taptree.`);
}else if(inputData.tapMerkleRoot&&!(newInputData.tapLeafScript||[]).every(l=>isTapLeafInTree(l,inputData.tapMerkleRoot)))throw Error(`Invalid arguments for Psbt.${action}. Tapleaf not part of taptree.`);}function isTapLeafInTree(tapLeaf,merkleRoot){if(!merkleRoot)return!0;const leafHash=(0,bip341_1.tapleafHash)({output:tapLeaf.script,version:tapLeaf.leafVersion});return(0,bip341_1.rootHashFromPath)(tapLeaf.controlBlock,leafHash).equals(merkleRoot)}function sortSignatures(input,tapLeaf){const leafHash=
(0,bip341_1.tapleafHash)({output:tapLeaf.script,version:tapLeaf.leafVersion});return(input.tapScriptSig||[]).filter(tss=>tss.leafHash.equals(leafHash)).map(tss=>Object.assign({positionInScript:(0,psbtutils_1.pubkeyPositionInScript)(tss.pubkey,tapLeaf.script)},tss)).sort((t1,t2)=>t2.positionInScript-t1.positionInScript).map(t=>t.signature)}function findTapLeafToFinalize(input,inputIndex,leafHashToFinalize){if(!input.tapScriptSig||!input.tapScriptSig.length)throw Error(`Can not finalize taproot input #${inputIndex}. No tapleaf script signature provided.`);
const tapLeaf=(input.tapLeafScript||[]).sort((a,b)=>a.controlBlock.length-b.controlBlock.length).find(leaf=>canFinalizeLeaf(leaf,input.tapScriptSig,leafHashToFinalize));if(!tapLeaf)throw Error(`Can not finalize taproot input #${inputIndex}. Signature for tapleaf script not found.`);return tapLeaf}function canFinalizeLeaf(leaf,tapScriptSig,hash){const leafHash=(0,bip341_1.tapleafHash)({output:leaf.script,version:leaf.leafVersion});return(!hash||hash.equals(leafHash))&&void 0!==tapScriptSig.find(tss=>
tss.leafHash.equals(leafHash))}function hasNonTaprootFields(io){return io&&!!(io.redeemScript||io.witnessScript||io.bip32Derivation&&io.bip32Derivation.length)}var Buffer=require("module$node_modules$buffer$index").Buffer;"use strict";Object.defineProperty(exports,"__esModule",{value:!0});exports.checkTaprootInputForSigs=exports.tapTreeFromList=exports.tapTreeToList=exports.tweakInternalPubKey=exports.checkTaprootOutputFields=exports.checkTaprootInputFields=exports.isTaprootOutput=exports.isTaprootInput=
exports.serializeTaprootSignature=exports.tapScriptFinalizer=exports.toXOnly=void 0;const types_1=require("module$node_modules$bitcoinjs_lib$src$types"),transaction_1=require("module$node_modules$bitcoinjs_lib$src$transaction"),psbtutils_1=require("module$node_modules$bitcoinjs_lib$src$psbt$psbtutils"),bip341_1=require("module$node_modules$bitcoinjs_lib$src$payments$bip341"),payments_1=require("module$node_modules$bitcoinjs_lib$src$payments$index"),psbtutils_2=require("module$node_modules$bitcoinjs_lib$src$psbt$psbtutils");
exports.toXOnly=pubKey=>32===pubKey.length?pubKey:pubKey.slice(1,33);exports.tapScriptFinalizer=function(inputIndex,input,tapLeafHashToFinalize){tapLeafHashToFinalize=findTapLeafToFinalize(input,inputIndex,tapLeafHashToFinalize);try{const witness=sortSignatures(input,tapLeafHashToFinalize).concat(tapLeafHashToFinalize.script).concat(tapLeafHashToFinalize.controlBlock);return{finalScriptWitness:(0,psbtutils_1.witnessStackToScriptWitness)(witness)}}catch(err){throw Error(`Can not finalize taproot input #${inputIndex}: ${err}`);
}};exports.serializeTaprootSignature=function(sig,sighashType){sighashType=sighashType?Buffer.from([sighashType]):Buffer.from([]);return Buffer.concat([sig,sighashType])};exports.isTaprootInput=isTaprootInput;exports.isTaprootOutput=isTaprootOutput;exports.checkTaprootInputFields=function(inputData,newInputData,action){const isBadTaprootUpdate=isTaprootInput(inputData)&&hasNonTaprootFields(newInputData),isBadNonTaprootUpdate=hasNonTaprootFields(inputData)&&isTaprootInput(newInputData),hasMixedFields=
inputData===newInputData&&isTaprootInput(newInputData)&&hasNonTaprootFields(newInputData);if(isBadTaprootUpdate||isBadNonTaprootUpdate||hasMixedFields)throw Error(`Invalid arguments for Psbt.${action}. `+"Cannot use both taproot and non-taproot fields.");checkIfTapLeafInTree(inputData,newInputData,action)};exports.checkTaprootOutputFields=function(outputData,newOutputData,action){const isBadTaprootUpdate=isTaprootOutput(outputData)&&hasNonTaprootFields(newOutputData),isBadNonTaprootUpdate=hasNonTaprootFields(outputData)&&
isTaprootOutput(newOutputData),hasMixedFields=outputData===newOutputData&&isTaprootOutput(newOutputData)&&hasNonTaprootFields(newOutputData);if(isBadTaprootUpdate||isBadNonTaprootUpdate||hasMixedFields)throw Error(`Invalid arguments for Psbt.${action}. `+"Cannot use both taproot and non-taproot fields.");if(newOutputData.tapTree||newOutputData.tapInternalKey)if(action=newOutputData.tapInternalKey||outputData.tapInternalKey,newOutputData=newOutputData.tapTree||outputData.tapTree,action&&({script:outputData}=
outputData,newOutputData=newOutputData&&tapTreeFromList(newOutputData.leaves),{output:newOutputData}=(0,payments_1.p2tr)({internalPubkey:action,scriptTree:newOutputData}),outputData&&!outputData.equals(newOutputData)))throw Error("Error adding output. Script or address missmatch.");};exports.tweakInternalPubKey=function(inputIndex,input){const tapInternalKey=input.tapInternalKey;input=tapInternalKey&&(0,bip341_1.tweakKey)(tapInternalKey,input.tapMerkleRoot);if(!input)throw Error(`Cannot tweak tap internal key for input #${inputIndex}. Public key: ${tapInternalKey&&
tapInternalKey.toString("hex")}`);return input.x};exports.tapTreeToList=function(tree){if(!(0,types_1.isTaptree)(tree))throw Error("Cannot convert taptree to tapleaf list. Expecting a tapree structure.");return _tapTreeToList(tree)};exports.tapTreeFromList=tapTreeFromList;exports.checkTaprootInputForSigs=function(input,action){return extractTaprootSigs(input).some(sig=>(0,psbtutils_2.signatureBlocksAction)(sig,decodeSchnorrSignature,action))}}
//# sourceMappingURL=module$node_modules$bitcoinjs_lib$src$psbt$bip371.js.map
